(function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"==typeof window?"undefined"==typeof global?"undefined"==typeof self?this:self:global:window,t.nlp=e()}})(function(){var e=Math.floor,t;return function(){function s(l,e,n){function t(o,i){if(!e[o]){if(!l[o]){var d="function"==typeof require&&require;if(!i&&d)return d(o,!0);if(r)return r(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var a=e[o]={exports:{}};l[o][0].call(a.exports,function(e){var r=l[o][1][e];return t(r||e)},a,a.exports,s,l,e,n)}return e[o].exports}for(var r="function"==typeof require&&require,a=0;a<n.length;a++)t(n[a]);return t}return s}()({1:[function(e,n,a){(function(s){var l=String.fromCharCode;!function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)}),function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)}),function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)}),function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)}),function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)}),function(o){if("object"==typeof a&&"undefined"!=typeof n)n.exports=o();else if("function"==typeof t&&t.amd)t([],o);else{var r;r="undefined"==typeof window?"undefined"==typeof s?"undefined"==typeof self?this:self:s:window,r.unpack=o()}}(function(){return function l(d,r,n){function a(o,i){if(!r[o]){if(!d[o]){var u="function"==typeof e&&e;if(!i&&u)return u(o,!0);if(t)return t(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var m=r[o]={exports:{}};d[o][0].call(m.exports,function(e){var t=d[o][1][e];return a(t?t:e)},m,m.exports,l,d,r,n)}return r[o].exports}for(var t="function"==typeof e&&e,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(n,r){"use strict";var a=36,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=s.split("").reduce(function(t,r,e){return t[r]=e,t},{});r.exports={toAlphaCode:function(t){if(void 0!==s[t])return s[t];for(var r=1,e=a,n="";t>=e;t-=e,r++,e*=a);for(;r--;){var o=t%a;n=l((10>o?48:55)+o)+n,t=(t-o)/a}return n},fromAlphaCode:function(i){if(void 0!==o[i])return o[i];for(var r=0,e=1,n=a,t=1;e<i.length;r+=n,e++,n*=a);for(var l=i.length-1,d;0<=l;l--,t*=a)d=i.charCodeAt(l)-48,10<d&&(d-=7),r+=d*t;return r}}},{}],2:[function(t,n){"use strict";var a=t("./unpack");n.exports=function(t){var s=t.split("|").reduce(function(t,r){var e=r.split("\xA6");return t[e[0]]=e[1],t},{}),e={};return Object.keys(s).forEach(function(n){var r=a(s[n]);"true"===n&&(n=!0);for(var t=0,o;t<r.length;t++)o=r[t],!0===e.hasOwnProperty(o)?!1===Array.isArray(e[o])?e[o]=[e[o],n]:e[o].push(n):e[o]=n}),e}},{"./unpack":4}],3:[function(t,n){"use strict";var a=t("../encoding");n.exports=function(s){for(var r=/([0-9A-Z]+):([0-9A-Z]+)/,e=0,n;e<s.nodes.length;e++){if(n=r.exec(s.nodes[e]),!n){s.symCount=e;break}s.syms[a.fromAlphaCode(n[1])]=a.fromAlphaCode(n[2])}s.nodes=s.nodes.slice(s.symCount,s.nodes.length)}},{"../encoding":1}],4:[function(n,r){"use strict";var a=n("./symbols"),s=n("../encoding"),e=function(t,r,e){var n=s.fromAlphaCode(r);return n<t.symCount?t.syms[n]:e+n+1-t.symCount},t=function(i){var r=[];return function l(n,o){var t=i.nodes[n];"!"===t[0]&&(r.push(o),t=t.slice(1));for(var u=t.split(/([A-Z0-9,]+)/g),m=0;m<u.length;m+=2){var s=u[m],a=u[m+1];if(s){var c=o+s;if(","!==a&&void 0!==a){var d=e(i,a,n);l(d,c)}else r.push(c)}}}(0,""),r};r.exports=function(n){var r={nodes:n.split(";"),syms:[],symCount:0};return n.match(":")&&a(r),t(r)}},{"../encoding":1,"./symbols":3}]},{},[2])(2)})}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global)},{}],2:[function(e,t){t.exports={author:"Spencer Kelly <spencermountain@gmail.com> (http://spencermounta.in)",name:"compromise",description:"natural language processing in the browser",version:"11.13.2",main:"./builds/compromise.js",unpkg:"./builds/compromise.min.js",types:"./compromise.d.ts",repository:{type:"git",url:"git://github.com/nlp-compromise/compromise.git"},scripts:{test:"tape \"./test/unit/**/*.test.js\" | tap-dancer","test:spec":"tape \"./test/unit/**/*.test.js\" | tap-spec",testb:"TESTENV=prod tape \"./test/unit/**/*.test.js\" | tap-spec",buildTest:"TESTENV=prod node ./scripts/test.js","test:types":"tsc --project test/types",browserTest:"node ./scripts/browserTest.js",benchmark:"node ./scripts/benchmark.js",build:"node ./scripts/build/index.js",pack:"node ./scripts/pack.js",prepublishOnly:"node ./scripts/prepublish",postpublish:"node ./scripts/postpublish",watch:"amble ./scratch.js",filesize:"node ./scripts/lib/filesize.js",coverage:"node ./scripts/postpublish/coverage.js",lint:"node ./scripts/prepublish/linter.js"},files:["builds/","docs/","compromise.d.ts"],dependencies:{"efrt-unpack":"2.0.3"},devDependencies:{"@babel/core":"7.3.4","@babel/preset-env":"7.3.4",amble:"0.0.7",babelify:"10.0.0",babili:"0.1.4",browserify:"16.2.3",chalk:"2.4.2",codecov:"3.2.0","compromise-plugin":"0.0.8",derequire:"2.0.6",nyc:"13.3.0",shelljs:"0.8.3","tap-dancer":"0.1.2",terser:"3.17.0",tape:"4.10.1"},license:"MIT"}},{}],3:[function(e,t,n){"use strict";const r=e("./tags"),a={reset:"\x1B[0m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",black:"\x1B[30m"};"undefined"==typeof t&&Object.keys(a).forEach((e)=>{a[e]=""}),n.ensureString=(e)=>{if("string"==typeof e)return e;return"number"==typeof e?e+"":""},n.ensureObject=(e)=>{return"object"==typeof e?null===e||e instanceof Array?{}:e:{}},n.titleCase=(e)=>{return e.charAt(0).toUpperCase()+e.substr(1)},n.copy=(e)=>{let t={};return e=n.ensureObject(e),Object.keys(e).forEach((n)=>{t[n]=e[n]}),t},n.extend=(e,t)=>{e=n.copy(e);const r=Object.keys(t);for(let n=0;n<r.length;n++)e[r[n]]=t[r[n]];return e},n.green=function(e){return a.green+e+a.reset},n.red=function(e){return a.red+e+a.reset},n.blue=function(e){return a.blue+e+a.reset},n.magenta=function(e){return a.magenta+e+a.reset},n.cyan=function(e){return a.cyan+e+a.reset},n.yellow=function(e){return a.yellow+e+a.reset},n.black=function(e){return a.black+e+a.reset},n.printTag=function(e){if(r[e]){const t=r[e].color||"blue";return n[t](e)}return e},n.printTerm=function(e){const t=Object.keys(e.tags);for(let a=0;a<t.length;a++)if(r[t[a]]){const s=r[t[a]].color||"black";return n[s](e.out("text"))}return a.reset+e.plaintext+a.reset},n.leftPad=function(e,t,n){for(n=n||" ",e=e.toString();e.length<t;)e+=n;return e},n.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},n.isObject=function(e){return e===Object(e)}},{"./tags":137}],4:[function(e,n){(function(r){"use strict";const a=e("./text/build"),s=e("../package.json"),o=e("./log"),i=e("./world/unpack");let l=e("./world"),d=l.w;const u=function(e,t){t&&d.plugin({words:t});let n=a(e,d);return n.tagger(),n};u.unpack=function(e){return i(e)},u.version=s.version,u.verbose=function(e){o.enable(e)},u.tokenize=function(e){return a(e)},u.plugin=function(e){d.plugin(e)},u.addWords=function(e){d.plugin({words:e})},u.addTags=function(e){d.plugin({tags:e})},u.addRegex=function(e){d.plugin({regex:e})},u.addPatterns=function(e){d.plugin({patterns:e})},u.addPlurals=function(e){d.plugin({plurals:e})},u.addConjugations=function(e){d.plugin({conjugations:e})},u.clone=function(){let e=l.reBuild();var t=function(t,n){n&&e.plugin({words:n});let r=a(t,e);return r.tagger(),r};return t.tokenize=u.tokenize,t.verbose=u.verbose,t.version=u.version,["Words","Tags","Regex","Patterns","Plurals","Conjugations"].forEach((n)=>{t["add"+n]=function(t){e["add"+n](t)}}),t},"undefined"==typeof self?"undefined"==typeof window?"undefined"!=typeof r&&(r.nlp=u):window.nlp=u:self.nlp=u,"function"==typeof t&&t.amd&&t(u),"undefined"!=typeof n&&(n.exports=u)}).call(this,"undefined"==typeof global?"undefined"==typeof self?"undefined"==typeof window?{}:window:self:global)},{"../package.json":2,"./log":6,"./text/build":190,"./world":215,"./world/unpack":223}],5:[function(e,t){"use strict";const n=e("../fns");t.exports={tag:(e,t,r)=>{let a=e.normal||"["+e.silent_term+"]";a=n.leftPad("'"+a+"'",12),a+="  ->   "+t,a+=n.leftPad(r||"",15),console.log("%c"+a," color: #a2c99c")},untag:(e,t,r)=>{let a=e.normal||"["+e.silent_term+"]";a=n.leftPad("'"+a+"'",12),a+="  ~*   "+t,a+="    "+(r||""),console.log("%c"+a," color: #b66a6a")}}},{"../fns":3}],6:[function(e,t){"use strict";const n=e("./client"),r=e("./server");let a=!1;t.exports={enable:(e)=>{e===void 0&&(e=!0),a=e},tag:(e,t,s)=>{(!0===a||"tagger"===a)&&("undefined"==typeof window?r.tag(e,t,s):n.tag(e,t,s))},unTag:(e,t,s)=>{(!0===a||"tagger"===a)&&("undefined"==typeof window?r.untag(e,t,s):n.untag(e,t,s))}}},{"./client":5,"./server":7}],7:[function(e,t){"use strict";const n=e("../fns");t.exports={tag:(e,t,r)=>{let a=e.normal||"["+e.silent_term+"]";a=n.yellow(a),a=n.leftPad("'"+a+"'",20),a+="  ->   "+n.printTag(t),a=n.leftPad(a,54),console.log("       "+a+"("+n.cyan(r||"")+")")},untag:function(e,t,r){let a="-"+e.normal+"-";a=n.red(a),a=n.leftPad(a,20),a+="  ~*   "+n.red(t),a=n.leftPad(a,54),console.log("       "+a+"("+n.red(r||"")+")")}}},{"../fns":3}],8:[function(e,t){t.exports={fns:e("./fns"),Terms:e("./terms")}},{"./fns":3,"./terms":165}],9:[function(e,t){"use strict";const n=e("../../text");t.exports=n.makeSubset({stripPeriods:function(){return this.list.forEach((e)=>{e.terms.forEach((e)=>{let t=e._text.split(".");2<t.length&&(e.text=t.join(""))})}),this},addPeriods:function(){return this.list.forEach((e)=>{e.terms.forEach((e)=>{let t=e._text.split(".");if(2<t.length){let t=e._text.replace(/\./g,"");e.text=t.split("").join(".")+"."}})}),this},data:function(){return this.terms().list.map((e)=>{let n=e.terms[0],t=n.text.toUpperCase().replace(/\./g,"").split("");return{periods:t.join("."),normal:t.join(""),text:n.text}})}},function(e,t){return e=e.match("#Acronym"),"number"==typeof t&&(e=e.get(t)),e})},{"../../text":192}],10:[function(e,t){"use strict";const n=e("../../text"),r=e("./methods"),a=function(e,t){return!e||3>=e.length?!1:!("Comparable"!==t[e])||"Adjective"!==t[e]&&!(-1!==e.indexOf(" "))};t.exports=n.makeSubset({data:function(){return this.list.map((e)=>{const t=e.out("normal");let n={normal:t,text:this.out("text"),comparative:"more "+t,superlative:"most "+t,adverbForm:null,nounForm:null};return!0===a(t,this.world().words)&&(n.comparative=r.toComparative(t)||n.comparative,n.superlative=r.toSuperlative(t)||n.superlative,n.adverbForm=r.toAdverb(t),n.nounForm=r.toNoun(t)),n})}},function(e,t){return e=e.match("#Adjective"),"number"==typeof t&&(e=e.get(t)),e})},{"../../text":192,"./methods":11}],11:[function(e,t){"use strict";t.exports={toNoun:e("./toNoun"),toSuperlative:e("./toSuperlative"),toComparative:e("./toComparative"),toAdverb:e("./toAdverb"),toVerb:e("./toVerb")}},{"./toAdverb":12,"./toComparative":13,"./toNoun":14,"./toSuperlative":15,"./toVerb":16}],12:[function(e,t){"use strict";const n=[/airs$/,/ll$/,/ee.$/,/ile$/,/y$/],r=e("../../../world/more-data/irregularAdjectives").toAdverb,a=[{reg:/al$/i,repl:"ally"},{reg:/ly$/i,repl:"ly"},{reg:/(.{3})y$/i,repl:"$1ily"},{reg:/que$/i,repl:"quely"},{reg:/ue$/i,repl:"uly"},{reg:/ic$/i,repl:"ically"},{reg:/ble$/i,repl:"bly"},{reg:/l$/i,repl:"ly"}];t.exports=function(e){if(!0===r.hasOwnProperty(e))return r[e];for(let t=0;t<n.length;t++)if(!0===n[t].test(e))return null;for(let t=0;t<a.length;t++)if(!0===a[t].reg.test(e))return e.replace(a[t].reg,a[t].repl);return e+"ly"}},{"../../../world/more-data/irregularAdjectives":218}],13:[function(e,t){"use strict";const n=[/ght$/,/nge$/,/ough$/,/ain$/,/uel$/,/[au]ll$/,/ow$/,/old$/,/oud$/,/e[ae]p$/],r=[/ary$/,/ous$/],a=e("../../../world/more-data/irregularAdjectives").toComparative,s=[{reg:/y$/i,repl:"ier"},{reg:/([aeiou])t$/i,repl:"$1tter"},{reg:/([aeou])de$/i,repl:"$1der"},{reg:/nge$/i,repl:"nger"}];t.exports=function(e){if(a.hasOwnProperty(e))return a[e];for(let t=0;t<s.length;t++)if(!0===s[t].reg.test(e))return e.replace(s[t].reg,s[t].repl);for(let t=0;t<r.length;t++)if(!0===r[t].test(e))return null;for(let t=0;t<n.length;t++)if(!0===n[t].test(e))return e+"er";return!0===/e$/.test(e)?e+"r":e+"er"}},{"../../../world/more-data/irregularAdjectives":218}],14:[function(e,t){"use strict";const n={clean:"cleanliness",naivety:"naivety",hurt:"hurt"},r=[{reg:/y$/,repl:"iness"},{reg:/le$/,repl:"ility"},{reg:/ial$/,repl:"y"},{reg:/al$/,repl:"ality"},{reg:/ting$/,repl:"ting"},{reg:/ring$/,repl:"ring"},{reg:/bing$/,repl:"bingness"},{reg:/sing$/,repl:"se"},{reg:/ing$/,repl:"ment"},{reg:/ess$/,repl:"essness"},{reg:/ous$/,repl:"ousness"}];t.exports=function(e){if(n.hasOwnProperty(e))return n[e];const t=e.charAt(e.length-1);if("w"===t||"s"===t)return null;for(let t=0;t<r.length;t++)if(!0===r[t].reg.test(e))return e.replace(r[t].reg,r[t].repl);return e+"ness"}},{}],15:[function(e,t){"use strict";const n=[/ght$/,/nge$/,/ough$/,/ain$/,/uel$/,/[au]ll$/,/ow$/,/oud$/,/...p$/],r=[/ary$/],a=e("../../../world/more-data/irregularAdjectives").toSuperlative,s=[{reg:/y$/i,repl:"iest"},{reg:/([aeiou])t$/i,repl:"$1ttest"},{reg:/([aeou])de$/i,repl:"$1dest"},{reg:/nge$/i,repl:"ngest"},{reg:/([aeiou])te$/i,repl:"$1test"}];t.exports=function(e){if(a.hasOwnProperty(e))return a[e];for(let t=0;t<s.length;t++)if(s[t].reg.test(e))return e.replace(s[t].reg,s[t].repl);for(let t=0;t<r.length;t++)if(!0===r[t].test(e))return null;for(let t=0;t<n.length;t++)if(!0===n[t].test(e))return"e"===e.charAt(e.length-1)?e+"st":e+"est";return e+"est"}},{"../../../world/more-data/irregularAdjectives":218}],16:[function(e,t){"use strict";const n={red:"redden",sad:"sadden",fat:"fatten"};t.exports=(e)=>{return!0===n.hasOwnProperty(e)?n[e]:!0===/e$/.test(e)?e+"n":e+"en"}},{}],17:[function(e,t){"use strict";const n=e("../../text"),r=e("./toAdjective");t.exports=n.makeSubset({data:function(){return this.terms().list.map((e)=>{let n=e.terms[0];return{adjectiveForm:r(n.normal),normal:n.normal,text:n.text}})}},function(e,t){return e=e.splitAfter("#Comma"),e=e.match("#Adverb+"),"number"==typeof t&&(e=e.get(t)),e})},{"../../text":192,"./toAdjective":18}],18:[function(e,t){"use strict";const n={idly:"idle",sporadically:"sporadic",basically:"basic",grammatically:"grammatical",alphabetically:"alphabetical",economically:"economical",conically:"conical",politically:"political",vertically:"vertical",practically:"practical",theoretically:"theoretical",critically:"critical",fantastically:"fantastic",mystically:"mystical",pornographically:"pornographic",fully:"full",jolly:"jolly",wholly:"whole"},r=[{reg:/bly$/i,repl:"ble"},{reg:/gically$/i,repl:"gical"},{reg:/([rsdh])ically$/i,repl:"$1ical"},{reg:/ically$/i,repl:"ic"},{reg:/uly$/i,repl:"ue"},{reg:/ily$/i,repl:"y"},{reg:/(.{3})ly$/i,repl:"$1"}];t.exports=function(e){if(n.hasOwnProperty(e))return n[e];for(let t=0;t<r.length;t++)if(!0===r[t].reg.test(e))return e.replace(r[t].reg,r[t].repl);return e}},{}],19:[function(e,t){"use strict";const n=(e,t)=>{t.whitespace.after=e.whitespace.after,e.whitespace.after="",t.whitespace.before="",e.silent_term=e.text,t.silent_term=t.text,t.text="",e.tag("Contraction","new-contraction"),t.tag("Contraction","new-contraction")},r={can:"can't",will:"won't"};t.exports=function(e){return!1===e.expanded||e.match("#Contraction").found?e:(e.match("(#Noun|#QuestionWord) is").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'s",e.contracted=!0}),e.match("#PronNoun did").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'d",e.contracted=!0}),e.match("#QuestionWord (did|do)").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'d",e.contracted=!0}),e.match("#Noun (could|would)").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'d",e.contracted=!0}),e.match("(they|we|you) are").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'re",e.contracted=!0}),e.match("i am").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'m",e.contracted=!0}),e.match("(#Noun|#QuestionWord) will").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'ll",e.contracted=!0}),e.match("(they|we|you|i) have").list.forEach((e)=>{n(e.terms[0],e.terms[1]),e.terms[0].text+="'ve",e.contracted=!0}),e.match("(#Copula|#Modal|do|does|have|has|can|will) not").list.forEach((e)=>{n(e.terms[0],e.terms[1]),!0===r.hasOwnProperty(e.terms[0].text)?e.terms[0].text=r[e.terms[0].text]:e.terms[0].text+="n't",e.contracted=!0}),e)}},{}],20:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./contract"),a=e("./expand"),s=function(e,t,r){n.call(this,e,t,r)};s.prototype=Object.create(n.prototype),s.prototype.data=function(){let e=a(this.clone()),t=r(this.clone());return{text:this.out("text"),normal:this.out("normal"),expanded:{normal:e.out("normal"),text:e.out("text")},contracted:{normal:t.out("normal"),text:t.out("text")},isContracted:!!this.contracted}},s.prototype.expand=function(){return a(this)},s.prototype.contract=function(){return r(this)},t.exports=s},{"../../paths":8,"./contract":19,"./expand":21}],21:[function(e,t){"use strict";t.exports=function(e){return!1===e.contracted?e:(e.terms.forEach((e)=>{e.silent_term&&(!e.text&&(e.whitespace.before=" "),e._text=e.silent_term,e.tags.TitleCase&&e.toTitleCase(),e.normalize(),e.silent_term=null,e.unTag("Contraction","expanded"))}),e)}},{}],22:[function(e,t){"use strict";t.exports=(e)=>{let t=e.not("#Contraction"),n=t.match("(#Noun|#QuestionWord) (#Copula|did|do|have|had|could|would|will)");return n.concat(t.match("(they|we|you|i) have")),n.concat(t.match("i am")),n.concat(t.match("(#Copula|#Modal|do|does|have|has|can|will) not")),n.list.forEach((e)=>{e.expanded=!0}),n}},{}],23:[function(e,t){"use strict";const n=e("../../text"),r=e("./contraction"),a=e("./findPossible");t.exports=n.makeSubset({contract:function(){return this.list.forEach((e)=>e.contract()),this},expand:function(){return this.list.forEach((e)=>e.expand()),this},contracted:function(){return this.list=this.list.filter((e)=>{return e.contracted}),this},expanded:function(){return this.list=this.list.filter((e)=>{return!e.contracted}),this}},function(e,t){let s=e.match("#Contraction #Contraction #Contraction?");s.list=s.list.map((e)=>{let t=new r(e.terms,e.world,e.refText,e.refTerms);return t.contracted=!0,t});let o=a(e);return o.list.forEach((e)=>{let t=new r(e.terms,e.world,e.refText,e.refTerms);t.contracted=!1,s.list.push(t)}),s.sort("chronological"),"number"==typeof t&&(s=s.get(t)),s})},{"../../text":192,"./contraction":20,"./findPossible":22}],24:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./parseDate"),a=function(e,t,r){n.call(this,e,t,r),this.month=this.match("#Month")};a.prototype=Object.create(n.prototype),a.prototype.data=function(){return{text:this.out("text"),normal:this.out("normal"),date:r(this)}},t.exports=a},{"../../paths":8,"./parseDate":28}],25:[function(e,t){"use strict";const n=e("../../text"),r=e("./date"),a=e("./weekday"),s=e("./month");t.exports=n.makeSubset({toShortForm:function(){return this.match("#Month").terms().list.forEach((e)=>{let n=e.terms[0];s.toShortForm(n)}),this.match("#WeekDay").terms().list.forEach((e)=>{let n=e.terms[0];a.toShortForm(n)}),this},toLongForm:function(){return this.match("#Month").terms().list.forEach((e)=>{let n=e.terms[0];s.toLongForm(n)}),this.match("#WeekDay").terms().list.forEach((e)=>{let n=e.terms[0];a.toLongForm(n)}),this}},function(e,t){let a=e.match("#Date+");return"number"==typeof t&&(a=a.get(t)),a.list=a.list.map((e)=>{return new r(e.terms,e.world,e.refText,e.refTerms)}),a})},{"../../text":192,"./date":24,"./month":27,"./weekday":31}],26:[function(e,t,n){n.longMonths={january:0,february:1,march:2,april:3,may:4,june:5,july:6,august:7,september:8,october:9,november:10,december:11},n.shortMonths={jan:0,feb:1,mar:2,apr:3,may:4,jun:5,jul:6,aug:7,sep:8,oct:9,nov:10,dec:11,febr:1,sept:8}},{}],27:[function(e,t){"use strict";const n=e("./data"),r=n.shortMonths,a=n.longMonths,s=(e)=>{return e.charAt(0).toUpperCase()+e.substr(1)};t.exports={index:function(e){if(e.tags.Month){if(a[e.normal]!==void 0)return a[e.normal];if(void 0!==r[e.normal])return r[e.normal]}return null},toShortForm:function(e){if(void 0!==e.tags.Month&&void 0!==a[e.normal]){let t=Object.keys(r),n=e.getPunctuation()||"";e.text=t[a[e.normal]]+n,e.tags.TitleCase&&(e.text=s(e.text))}return e.dirty=!0,e},toLongForm:function(e){if(void 0!==e.tags.Month&&void 0!==r[e.normal]){let t=Object.keys(a),n=e.getPunctuation()||"";e.text=t[r[e.normal]]+n,e.tags.TitleCase&&(e.text=s(e.text))}return e.dirty=!0,e}}},{"./data":26}],28:[function(e,t){"use strict";const n=e("./parseTime"),a=e("./weekday"),s=e("./month"),o=(e)=>{return e&&31>e&&0<e},i=(e)=>{return e&&1e3<e&&3e3>e};t.exports=(e)=>{let t={month:null,date:null,weekday:null,year:null,named:null,time:null},r=e.match("(#Holiday|today|tomorrow|yesterday)");if(r.found&&(t.named=r.out("normal")),r=e.match("#Month"),r.found&&(t.month=s.index(r.list[0].terms[0])),r=e.match("#WeekDay"),r.found&&(t.weekday=a.index(r.list[0].terms[0])),r=e.match("#Time"),r.found&&(t.time=n(e),e.not("#Time")),r=e.match("#Month #Value #Year"),r.found){let n=r.values().numbers();o(n[0])&&(t.date=n[0]);let a=parseInt(e.match("#Year").out("normal"),10);i(a)&&(t.year=a)}if(!r.found){if(r=e.match("#Month #Value"),r.found){let e=r.values().numbers(),n=e[0];o(n)&&(t.date=n)}if(r=e.match("#Month #Year"),r.found){let n=parseInt(e.match("#Year").out("normal"),10);i(n)&&(t.year=n)}}if(r=e.match("#Value of #Month"),r.found){let e=r.values().numbers()[0];o(e)&&(t.date=e)}return t}},{"./month":27,"./parseTime":29,"./weekday":31}],29:[function(e,t){"use strict";const n=/([12]?[0-9]) ?(am|pm)/i,r=/([12]?[0-9]):([0-9][0-9]) ?(am|pm)?/i,a=(e)=>{return e&&0<e&&25>e},s=(e)=>{return e&&0<e&&60>e};t.exports=(e)=>{let o={logic:null,hour:null,minute:null,second:null,timezone:null},t=e.match("(by|before|for|during|at|until|after) #Time").firstTerm();t.found&&(o.logic=t.out("normal"));let i=e.match("#Time");return i.terms().list.forEach((e)=>{let i=e.terms[0],t=i.text.match(n);null!==t&&(o.hour=parseInt(t[1],10),"pm"===t[2]&&(o.hour+=12),!1===a(o.hour)&&(o.hour=null)),t=i.text.match(r),null!==t&&(o.hour=parseInt(t[1],10),o.minute=parseInt(t[2],10),!s(o.minute)&&(o.minute=null),"pm"===t[3]&&(o.hour+=12),!1===a(o.hour)&&(o.hour=null))}),o}},{}],30:[function(e,t,n){n.longDays={sunday:0,monday:1,tuesday:2,wednesday:3,thursday:4,friday:5,saturday:6},n.shortDays={sun:0,mon:1,tues:2,wed:3,weds:3,thurs:4,fri:5,sat:6}},{}],31:[function(e,t){"use strict";const n=e("./data"),r=n.shortDays,a=n.longDays;t.exports={index:function(e){if(e.tags.WeekDay){if(a[e.normal]!==void 0)return a[e.normal];if(void 0!==r[e.normal])return r[e.normal]}return null},toShortForm:function(e){if(e.tags.WeekDay&&void 0!==a[e.normal]){let t=Object.keys(r);e.text=t[a[e.normal]]}return e},toLongForm:function(e){if(e.tags.WeekDay&&void 0!==r[e.normal]){let t=Object.keys(a);e.text=t[r[e.normal]]}return e}}},{"./data":30}],32:[function(e,t){"use strict";const n=e("./index"),a=e("./getGrams"),s=function(e,t,r){n.call(this,e,t,r)};s.prototype=Object.create(n.prototype),s.find=function(e,t,r){let o={size:[1,2,3,4],edge:"end"};r&&(o.size=[r]);let i=a(e,o);return e=new s(i),e.sort(),"number"==typeof t&&(e=e.get(t)),e},t.exports=s},{"./getGrams":33,"./index":35}],33:[function(e,t){"use strict";const r=e("./gram"),a=function(e){return e=e.terms.filter((e)=>""!==e._text)},n=function(e,t){let n=a(e);if(n.length<t)return[];let s=[];for(let a=0,o;a<n.length-t+1;a++)o=new r(n.slice(a,a+t)),s.push(o);return s},s=function(e,t){let n=a(e);if(n.length<t)return[];let s=[new r(n.slice(0,t))];return s},o=function(e,t){let n=a(e);if(n.length<t)return[];let s=[new r(n.slice(n.length-t,n.length))];return s};t.exports=function(e,t){t=t||{},t.size=t.size||[1,2,3],"number"==typeof t.size&&(t.size=[t.size]);let r={};t.size.forEach((a)=>{e.list.forEach((e)=>{let i=[];i="start"===t.edge?s(e,a):"end"===t.edge?o(e,a):n(e,a),i.forEach((e)=>{r.hasOwnProperty(e.key)?r[e.key].inc():r[e.key]=e})})});let a=Object.keys(r).map((e)=>r[e]);return a}},{"./gram":34}],34:[function(e,t){"use strict";const n=e("../../paths").Terms,r=function(e,t,r){n.call(this,e,t,r),this.key=this.out("normal"),this.size=e.length,this.count=1};r.prototype=Object.create(n.prototype),r.prototype.inc=function(){this.count+=1},t.exports=r},{"../../paths":8}],35:[function(e,t){"use strict";const n=e("../../text"),a=e("./getGrams"),s=function(e){return e.list=e.list.sort((e,t)=>{return e.count>t.count?-1:e.count===t.count&&(e.size>t.size||e.key.length>t.key.length)?-1:1}),e};t.exports=n.makeSubset({data:function(){return this.list.map((e)=>{return{normal:e.out("normal"),count:e.count,size:e.size}})},unigrams:function(){return this.list=this.list.filter((e)=>1===e.size),this},bigrams:function(){return this.list=this.list.filter((e)=>2===e.size),this},trigrams:function(){return this.list=this.list.filter((e)=>3===e.size),this},sort:function(){return s(this)}},function(e,t){let r=[];"number"==typeof t&&(t={n:t}),t=t||{};let o=t.max||4;for(let n=1;n<=o;n++)r.push(n);t.size&&(r=[t.size]);let i={size:r},l=a(e,i);return e=new n(l),e=s(e),void 0!==t.n&&(e=e.get(t.n)),e})},{"../../text":192,"./getGrams":33}],36:[function(e,t){"use strict";const n=e("./index"),a=e("./getGrams"),s=function(e,t,r){n.call(this,e,t,r)};s.prototype=Object.create(n.prototype),s.find=function(e,t,r){let o={size:[1,2,3,4],edge:"start"};r&&(o.size=[r]);let i=a(e,o);return e=new s(i),e.sort(),"number"==typeof t&&(e=e.get(t)),e},t.exports=s},{"./getGrams":33,"./index":35}],37:[function(e,t){"use strict";t.exports=function(e){if(!e.tags.Noun)return!1;if(e.tags.Plural)return!0;const t=["Pronoun","Place","Value","Person","Month","WeekDay","RelativeDay","Holiday"];for(let n=0;n<t.length;n++)if(e.tags[t[n]])return!1;return!0!==e.tags.Uncountable}},{}],38:[function(e,t){"use strict";const n=e("../../text"),r=e("./noun");t.exports=n.makeSubset({isPlural:function(){return this.list=this.list.filter((e)=>e.isPlural()),this},hasPlural:function(){return this.list.map((e)=>e.hasPlural())},toPlural:function(){return this.list.forEach((e)=>e.toPlural()),this},toSingular:function(e){return this.list.forEach((t)=>t.toSingular(e)),this},toPossessive:function(e){return this.list.forEach((t)=>t.toPossessive(e)),this},articles:function(){return this.list.map((e)=>{return{text:e.out("text"),normal:e.out("normal"),article:e.article()}})}},function(e,t){return e=e.clauses(),e=e.match("#Noun+ (of|by)? the? #Noun+?"),e=e.not("#Pronoun"),e=e.not("(there|these)"),e=e.not("(#Month|#WeekDay)"),e=e.not("(my|our|your|their|her|his)"),e=e.not("(of|for|by|the)$"),"number"==typeof t&&(e=e.get(t)),e.list=e.list.map((e)=>{return new r(e.terms,e.world,e.refText,e.refTerms)}),e})},{"../../text":192,"./noun":46}],39:[function(e,t){"use strict";const n=e("./methods/data/indicators"),r=/([a-z]*) (of|in|by|for) [a-z]/,a=e("./hasPlural"),s={i:!1,he:!1,she:!1,we:!0,they:!0},o=["Place","Value","Person","Month","WeekDay","RelativeDay","Holiday","Possessive"],i=function(e){if(!1===a(e))return!1;for(let t=0;t<o.length;t++)if(e.tags[o[t]])return!1;return!0};t.exports=function(e,t){if(e.tags.Plural)return!0;if(e.tags.Singular)return!1;let a=e.normal;if(!0===s.hasOwnProperty(a))return s[a];if(t.plurals&&!0===t.plurals.hasOwnProperty(a))return!1;if(t.cache.toSingular&&!0===t.cache.toSingular.hasOwnProperty(a))return!0;if(!1===i(e))return null;const o=a.match(r);null!==o&&(a=o[1]);for(let r=0;r<n.plural_indicators.length;r++)if(!0===n.plural_indicators[r].test(a))return!0;for(let r=0;r<n.singular_indicators.length;r++)if(!0===n.singular_indicators[r].test(a))return!1;return!0===/s$/.test(a)&&!1===/ss$/.test(a)&&3<a.length}},{"./hasPlural":37,"./methods/data/indicators":41}],40:[function(e,t){"use strict";const n={hour:"an",heir:"an",heirloom:"an",honest:"an",honour:"an",honor:"an",uber:"an"},r={a:!0,e:!0,f:!0,h:!0,i:!0,l:!0,m:!0,n:!0,o:!0,r:!0,s:!0,x:!0},a=[/^onc?e/i,/^u[bcfhjkqrstn][aeiou]/i,/^eul/i];t.exports=function(e){let t=e.normal;if(e.tags.Person)return"";if(e.tags.Plural)return"the";if(n.hasOwnProperty(t))return n[t];let s=t.substr(0,1);if(e.isAcronym()&&r.hasOwnProperty(s))return"an";for(let n=0;n<a.length;n++)if(a[n].test(t))return"a";return /^[aeiou]/i.test(t)?"an":"a"}},{}],41:[function(e,t){"use strict";const n=[/(^v)ies$/i,/ises$/i,/ives$/i,/(antenn|formul|nebul|vertebr|vit)ae$/i,/(octop|vir|radi|nucle|fung|cact|stimul)i$/i,/(buffal|tomat|tornad)oes$/i,/(analy|ba|diagno|parenthe|progno|synop|the)ses$/i,/(vert|ind|cort)ices$/i,/(matr|append)ices$/i,/(x|ch|ss|sh|s|z|o)es$/i,/men$/i,/news$/i,/.tia$/i,/(^f)ves$/i,/(lr)ves$/i,/(^aeiouy|qu)ies$/i,/(m|l)ice$/i,/(cris|ax|test)es$/i,/(alias|status)es$/i,/ics$/i],r=[/(ax|test)is$/i,/(octop|vir|radi|nucle|fung|cact|stimul)us$/i,/(octop|vir)i$/i,/(rl)f$/i,/(alias|status)$/i,/(bu)s$/i,/(al|ad|at|er|et|ed|ad)o$/i,/(ti)um$/i,/(ti)a$/i,/sis$/i,/(?:(^f)fe|(lr)f)$/i,/hive$/i,/(^aeiouy|qu)y$/i,/(x|ch|ss|sh|z)$/i,/(matr|vert|ind|cort)(ix|ex)$/i,/(m|l)ouse$/i,/(m|l)ice$/i,/(antenn|formul|nebul|vertebr|vit)a$/i,/.sis$/i,/^(?!talis|.*hu)(.*)man$/i];t.exports={singular_indicators:r,plural_indicators:n}},{}],42:[function(e,t){t.exports=[[/(ax|test)is$/i,"$1es"],[/(octop|vir|radi|nucle|fung|cact|stimul)us$/i,"$1i"],[/(octop|vir)i$/i,"$1i"],[/(kn|l|w)ife$/i,"$1ives"],[/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i,"$1ves"],[/^(dwar|handkerchie|hoo|scar|whar)f$/i,"$1ves"],[/(alias|status)$/i,"$1es"],[/(bu)s$/i,"$1ses"],[/(al|ad|at|er|et|ed|ad)o$/i,"$1oes"],[/([ti])um$/i,"$1a"],[/([ti])a$/i,"$1a"],[/sis$/i,"ses"],[/(hive)$/i,"$1s"],[/([^aeiouy]|qu)y$/i,"$1ies"],[/(x|ch|ss|sh|s|z)$/i,"$1es"],[/(matr|vert|ind|cort)(ix|ex)$/i,"$1ices"],[/([m|l])ouse$/i,"$1ice"],[/([m|l])ice$/i,"$1ice"],[/^(ox)$/i,"$1en"],[/^(oxen)$/i,"$1"],[/(quiz)$/i,"$1zes"],[/(antenn|formul|nebul|vertebr|vit)a$/i,"$1ae"],[/(sis)$/i,"ses"],[/^(?!talis|.*hu)(.*)man$/i,"$1men"],[/(.*)/i,"$1s"]].map(function(e){return{reg:e[0],repl:e[1]}})},{}],43:[function(e,t){t.exports=[[/([^v])ies$/i,"$1y"],[/ises$/i,"isis"],[/(kn|[^o]l|w)ives$/i,"$1ife"],[/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i,"$1f"],[/^(dwar|handkerchie|hoo|scar|whar)ves$/i,"$1f"],[/(antenn|formul|nebul|vertebr|vit)ae$/i,"$1a"],[/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i,"$1us"],[/(buffal|tomat|tornad)(oes)$/i,"$1o"],[/(..[aeiou]s)es$/i,"$1"],[/(vert|ind|cort)(ices)$/i,"$1ex"],[/(matr|append)(ices)$/i,"$1ix"],[/(x|ch|ss|sh|z|o)es$/i,"$1"],[/men$/i,"man"],[/(n)ews$/i,"$1ews"],[/([ti])a$/i,"$1um"],[/([^aeiouy]|qu)ies$/i,"$1y"],[/(s)eries$/i,"$1eries"],[/(m)ovies$/i,"$1ovie"],[/([m|l])ice$/i,"$1ouse"],[/(cris|ax|test)es$/i,"$1is"],[/(alias|status)es$/i,"$1"],[/(ss)$/i,"$1"],[/(ics)$/i,"$1"],[/s$/i,""]].map(function(e){return{reg:e[0],repl:e[1]}})},{}],44:[function(e,t){"use strict";const n=e("./data/pluralRules");t.exports=function(e,t){const r=t.plurals||{};if(!0===r.hasOwnProperty(e))return r[e];for(let r=0;r<n.length;r++)if(!0===n[r].reg.test(e))return e.replace(n[r].reg,n[r].repl);return null}},{"./data/pluralRules":42}],45:[function(e,t){"use strict";const n=e("./data/singleRules"),r=function(e,t){let a=t.cache.toSingular||{};if(!0===a.hasOwnProperty(e))return a[e];if(t&&t.plurals){let n=Object.keys(t.plurals);for(let r=0;r<n.length;r++)if(t.plurals[n[r]]===e)return n[r]}if(!0===/([a-z]*) (of|in|by|for) [a-z]/.test(e)){const t=(e.match(/^([a-z]*) (of|in|by|for) [a-z]/)||[])[1];if(t){const n=r(t);return n+e.replace(t,"")}}for(let r=0;r<n.length;r++)if(!0===n[r].reg.test(e))return e.replace(n[r].reg,n[r].repl);return null};t.exports=r},{"./data/singleRules":43}],46:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./hasPlural"),a=e("./isPlural"),s=e("./toPossessive"),o=e("./makeArticle"),i=e("./methods/pluralize"),l=e("./methods/singularize"),d={article:function(){return o(this.main)},isPlural:function(){return a(this.main,this.world)},hasPlural:function(){return r(this.main)},toPlural:function(e){let n=this.main;return r(n)&&!a(n,this.world)&&(n.text=i(n.normal,this.world,e)||n.text,n.unTag("Singular","toPlural"),n.tag("Plural","toPlural")),this},toSingular:function(e){let n=this.main;return a(n,this.world)&&(n.text=l(n.normal,this.world,e)||n.text,n.unTag("Plural","toSingular"),n.tag("Singular","toSingular")),this},toPossessive:function(){let e=this.main;return e.tags.Possessive?this:(e=s(e),this)},data:function(){let e=this.main,t=e.text;a(e,this.world)&&(t=l(e.normal,this.world)||e.text);let n=e.text;r(e)&&!a(e,this.world)&&(n=i(e.normal,this.world)||e.text);let s="";return this.qualifier&&(s=this.qualifier.out("normal"),t+=" "+s,n+=" "+s),{text:this.out("text"),normal:this.out("normal"),article:this.article(),main:e.normal,qualifier:s,singular:t,plural:n}}},u=function(e,t,r){n.call(this,e,t,r),this.main=this.match("[#Noun+] (of|by|for)"),this.main=this.main.found?this.main.list[0].terms[0]:this.terms[this.terms.length-1],this.qualifier=this.match(this.main.normal+" [.+]").list[0]};u.prototype=Object.create(n.prototype),Object.keys(d).forEach((e)=>{u.prototype[e]=d[e]}),t.exports=u},{"../../paths":8,"./hasPlural":37,"./isPlural":39,"./makeArticle":40,"./methods/pluralize":44,"./methods/singularize":45,"./toPossessive":47}],47:[function(e,t){const n={he:"his",she:"hers",they:"theirs",we:"ours",i:"mine",you:"yours",her:"hers",their:"theirs",our:"ours",my:"mine",your:"yours"};t.exports=function(e){return(e.tag("Possessive","toPossessive"),n.hasOwnProperty(e.normal))?(e.text=n[e.normal],e):/s$/.test(e.normal)?(e.text+="'",e):(e.text+="'s",e)}},{}],48:[function(e,t){"use strict";t.exports=function(e){return e?!0===/.(i|ee|[a|e]y|a)$/.test(e)?"Female":!0===/[ou]$/.test(e)?"Male":!0===/(nn|ll|tt)/.test(e)?"Female":null:null}},{}],49:[function(e,t){"use strict";const n=e("../../text"),r=e("./person");t.exports=n.makeSubset({pronoun:function(){return this.list.map((e)=>e.pronoun())},firstNames:function(){return this.match("#FirstName")},lastNames:function(){return this.match("#LastName")}},function(e,t){let a=e.clauses();return a=a.match("#Person+"),"number"==typeof t&&(a=a.get(t)),a.list=a.list.map((e)=>{return new r(e.terms,e.world,e.refText,e.refTerms)}),a})},{"../../text":192,"./person":50}],50:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./guessGender"),a=function(e,t,r,a){if(n.call(this,e,t,r,a),this.firstName=this.match("#FirstName+"),this.middleName=this.match("#Acronym+"),this.nickName=this.match("#NickName+"),this.honorifics=this.match("#Honorific"),this.lastName=this.match("#LastName+"),!this.firstName.found&&1<this.length){let e=this.not("(#Acronym|#Honorific)");this.firstName=e.first(),this.lastName=e.last()}return this};a.prototype=Object.create(n.prototype);const s={data:function(){return{text:this.out("text"),normal:this.out("normal"),firstName:this.firstName.out("normal"),middleName:this.middleName.out("normal"),nickName:this.nickName.out("normal"),lastName:this.lastName.out("normal"),genderGuess:this.guessGender(),pronoun:this.pronoun(),honorifics:this.honorifics.out("array")}},guessGender:function(){if(this.honorifics.match("(mr|mister|sr|sir|jr)").found)return"Male";if(this.honorifics.match("(mrs|miss|ms|misses|mme|mlle)").found)return"Female";if(this.firstName.match("#MaleName").found)return"Male";if(this.firstName.match("#FemaleName").found)return"Female";let e=this.firstName.out("normal");return r(e)},pronoun:function(){let e=this.firstName.out("normal"),t=this.guessGender(e);return"Male"===t?"he":"Female"===t?"she":"they"},root:function(){let e=this.firstName.out("root"),t=this.lastName.out("root");return e&&t?e+" "+t:t||e||this.out("root")}};Object.keys(s).forEach((e)=>{a.prototype[e]=s[e]}),t.exports=a},{"../../paths":8,"./guessGender":48}],51:[function(e,t){"use strict";const n=e("../../text"),r={strip(){return this.list.forEach((e)=>{let n=e.terms[e.terms.length-1];n.text=n.text.replace(/'s$/,""),n.unTag("Possessive",".strip()")}),this}};t.exports=n.makeSubset(r,function(e,t){return e=e.match("#Possessive+"),e=e.splitAfter("#Comma"),"number"==typeof t&&(e=e.get(t)),e})},{"../../text":192}],52:[function(e,t){"use strict";const n=e("../../text"),r=e("./sentence");t.exports=n.makeSubset({toPastTense:function(){return this.list=this.list.map((e)=>{return e=e.toPastTense(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},toPresentTense:function(){return this.list=this.list.map((e)=>{return e=e.toPresentTense(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},toFutureTense:function(){return this.list=this.list.map((e)=>{return e=e.toFutureTense(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},toContinuous:function(){return this.list=this.list.map((e)=>{return e=e.toContinuous(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},toNegative:function(){return this.list=this.list.map((e)=>{return e=e.toNegative(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},toPositive:function(){return this.list=this.list.map((e)=>{return e=e.toPositive(),new r(e.terms,e.world,e.refText,e.refTerms)}),this},isPassive:function(){return this.list=this.list.filter((e)=>{return e.isPassive()}),this},isQuestion:function(){return this.questions()},prepend:function(e){return this.list=this.list.map((t)=>{return t.prepend(e)}),this},append:function(e){return this.list=this.list.map((t)=>{return t.append(e)}),this},toExclamation:function(){return this.list.forEach((e)=>{e.setPunctuation("!")}),this},toQuestion:function(){return this.list.forEach((e)=>{e.setPunctuation("?")}),this},toStatement:function(){return this.list.forEach((e)=>{e.setPunctuation(".")}),this}},function(e,t){return e=e.all(),"number"==typeof t&&(e=e.get(t)),e.list=e.list.map((e)=>{return new r(e.terms,e.world,e.refText,e.refTerms)}),e})},{"../../text":192,"./sentence":54}],53:[function(e,t){"use strict";t.exports=function(e){let t=e.getPunctuation(),n=e.match("*").splitAfter("#Comma");return!(!0!==/\?/.test(t))||!/\.\.$/.test(e.out("text"))&&(e.has("^#QuestionWord")&&e.has("#Comma")?!1:!!e.has("^#QuestionWord")||!!e.has("^(do|does|did|is|was|can|could|will|would|may) #Noun")||!!e.has("^(have|must) you")||!!n.has("^#QuestionWord")||!!n.has("(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$"))}},{}],54:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./toNegative"),a=e("./toPositive"),o=e("../verbs/verb"),s=e("./smartInsert"),i=function(e){let t=e.match("#Condition"),n=e.not("#Condition"),r=n.match("#VerbPhrase+").first(),a=r.out("normal"),s=n.match("#Determiner? #Adjective+? #Noun "+a).first().not("#VerbPhrase"),i=n.match(a+" #Preposition? #Determiner? #Noun").first().not("#VerbPhrase");return e.conditions=t,e.subject=s,e.verb=r,e.object=i,e.verb.found&&(e.verb=new o(e.verb.list[0].terms,e.world,e.refText,e.refTerms)),e},l=function(e){e.found&&e.contractions().expand()},d=function(e){e.terms=e.terms.filter((e)=>{if(e.silent_term){if("am"===e.silent_term||"will"===e.silent_term||"did"===e.silent_term)return!1;e.text=e.silent_term,e.silent_term=null,e.unTag("Contraction"),!0===e.tags.TitleCase&&e.toTitleCase()}return!0})},u=function(e){return e.subject.found&&e.subject.has("(i|we)")},m={toSingular:function(){let e=this.match("#Noun").match("!#Pronoun").firstTerm();return e.things().toSingular(),this},toPlural:function(){let e=this.match("#Noun").match("!#Pronoun").firstTerm();return e.things().toPlural(),this},mainVerb:function(){return i(this),this.verb.found?this.verb:null},toPastTense:function(){let e=this.mainVerb();if(e){let t=e.out("root");e.toPastTense();let n=this.match("#Contraction "+t);l(n);let a=e.out("root"),s=this.parentTerms.replace(t,a);return s}return this},toPresentTense:function(){let e=this.mainVerb();if(e){let t=e.out("normal");if(!0===u(this))this.has("(am|will|did) "+t)&&d(this),e.toInfinitive();else{e.toPresentTense();let n=this.match("#Contraction "+t);l(n)}let n=e.out("normal");return this.parentTerms.replace(t,n)}return this},toFutureTense:function(){let e=this.mainVerb();if(e){let t=e.clone();e.toFutureTense();let n=this.match("#Contraction "+t.out("normal"));l(n);let r=e.out("normal");return this.parentTerms.replace(t,r)}return this},toContinuous:function(){let e=this.mainVerb();if(e){let t=e.clone();e.toGerund();let n=this.match("#Contraction "+t.out("normal"));l(n);let r=e.out("normal");return this.parentTerms.replace(t,r)}return this},isNegative:function(){return 1===this.match("#Negative").list.length},toNegative:function(){return this.isNegative()?this:r(this)},toPositive:function(){return this.isNegative()?a(this):this},append:function(e){return s.append(this,e)},prepend:function(e){return s.prepend(this,e)},isPassive:function(){return this.match("was #Adverb? #PastTense #Adverb? by").found}},c=function(e,t,r,a){n.call(this,e,t,r,a),i(this)};c.prototype=Object.create(n.prototype),Object.keys(m).forEach((e)=>{c.prototype[e]=m[e]}),t.exports=c},{"../../paths":8,"../verbs/verb":94,"./smartInsert":55,"./toNegative":56,"./toPositive":57}],55:[function(e,t){"use strict";const n=/^[A-Z]/;t.exports={append:(e,t)=>{let n=e.terms[e.terms.length-1],r=e.getPunctuation();r&&n.killPunctuation(),e.insertAt(e.terms.length,t);let a=e.terms[e.terms.length-1];return r&&(a.text+=r),n.whitespace.after&&(a.whitespace.after=n.whitespace.after,n.whitespace.after=""),e},prepend:(e,t)=>{let r=e.terms[0];if(e.insertAt(0,t),n.test(r.text)){!1===r.needsTitleCase()&&r.toLowerCase();let t=e.terms[0];t.toTitleCase()}return e}}},{}],56:[function(e,t){"use strict";const n={everyone:"no one",everybody:"nobody",someone:"no one",somebody:"nobody",always:"never"};t.exports=(e)=>{let t=e.match("(everyone|everybody|someone|somebody|always)").first();if(t.found&&n[t.out("normal")]){let r=t.out("normal");return e=e.match(r).replaceWith(n[r]).list[0],e.parentTerms}let r=e.mainVerb();return r&&r.toNegative(),e}},{}],57:[function(e,t){"use strict";const n={never:"always",nothing:"everything"};t.exports=(e)=>{let t=e.match("(never|nothing)").first();if(t.found){let r=t.out("normal");if(n[r])return e=e.match(r).replaceWith(n[r],!0).list[0],e.parentTerms}return e.delete("#Negative"),e}},{}],58:[function(e,t){"use strict";const a=e("../../text"),n=e("../../paths").Terms;t.exports=a.makeSubset({data:function(){return this.list.map((e)=>{let n=e.terms[0];return{spaceBefore:n.whitespace.before,text:n.text,spaceAfter:n.whitespace.after,normal:n.normal,implicit:n.silent_term,bestTag:n.bestTag(),tags:Object.keys(n.tags)}})}},function(e,t){let r=[];return e.list.forEach((a)=>{a.terms.forEach((s)=>{r.push(new n([s],a.world,e))})}),e=new a(r,e.world,e.parent),"number"==typeof t&&(e=e.get(t)),e})},{"../../paths":8,"../../text":192}],59:[function(e,t){const n=e("./numOrdinal"),r=e("./textOrdinal"),a=e("./textCardinal"),s=e("./niceNumber");t.exports={nice:function(e){return s(e)},ordinal:function(e){return n(e)},cardinal:function(e){return e+""},niceOrdinal:function(e){return e=n(e),e=s(e),e},text:function(e){return a(e).join(" ")},textOrdinal:function(e){return r(e)}}},{"./niceNumber":60,"./numOrdinal":61,"./textCardinal":62,"./textOrdinal":63}],60:[function(e,t){"use strict";t.exports=function(e){if(!e&&0!==e)return null;e=e+"";let t=e.split("."),n=t[0],r=1<t.length?"."+t[1]:"",a=/(\d+)(\d{3})/;for(;a.test(n);)n=n.replace(a,"$1,$2");return n+r}},{}],61:[function(e,t){"use strict";const n=e("./toString");t.exports=function(e){if(!e&&0!==e)return null;let t=e%100;if(10<t&&20>t)return e+"th";const r={0:"th",1:"st",2:"nd",3:"rd"};let a=n(e),s=a.slice(a.length-1,a.length);return a+=r[s]?r[s]:"th",a}},{"./toString":64}],62:[function(t,n){"use strict";const r=t("./toString"),a=[["ninety",90],["eighty",80],["seventy",70],["sixty",60],["fifty",50],["forty",40],["thirty",30],["twenty",20]],s=["","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"],o=[[1e+24,"septillion"],[1e+21,"sextillion"],[1000000000000000000,"quintillion"],[1000000000000000,"quadrillion"],[1000000000000,"trillion"],[1000000000,"billion"],[100000000,"hundred million"],[1000000,"million"],[100000,"hundred thousand"],[1000,"thousand"],[100,"hundred"],[1,"one"]],i=function(t){let n=t,r=[];return o.forEach((s)=>{if(t>=s[0]){let t=e(n/s[0]);n-=t*s[0],t&&r.push({unit:s[1],count:t})}}),r},l=function(e){let t=[];if(100<e)return t;for(let n=0;n<a.length;n++)e>=a[n][1]&&(e-=a[n][1],t.push(a[n][0]));return s[e]&&t.push(s[e]),t},d=(e)=>{const t=["zero","one","two","three","four","five","six","seven","eight","nine"];let n=[],a=r(e),s=a.match(/\.([0-9]+)/);if(!s||!s[0])return n;n.push("point");let o=s[0].split("");for(let r=0;r<o.length;r++)n.push(t[o[r]]);return n};n.exports=function(e){if(1e21<e)return[e+""];let t=[];0>e&&(t.push("negative"),e=Math.abs(e));let n=i(e);for(let r=0,a;r<n.length;r++)a=n[r].unit,"one"===a&&(a="",1<t.length&&t.push("and")),t=t.concat(l(n[r].count)),t.push(a);return t=t.concat(d(e)),t=t.filter((e)=>e),0===t.length&&(t[0]=""),t}},{"./toString":64}],63:[function(e,t){"use strict";const n=e("./textCardinal"),r=e("../../../world/more-data/numbers").toOrdinal;t.exports=(e)=>{let t=n(e),a=t[t.length-1];return t[t.length-1]=r[a]||a,t.join(" ")}},{"../../../world/more-data/numbers":220,"./textCardinal":62}],64:[function(e,t){t.exports=function(e){if(1e6>e)return e+"";var t=e.toFixed(0);return-1===t.indexOf("e+")?t:t.replace(".","").split("e+").reduce(function(e,t){return e+Array(t-e.length+2).join(0)})}},{}],65:[function(e,t){"use strict";const n=e("../../text"),r=e("./value"),a=e("./parse");t.exports=n.makeSubset({noDates:function(){return this.not("#Date")},noUnits:function(){return this.not("#Unit")},units:function(){return this.match("#Unit+")},numbers:function(){return this.list.map((e)=>{return e.number()})},toNumber:function(){return this.list=this.list.map((e)=>{return e.toNumber()}),this},toText:function(){return this.list=this.list.map((e)=>{return e.toText()}),this},toCardinal:function(){return this.list=this.list.map((e)=>{return e.toCardinal()}),this},toOrdinal:function(){return this.list=this.list.map((e)=>{return e.toOrdinal()}),this},toNice:function(){return this.list=this.list.map((e)=>{return e.toNice()}),this},isEqual:function(e){return e=a(e),this.list=this.list.filter((t)=>{return null!==e&&t.number()===e}),this},greaterThan:function(e){return e=a(e),this.list=this.list.filter((t)=>{return null!==e&&t.number()>e}),this},lessThan:function(e){return e=a(e),this.list=this.list.filter((t)=>{return null!==e&&t.number()<e}),this},between:function(e,t){return void 0===e||void 0===t?this:(e=a(e),t=a(t),this.list=this.list.filter((r)=>{let a=r.number();return a>e&&a<t}),this)},add:function(e){return this.list=this.list.map((t)=>{return t.add(e)}),this},subtract:function(e){return this.list=this.list.map((t)=>{return t.subtract(e)}),this},increment:function(){return this.list=this.list.map((e)=>{return e.add(1)}),this},decrement:function(){return this.list=this.list.map((e)=>{return e.subtract(1)}),this}},function(e,t){const a="twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty";if(e=e.match("#Value+ #Unit?"),e.has("#NumericValue #NumericValue")&&(e.has("#Value #Comma #Value")?e.splitAfter("#Comma"):e.splitAfter("#NumericValue")),e.has("#Value #Value #Value")&&!e.has("#Multiple")&&e.has("("+a+") #Cardinal #Cardinal")&&e.splitAfter("("+a+") #Cardinal"),e.has("#Value #Value")){e.has("#NumericValue #NumericValue")&&e.splitOn("#Year"),e.has("("+a+") ("+"eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen"+")")&&e.splitAfter("("+a+")");let t=e.match("#Cardinal #Cardinal");!t.found||e.has("(point|decimal)")||t.has("#Cardinal (#Multiple|point|decimal)")||t.has("("+a+") #Cardinal")||t.has("#Multiple #Value")||e.splitAfter(t.terms(0).out("normal")),!e.match("#Ordinal #Ordinal").match("#TextValue").found||e.has("#Multiple")||e.has("("+a+") #Ordinal")||e.splitAfter("#Ordinal"),e.has("#Ordinal #Cardinal")&&e.splitBefore("#Cardinal+"),e.has("#TextValue #NumericValue")&&!e.has("("+a+"|#Multiple)")&&e.splitBefore("#NumericValue+")}e.has("#NumberRange")&&e.splitAfter("#NumberRange"),"number"==typeof t&&(e=e.get(t));let s=e.world();return e.list=e.list.map((e)=>{return new r(e.terms,s,e.refText,e.refTerms)}),e})},{"../../text":192,"./parse":66,"./value":74}],66:[function(e,t){"use strict";const n=e("./parseText"),r=/^-?(\$|€|¥|£)?\.?[0-9]+[0-9,\.]*(st|nd|rd|th|rth|%)?$/,a=function(e){if(!0===r.test(e)){e=e.replace(/,/g,""),e=e.replace(/^[\$|€|¥|£]/g,""),e=e.replace(/%$/,""),e=e.replace(/(st|nd|rd|th|rth)$/g,"");let t=parseFloat(e);if(t||0===t)return t}return n(e)};t.exports=function(e){if(null===e||e===void 0||"number"==typeof e)return e;if("string"==typeof e)return a(e);if(1===e.terms.length&&!0!==e.terms[0].tags.TextValue){let t=e.terms[0].normal;return a(t)}return n(e.out("normal"))}},{"./parseText":69}],67:[function(e,t){const n=e("../../../world/more-data/numbers"),r=e("../paths").fns,a=r.extend(n.ordinal.ones,n.cardinal.ones),s=r.extend(n.ordinal.teens,n.cardinal.teens),o=r.extend(n.ordinal.tens,n.cardinal.tens),i=r.extend(n.ordinal.multiples,n.cardinal.multiples);i.grand=1e3,t.exports={ones:a,teens:s,tens:o,multiples:i}},{"../../../world/more-data/numbers":220,"../paths":73}],68:[function(e,t){"use strict";t.exports=(e)=>{const t=[{reg:/^(minus|negative)[\s\-]/i,mult:-1},{reg:/^(a\s)?half[\s\-](of\s)?/i,mult:0.5}];for(let n=0;n<t.length;n++)if(!0===t[n].reg.test(e))return{amount:t[n].mult,str:e.replace(t[n].reg,"")};return{amount:1,str:e}}},{}],69:[function(e,t){"use strict";const n=e("./findModifiers"),r=e("./data"),a=e("./validate"),s=e("./parseDecimals"),o=e("./parseNumeric"),l=/^([0-9,\. ]+)\/([0-9,\. ]+)$/,i={"a couple":2,"a dozen":12,"two dozen":24,zero:0},d=(e)=>{return Object.keys(e).reduce((t,n)=>{return t+=e[n],t},0)};t.exports=function(e){if(!0===i.hasOwnProperty(e))return i[e];if("a"===e||"an"===e)return 1;const t=n(e);e=t.str;let u=null,m={},c=0,h=!1;const p=e.split(/[ -]/);for(let n=0,i;n<p.length;n++){if(i=p[n],i=o(i),!i||"and"===i)continue;if("-"===i||"negative"===i){h=!0;continue}if("-"===i.charAt(0)&&(h=!0,i=i.substr(1)),"point"===i)return c+=d(m),c+=s(p.slice(n+1,p.length)),c*=t.amount,c;const e=i.match(l);if(e){const t=parseFloat(e[1].replace(/[, ]/g,"")),n=parseFloat(e[2].replace(/[, ]/g,""));n&&(c+=t/n||0);continue}if(!1===a(i,m))return null;if(/^[0-9\.]+$/.test(i))m.ones=parseFloat(i);else if(!0===r.ones.hasOwnProperty(i))m.ones=r.ones[i];else if(!0===r.teens.hasOwnProperty(i))m.teens=r.teens[i];else if(!0===r.tens.hasOwnProperty(i))m.tens=r.tens[i];else if(!0===r.multiples.hasOwnProperty(i)){let e=r.multiples[i];if(e===u)return null;if(100===e&&void 0!==p[n+1]){const t=p[n+1];r.multiples[t]&&(e*=r.multiples[t],n+=1)}null==u||e<u?(c+=(d(m)||1)*e,u=e,m={}):(c+=d(m),u=e,c=(c||1)*e,m={})}}return c+=d(m),c*=t.amount,c*=h?-1:1,0===c&&0===Object.keys(m).length?null:c}},{"./data":67,"./findModifiers":68,"./parseDecimals":70,"./parseNumeric":71,"./validate":72}],70:[function(e,t){"use strict";const n=e("./data");t.exports=function(e){let t="0.";for(let r=0,a;r<e.length;r++)if(a=e[r],!0===n.ones.hasOwnProperty(a))t+=n.ones[a];else if(!0===n.teens.hasOwnProperty(a))t+=n.teens[a];else if(!0===n.tens.hasOwnProperty(a))t+=n.tens[a];else if(!0===/^[0-9]$/.test(a))t+=a;else return 0;return parseFloat(t)}},{"./data":67}],71:[function(e,t){"use strict";t.exports=(e)=>{return e=e.replace(/1st$/,"1"),e=e.replace(/2nd$/,"2"),e=e.replace(/3rd$/,"3"),e=e.replace(/([4567890])r?th$/,"$1"),e=e.replace(/^[$€¥£¢]/,""),e=e.replace(/[%$€¥£¢]$/,""),e=e.replace(/,/g,""),e=e.replace(/([0-9])([a-z]{1,2})$/,"$1"),e}},{}],72:[function(e,t){"use strict";const n=e("./data");t.exports=(e,t)=>{if(n.ones.hasOwnProperty(e)){if(t.ones||t.teens)return!1;}else if(n.teens.hasOwnProperty(e)){if(t.ones||t.teens||t.tens)return!1;}else if(n.tens.hasOwnProperty(e)&&(t.ones||t.teens||t.tens))return!1;return!0}},{"./data":67}],73:[function(e,t){t.exports=e("../../paths")},{"../../paths":8}],74:[function(e,t){"use strict";const n=e("../../paths"),r=n.Terms,a=e("./parse"),s=e("./format"),o=function(e){return e.val=e.match("#Value+"),e.val=e.val.list[0],e.unit=e.match("#Unit+"),e.unit.found&&(e.unit=e.unit.list[0]),e},i=function(e,t){return e.has("#Percent")||t.has("#Percent")||!("percent"!==t.out("normal"))||null!==e.out("normal").match(/%$/)},l=function(e,t){let n=e.val.out();return n=e.has("#Ordinal")?e.has("#TextValue")?s.textOrdinal(t):s.ordinal(t):e.has("#TextValue")?s.text(t):e.has("#NiceNumber")?s.nice(t):s.cardinal(t),e.unit.found&&(n+=e.unit.out("text")),e=e.replaceWith(n,!0),o(e)},d=function(e,t,n,a){r.call(this,e,t,n,a),o(this)};d.prototype=Object.create(r.prototype);const u={data:function(){let e=a(this.val);return{number:e,nice:s.nice(e),ordinal:s.ordinal(e),niceOrdinal:s.niceOrdinal(e),text:s.text(e),textOrdinal:s.textOrdinal(e),unit:this.unit.out("normal")}},number:function(){return a(this.val)},toNumber:function(){let e=a(this.val);if(e||0===e){let t="";this.val.has("#Ordinal")?t=s.ordinal(e):(t=e+"",i(this.val,this.unit)&&(t+="%",this.unit.delete())),this.unit.found&&(t+=this.unit.out("text")),this.replaceWith(t,!0).tag("NumericValue"),this.unit.found&&this.match(this.unit.out("normal")).tag("Unit")}return this},toText:function(){let e=a(this.val);if(e||0===e){let t="";this.val.has("#Ordinal")?t=s.textOrdinal(e):(t=s.text(e),i(this.val,this.unit)&&(t+=" percent")),this.unit.found&&(t+=this.unit.out("text")),this.replaceWith(t,!0).tag("TextValue"),this.unit.found&&this.match(this.unit.out("normal")).tag("Unit")}return this},toCardinal:function(){let e=a(this.val);if(e||0===e){let t="";t=this.val.has("#TextValue")?s.text(e):e,this.unit.found&&(t+=this.unit.out("text")),this.replaceWith(t,!0).tag("Cardinal"),this.unit.found&&this.match(this.unit.out("normal")).tag("Unit")}return this},toOrdinal:function(){let e=a(this.val);if(e||0===e){let t="";t=this.val.has("#TextValue")?s.textOrdinal(e):s.ordinal(e),this.unit.found&&(t+=this.unit.out("text")),this.replaceWith(t,!0).tag("Ordinal"),this.unit.found&&this.match(this.unit.out("normal")).tag("Unit")}return this},toNice:function(){let e=a(this.val);if(e||0===e){let t="";t=this.val.has("#Ordinal")?s.niceOrdinal(e):s.nice(e),this.unit.found&&(t+=this.unit.out("text")),this.replaceWith(t,!0).tag("NumericValue"),this.unit.found&&this.match(this.unit.out("normal")).tag("Unit")}return this},add:function(e){if(!e)return this;let t=a(this.val)||0;return t+=e,l(this,t)},subtract:function(e){if(!e)return this;let t=a(this.val)||0;return t-=e,l(this,t)},increment:function(){return this.add(1)},decrement:function(){return this.subtract(1)}};Object.keys(u).forEach((e)=>{d.prototype[e]=u[e]}),t.exports=d},{"../../paths":8,"./format":59,"./parse":66}],75:[function(e,t){"use strict";const a=e("../../text"),n=e("./verb"),r={conjugation:function(e){return this.list.map((t)=>{return t.conjugation(e)})},conjugate:function(e,t){return null!==e&&"number"==typeof e&&this.list[e]?this.list[e].conjugate(t):this.list.map((e)=>{return e.conjugate(t)})},isPlural:function(){return this.list=this.list.filter((e)=>{return e.isPlural()}),this},isSingular:function(){return this.list=this.list.filter((e)=>{return!e.isPlural()}),this},isNegative:function(){return this.list=this.list.filter((e)=>{return e.isNegative()}),this},isPositive:function(){return this.list=this.list.filter((e)=>{return!e.isNegative()}),this},toNegative:function(){return this.list=this.list.map((e)=>{return e.toNegative()}),this},toPositive:function(){return this.list.forEach((e)=>{e.toPositive()}),this},toPastTense:function(){return this.list.forEach((e)=>{e.toPastTense()}),this},toPresentTense:function(){return this.list.forEach((e)=>{e.toPresentTense()}),this},toFutureTense:function(){return this.list.forEach((e)=>{e.toFutureTense()}),this},toInfinitive:function(){return this.list.forEach((e)=>{e.toInfinitive()}),this},toGerund:function(){return this.list.forEach((e)=>{e.toGerund()}),this},asAdjective:function(){return this.list.map((e)=>e.asAdjective())}};r.toContinuous=r.toGerund;t.exports=a.makeSubset(r,function(e,t){return e=e.match("(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+"),e=e.splitAfter("#Comma"),e=e.if("#Verb"),"number"==typeof t&&(e=e.get(t)),e.list=e.list.map((e)=>{return new n(e.terms,e.world,e.refText,e.refTerms)}),new a(e.list,this.world,this.parent)})},{"../../text":192,"./verb":94}],76:[function(e,t){"use strict";const n=e("./methods/predict"),r=e("./methods/isPlural"),a=function(e){return e.match("#Gerund").found},s=function(e){let t=e.match("#Negative").list;return 2!==t.length&&!(1!==t.length)},o=function(e){return!!e.match("is being #PastTense").found||!!e.match("(had|has) been #PastTense").found||!!e.match("will have been #PastTense").found},i=function(e){return!!e.match("^(had|have) #PastTense")},l=function(e){let t=e.match("#Modal");return t.found?t.out("normal"):null},d=function(e){if(e.auxiliary.found){if(e.match("will have #PastTense").found)return"Past";if(e.auxiliary.match("will").found)return"Future";if(e.auxiliary.match("was").found)return"Past"}if(e.verb){let t=n(e.verb);return{PastTense:"Past",FutureTense:"Future",FuturePerfect:"Future"}[t]||"Present"}return"Present"};t.exports=(e)=>{let t=s(e),n={negative:t,continuous:a(e),passive:o(e),perfect:i(e),plural:r(e),modal:l(e),tense:d(e)};return n}},{"./methods/isPlural":86,"./methods/predict":87}],77:[function(e,t){"use strict";const n=e("./irregulars"),r=e("./suffixes"),a=e("./toActor"),s=e("./generic"),o=e("../predict"),i=e("../toInfinitive"),l=e("./toBe");t.exports=function(e,t){if("is"===e.normal||"was"===e.normal||"will"===e.normal)return l();e.tags.Contraction&&(e.text=e.silent_term);let d={PastTense:null,PresentTense:null,Infinitive:null,Gerund:null,Actor:null},u=o(e);u&&(d[u]=e.normal),"Infinitive"!==u&&(d.Infinitive=i(e,t)||"");const m=n(d.Infinitive,t)||{};Object.keys(m).forEach((e)=>{m[e]&&!d[e]&&(d[e]=m[e])});let c=d.Infinitive||e.normal;const h=r(c);return Object.keys(h).forEach((e)=>{h[e]&&!d[e]&&(d[e]=h[e])}),d.Actor||(d.Actor=a(c)),Object.keys(d).forEach((e)=>{!d[e]&&s[e]&&(d[e]=s[e](d))}),d}},{"../predict":87,"../toInfinitive":90,"./generic":80,"./irregulars":82,"./suffixes":83,"./toActor":84,"./toBe":85}],78:[function(e,t){t.exports=[{reg:/(eave)$/i,repl:{pr:"$1s",pa:"$1d",gr:"eaving",ar:"$1r"}},{reg:/(ink)$/i,repl:{pr:"$1s",pa:"unk",gr:"$1ing",ar:"$1er"}},{reg:/([aeiou]k)in$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing",ar:"$1er"}},{reg:/(end)$/i,repl:{pr:"$1s",pa:"ent",gr:"$1ing",ar:"$1er"}},{reg:/(ide)$/i,repl:{pr:"$1s",pa:"ode",gr:"iding",ar:"ider"}},{reg:/(ake)$/i,repl:{pr:"$1s",pa:"ook",gr:"aking",ar:"$1r"}},{reg:/(eed)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing",ar:"$1er"}},{reg:/(e)(ep)$/i,repl:{pr:"$1$2s",pa:"$1pt",gr:"$1$2ing",ar:"$1$2er"}},{reg:/(a[tg]|i[zn]|ur|nc|gl|is)e$/i,repl:{pr:"$1es",pa:"$1ed",gr:"$1ing",prt:"$1en"}},{reg:/([i|f|rr])y$/i,repl:{pr:"$1ies",pa:"$1ied",gr:"$1ying"}},{reg:/([td]er)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing"}},{reg:/([bd]l)e$/i,repl:{pr:"$1es",pa:"$1ed",gr:"$1ing"}},{reg:/(ish|tch|ess)$/i,repl:{pr:"$1es",pa:"$1ed",gr:"$1ing"}},{reg:/(ion|end|e[nc]t)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing"}},{reg:/(om)e$/i,repl:{pr:"$1es",pa:"ame",gr:"$1ing"}},{reg:/(.eat)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing"}},{reg:/([aeiu])([pt])$/i,repl:{pr:"$1$2s",pa:"$1$2",gr:"$1$2$2ing"}},{reg:/(er)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing"}},{reg:/(en)$/i,repl:{pr:"$1s",pa:"$1ed",gr:"$1ing"}},{reg:/(ed)$/i,repl:{pr:"$1s",pa:"$1ded",ar:"$1der",gr:"$1ding"}},{reg:/(..)(ow)$/i,repl:{pr:"$1$2s",pa:"$1ew",gr:"$1$2ing",prt:"$1$2n"}},{reg:/(..)([cs]h)$/i,repl:{pr:"$1$2es",pa:"$1$2ed",gr:"$1$2ing"}},{reg:/([^aeiou][ou])(g|d)$/i,repl:{pr:"$1$2s",pa:"$1$2$2ed",gr:"$1$2$2ing"}},{reg:/([^aeiou][aeiou])(b|t|p|m)$/i,repl:{pr:"$1$2s",pa:"$1$2$2ed",gr:"$1$2$2ing"}},{reg:/([aeiou]zz)$/i,repl:{pr:"$1es",pa:"$1ed",gr:"$1ing"}}]},{}],79:[function(e,t){"use strict";const n=e("./irregulars"),r=e("./suffixes"),a=e("./generic"),s=["Gerund","PastTense","PresentTense"];t.exports=function(e,t){let o={Infinitive:e};if(t&&t.conjugations){const e=n(o.Infinitive,t);null!==e&&Object.keys(e).forEach((t)=>{e[t]&&!o[t]&&(o[t]=e[t])})}const i=r(e);Object.keys(i).forEach((e)=>{i[e]&&!o[e]&&(o[e]=i[e])});for(let n=0;n<s.length;n++)void 0===o[s[n]]&&(o[s[n]]=a[s[n]](o));return o}},{"./generic":80,"./irregulars":82,"./suffixes":83}],80:[function(e,t){"use strict";const n=/[bcdfghjklmnpqrstvwxz]y$/;t.exports={Gerund:(e)=>{const t=e.Infinitive;return"e"===t.charAt(t.length-1)?t.replace(/e$/,"ing"):t+"ing"},PresentTense:(e)=>{const t=e.Infinitive;return"s"===t.charAt(t.length-1)?t+"es":!0===n.test(t)?t.slice(0,-1)+"ies":t+"s"},PastTense:(e)=>{const t=e.Infinitive;return"e"===t.charAt(t.length-1)?t+"d":"ed"===t.substr(-2)?t:!0===n.test(t)?t.slice(0,-1)+"ied":t+"ed"}}},{}],81:[function(e,t){"use strict";const n=e("./conjugate"),r=e("./toBe"),a=function(e,t){if(t.adverbs.found){let n=t.first().match("#Adverb").found;Object.keys(e).forEach((r)=>{n?e[r]=t.adverbs.out()+" "+e[r]:e[r]+=t.adverbs.out()})}return e};t.exports=(e,t)=>{let s=e.negative.found,o=e.isPlural();if(e.verb.tags.Copula||"be"===e.verb.normal&&e.auxiliary.match("will").found){let t=!1;e.parent&&e.parent.has("i #Adverb? #Copula")&&(t=!0);let n=r(o,s,t);return a(n,e)}let i=n(e.verb,e.world,t);return e.particle.found&&Object.keys(i).forEach((t)=>{i[t]+=e.particle.out()}),s&&(i.PastTense="did not "+i.Infinitive,i.PresentTense="does not "+i.Infinitive,i.Gerund="not "+i.Gerund),i.FutureTense||(s?i.FutureTense="will not "+i.Infinitive:i.FutureTense="will "+i.Infinitive),i=a(i,e),i}},{"./conjugate":77,"./toBe":85}],82:[function(e,t){"use strict";const n=e("../../../../fns"),r=["Participle","Gerund","PastTense","PresentTense","FuturePerfect","PerfectTense","Actor"];t.exports=function(e,t){const a=t.conjugations,s=Object.keys(a);if(t&&t.conjugations&&!0===t.conjugations.hasOwnProperty(e))return t.conjugations[e];if(!0===a.hasOwnProperty(e)){let t=n.copy(a[e]);return t.Infinitive=e,t}for(let l=0;l<s.length;l++)for(let t=0,o;t<r.length;t++)if(o=a[s[l]],o[r[t]]===e){let e=n.copy(o);return e.Infinitive=s[l],e}return{}}},{"../../../../fns":3}],83:[function(e,t){"use strict";const n=e("./data/rules"),r={pr:"PresentTense",pa:"PastTense",gr:"Gerund",prt:"Participle",ar:"Actor"},a=Object.keys(r);t.exports=function(e){let t={};for(let s=0;s<n.length;s++)if(!0===n[s].reg.test(e)){let i=n[s].repl;for(let l=0;l<a.length;l++)if(!0===i.hasOwnProperty(a[l])){let o=r[a[l]];t[o]=e.replace(n[s].reg,i[a[l]])}return t}return t}},{"./data/rules":78}],84:[function(e,t){"use strict";const n={tie:"tier",dream:"dreamer",sail:"sailer",run:"runner",rub:"rubber",begin:"beginner",win:"winner",claim:"claimant",deal:"dealer",spin:"spinner"},r={aid:1,fail:1,appear:1,happen:1,seem:1,try:1,say:1,marry:1,be:1,forbid:1,understand:1,bet:1},a=[{reg:/e$/i,repl:"er"},{reg:/([aeiou])([mlgp])$/i,repl:"$1$2$2er"},{reg:/([rlf])y$/i,repl:"$1ier"},{reg:/^(.?.[aeiou])t$/i,repl:"$1tter"}];t.exports=function(e){if(r[e])return null;if(n.hasOwnProperty(e))return n[e];for(let t=0;t<a.length;t++)if(!0===a[t].reg.test(e))return e.replace(a[t].reg,a[t].repl);return e+"er"}},{}],85:[function(e,t){"use strict";t.exports=(e,t,n)=>{let r={PastTense:"was",PresentTense:"is",FutureTense:"will be",Infinitive:"is",Gerund:"being",Actor:"",PerfectTense:"been",Pluperfect:"been"};return!0===n&&(r.PresentTense="am",r.Infinitive="am"),e&&(r.PastTense="were",r.PresentTense="are",r.Infinitive="are"),t&&(r.PastTense+=" not",r.PresentTense+=" not",r.FutureTense="will not be",r.Infinitive+=" not",r.PerfectTense="not "+r.PerfectTense,r.Pluperfect="not "+r.Pluperfect,r.Gerund="not "+r.Gerund),r}},{}],86:[function(e,t){"use strict";t.exports=(e)=>{if(e.match("(are|were|does)").found)return!0;if(e.match("(is|am|do|was)").found)return!1;let t=e.getNoun();if(t&&t.found){if(t.match("#Plural").found)return!0;if(t.match("#Singular").found)return!1}return null}},{}],87:[function(e,t){"use strict";const n=e("./suffix_rules"),r={Infinitive:!0,Gerund:!0,PastTense:!0,PresentTense:!0,FutureTense:!0,PerfectTense:!0,Pluperfect:!0,FuturePerfect:!0,Participle:!0};t.exports=function(e){const t=Object.keys(r);for(let n=0;n<t.length;n++)if(e.tags[t[n]])return t[n];const a=Object.keys(n);for(let t=0;t<a.length;t++){const r=e.normal.substr(-a[t].length);if(r===a[t]&&e.normal.length>a[t].length)return n[a[t]]}return null}},{"./suffix_rules":88}],88:[function(e,t){"use strict";const n={Gerund:["ing"],Actor:["erer"],Infinitive:["ate","ize","tion","rify","then","ress","ify","age","nce","ect","ise","ine","ish","ace","ash","ure","tch","end","ack","and","ute","ade","ock","ite","ase","ose","use","ive","int","nge","lay","est","ain","ant","ent","eed","er","le","own","unk","ung","en"],PastTense:["ed","lt","nt","pt","ew","ld"],PresentTense:["rks","cks","nks","ngs","mps","tes","zes","ers","les","acks","ends","ands","ocks","lays","eads","lls","els","ils","ows","nds","ays","ams","ars","ops","ffs","als","urs","lds","ews","ips","es","ts","ns","s"]},r={},a=Object.keys(n),s=a.length;for(let l=0,i;l<s;l++){i=n[a[l]].length;for(let e=0;e<i;e++)r[n[a[l]][e]]=a[l]}t.exports=r},{}],89:[function(e,t){"use strict";const n=[[/y$/,"i"],[/([aeiou][n])$/,"$1n"]],r={collect:!0,exhaust:!0,convert:!0,digest:!0,discern:!0,dismiss:!0,reverse:!0,access:!0,collapse:!0,express:!0},a={eat:"edible",hear:"audible",see:"visible",defend:"defensible",write:"legible",move:"movable",divide:"divisible",perceive:"perceptible"};t.exports=function(e){if(a.hasOwnProperty(e))return a[e];for(let t=0;t<n.length;t++)!0===n[t][0].test(e)&&(e=e.replace(n[t][0],n[t][1]));let t=e+"able";return r[e]&&(t=e+"ible"),t}},{}],90:[function(e,t){"use strict";const n=e("./rules"),r=e("../predict");t.exports=function(e,t){const a=t.cache.toInfinitive||{};if(e.tags.Infinitive)return e.normal;if(!0===a.hasOwnProperty(e.normal))return a[e.normal];let s=r(e);if(n[s])for(let t=0,r;t<n[s].length;t++)if(r=n[s][t],e.normal.match(r.reg))return e.normal.replace(r.reg,r.to);return e.normal}},{"../predict":87,"./rules":91}],91:[function(e,t){"use strict";let n={Participle:[{reg:/own$/i,to:"ow"},{reg:/(.)un([g|k])$/i,to:"$1in$2"}],Actor:[{reg:/(er)er$/i,to:"$1"}],PresentTense:[{reg:/(..)(ies)$/i,to:"$1y"},{reg:/(tch|sh)es$/i,to:"$1"},{reg:/(ss|zz)es$/i,to:"$1"},{reg:/([tzlshicgrvdnkmu])es$/i,to:"$1e"},{reg:/(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,to:"$1"},{reg:/(ow)s$/i,to:"$1"},{reg:/(op)s$/i,to:"$1"},{reg:/([eirs])ts$/i,to:"$1t"},{reg:/(ll)s$/i,to:"$1"},{reg:/(el)s$/i,to:"$1"},{reg:/(ip)es$/i,to:"$1e"},{reg:/ss$/i,to:"ss"},{reg:/s$/i,to:""}],Gerund:[{reg:/pping$/i,to:"p"},{reg:/lling$/i,to:"ll"},{reg:/tting$/i,to:"t"},{reg:/dding$/i,to:"d"},{reg:/ssing$/i,to:"ss"},{reg:/(..)gging$/i,to:"$1g"},{reg:/([^aeiou])ying$/i,to:"$1y"},{reg:/([^ae]i.)ing$/i,to:"$1e"},{reg:/(ea.)ing$/i,to:"$1"},{reg:/(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i,to:"$1e"},{reg:/(ch|sh)ing$/i,to:"$1"},{reg:/(..)ing$/i,to:"$1"}],PastTense:[{reg:/(ued)$/i,to:"ue"},{reg:/a([^aeiouy])ed$/i,to:"a$1e"},{reg:/([aeiou]zz)ed$/i,to:"$1"},{reg:/(e|i)lled$/i,to:"$1ll"},{reg:/(.)(sh|ch)ed$/i,to:"$1$2"},{reg:/(tl|gl)ed$/i,to:"$1e"},{reg:/(um?pt?)ed$/i,to:"$1"},{reg:/(ss)ed$/i,to:"$1"},{reg:/pped$/i,to:"p"},{reg:/tted$/i,to:"t"},{reg:/(..)gged$/i,to:"$1g"},{reg:/(..)lked$/i,to:"$1lk"},{reg:/([^aeiouy][aeiou])ked$/i,to:"$1ke"},{reg:/(.[aeiou])led$/i,to:"$1l"},{reg:/(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,to:"$1$2"},{reg:/(.ut)ed$/i,to:"$1e"},{reg:/(.pt)ed$/i,to:"$1"},{reg:/(us)ed$/i,to:"$1e"},{reg:/(..[^aeiouy])ed$/i,to:"$1e"},{reg:/(..)ied$/i,to:"$1y"},{reg:/(.o)ed$/i,to:"$1o"},{reg:/(..i)ed$/i,to:"$1"},{reg:/(.a[^aeiou])ed$/i,to:"$1"},{reg:/([rl])ew$/i,to:"$1ow"},{reg:/([pl])t$/i,to:"$1t"}]};t.exports=n},{}],92:[function(e,t){t.exports=function(e){return e.match("#Contraction+").list.forEach((e)=>{e.has("#Verb")&&e.terms.forEach((e)=>{e.silent_term&&(!e.text&&(e.whitespace.before=" "),e._text=e.silent_term,e.tags.TitleCase&&e.toTitleCase(),e.normalize(),e.silent_term=null,e.unTag("Contraction","expanded"))})}),e}},{}],93:[function(e,t){"use strict";const n=e("./methods/toInfinitive"),r=function(e){return e=e.match("(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+"),e=e.splitAfter("#Comma"),e.list[0]};t.exports=(e)=>{let t=e.match("#Auxiliary").first();if(t.found){let n=t.list[0].index(),a=e.parentTerms.insertAt(n+1,"not","Verb");return a.match("not").tag("Negative","tag-not"),r(a)}let a=e.match("(#Copula|will|has|had|do)").first();if(a.found){let t=a.list[0].index(),n=e.parentTerms.insertAt(t+1,"not","Verb");return n.match("not").tag("Negative","tag-not"),r(n)}let s=e.isPlural(),o=e.match("#PastTense").last();if(o.found){let t=o.list[0],a=t.index();t.terms[0].text=n(t.terms[0],e.world);let s=e.parentTerms.insertAt(a,"did not","Verb");return s.match("not").tag("Negative","tag-not"),r(s)}let i=e.match("#PresentTense").first();if(i.found){let t=i.list[0],a=t.index();t.terms[0].text=n(t.terms[0],e.world);let s=e.getNoun(),o=null;return o=s.match("(i|we|they|you)").found?e.parentTerms.insertAt(a,"do not","Verb"):e.parentTerms.insertAt(a,"does not","Verb"),o.match("not").tag("Negative","tag-not"),r(o)}let l=e.match("#Gerund").last();if(l.found){let t=l.list[0].index(),n=e.parentTerms.insertAt(t,"not","Verb");return n.match("not").tag("Negative","tag-not"),r(n)}let d=e.match("#Verb").last();if(d.found){let t=d.list[0],a=t.index();t.terms[0].text=n(t.terms[0],e.world);let o=e;return o=s?e.parentTerms.insertAt(a-1,"do not","Verb"):e.parentTerms.insertAt(a-1,"does not","Verb"),o.match("not").tag("Negative","tag-not"),r(o)}return e}},{"./methods/toInfinitive":90}],94:[function(e,t){"use strict";const n=e("../../paths").Terms,r=e("./methods/conjugate"),a=e("./methods/toAdjective"),s=e("./interpret"),o=e("./toNegative"),i=e("./methods/isPlural"),l=e("./methods/verbContraction"),d=function(e){let t=e;e.negative=e.match("#Negative"),e.adverbs=e.match("#Adverb");let n=e.clone().not("(#Adverb|#Negative)");if(e.verb=n.match("#Verb").not("#Particle").last(),e.particle=n.match("#Particle").last(),e.verb.found){let n=e.verb.out("normal");e.auxiliary=t.not(n).not("(#Adverb|#Negative)"),e.verb=e.verb.list[0].terms[0]}else e.verb=t.terms[0],e.auxiliary=n.not(".");return e},u={parse:function(){return d(this)},data:function(e){return{text:this.out("text"),normal:this.out("normal"),parts:{negative:this.negative.out("normal"),auxiliary:this.auxiliary.out("normal"),verb:this.verb.out("normal"),particle:this.particle.out("normal"),adverbs:this.adverbs.out("normal")},interpret:s(this,e),conjugations:this.conjugate()}},getNoun:function(){if(!this.refTerms)return null;let e="#Adjective? #Noun+ "+this.out("normal");return this.refTerms.match(e).match("#Noun+")},conjugation:function(){return s(this,!1).tense},conjugate:function(e){return r(this,e)},isPlural:function(){return i(this)},isNegative:function(){return 1===this.match("#Negative").list.length},isPerfect:function(){return this.auxiliary.match("(have|had)").found},toNegative:function(){return this.isNegative()?this:o(this)},toPositive:function(){return this.match("#Negative").delete()},toPastTense:function(){this.has("#Contraction")&&(this.list=l(this.parentTerms).list);let e=this.conjugate(),t=e.PastTense,n=this.replaceWith(t,!1);return n.verb.tag("#PastTense"),n},toPresentTense:function(){this.has("#Contraction")&&l(this.parentTerms);let e=this.conjugate(),t=this.replaceWith(e.PresentTense,!1);return t.verb.tag("#PresentTense"),t},toFutureTense:function(){this.has("#Contraction")&&l(this.parentTerms);let e=this.conjugate(),t=this.replaceWith(e.FutureTense,!1);return t.verb.tag("#FutureTense"),t},toInfinitive:function(){this.has("#Contraction")&&l(this.parentTerms);let e=this.conjugate(),t=this.replaceWith(e.Infinitive,!1);return t.verb.tag("#Infinitive"),t},toGerund:function(){this.has("#Contraction")&&l(this.parentTerms);let e=this.conjugate(),t="is",n=this.getNoun().out("normal");if(n){let e={i:"am",we:"are",they:"are"};e.hasOwnProperty(n)&&(t=e[n])}let a=t+" "+e.Gerund,s=this.replaceWith(a,!1);return s.verb.tag("#Gerund"),s},asAdjective:function(){return a(this.verb.out("normal"))}},m=function(e,t,r,a){return n.call(this,e,t,r,a),d(this)};m.prototype=Object.create(n.prototype),Object.keys(u).forEach((e)=>{m.prototype[e]=u[e]}),t.exports=m},{"../../paths":8,"./interpret":76,"./methods/conjugate":81,"./methods/isPlural":86,"./methods/toAdjective":89,"./methods/verbContraction":92,"./toNegative":93}],95:[function(e,t){"use strict";const n={punctuation_step:e("./steps/01-punctuation_step"),emoji_step:e("./steps/02-emoji_step"),lexicon_step:e("./steps/03-lexicon_step"),lexicon_multi:e("./steps/04-lexicon_multi"),web_step:e("./steps/05-web_step"),suffix_step:e("./steps/06-suffix_step"),neighbour_step:e("./steps/07-neighbour_step"),capital_step:e("./steps/08-capital_step"),noun_fallback:e("./steps/09-noun_fallback"),contraction:e("./steps/10-contraction_step"),date_step:e("./steps/11-date_step"),auxiliary_step:e("./steps/12-auxiliary_step"),negation_step:e("./steps/13-negation_step"),comma_step:e("./steps/14-comma_step"),quotation_step:e("./steps/15-quotation_step"),possessive_step:e("./steps/16-possessive_step"),acronym_step:e("./steps/17-acronym_step"),person_step:e("./steps/18-person_step"),organization_step:e("./steps/19-organization_step"),parentheses_step:e("./steps/20-parentheses_step"),plural_step:e("./steps/21-plural_step"),value_step:e("./steps/22-value_step"),corrections:e("./steps/23-corrections"),properNoun:e("./steps/24-proper_noun"),custom:e("./steps/25-custom")},r=e("./phrase");t.exports=function(e){return e=n.punctuation_step(e),e=n.emoji_step(e),e=n.lexicon_step(e),e=n.lexicon_multi(e),e=n.web_step(e),e=n.suffix_step(e),e=n.comma_step(e),e=n.neighbour_step(e),e=n.capital_step(e),e=n.noun_fallback(e),e=n.contraction(e),e=n.date_step(e),e=n.auxiliary_step(e),e=n.negation_step(e),e=n.quotation_step(e),e=n.possessive_step(e),e=n.acronym_step(e),e=n.person_step(e),e=n.organization_step(e),e=n.parentheses_step(e),e=n.plural_step(e),e=n.value_step(e),e=n.corrections(e),e=n.properNoun(e),e=r(e),e=n.custom(e),e}},{"./phrase":98,"./steps/01-punctuation_step":99,"./steps/02-emoji_step":100,"./steps/03-lexicon_step":101,"./steps/04-lexicon_multi":102,"./steps/05-web_step":103,"./steps/06-suffix_step":104,"./steps/07-neighbour_step":105,"./steps/08-capital_step":106,"./steps/09-noun_fallback":107,"./steps/10-contraction_step":108,"./steps/11-date_step":109,"./steps/12-auxiliary_step":110,"./steps/13-negation_step":111,"./steps/14-comma_step":112,"./steps/15-quotation_step":113,"./steps/16-possessive_step":114,"./steps/17-acronym_step":115,"./steps/18-person_step":116,"./steps/19-organization_step":117,"./steps/20-parentheses_step":118,"./steps/21-plural_step":119,"./steps/22-value_step":120,"./steps/23-corrections":121,"./steps/24-proper_noun":122,"./steps/25-custom":123}],96:[function(e,t){"use strict";t.exports=function(e){let t=e.match("#Condition .{1,7} #ClauseEnd");return t.found&&t.match("#Comma$")&&t.tag("Condition"),t=e.match("#Condition .{1,13} #ClauseEnd #Pronoun"),t.found&&t.match("#Comma$")&&t.not("#Pronoun$").tag("Condition","end-pronoun"),t=e.match("#Condition .{1,7} then"),t.found&&t.not("then$").tag("Condition","cond-then"),t=e.match("as long as .{1,7} (then|#ClauseEnd)"),t.found&&t.not("then$").tag("Condition","as-long-then"),t=e.match("#Comma #Condition .{1,7} .$"),t.found&&t.not("^#Comma").tag("Condition","comma-7-end"),t=e.match("#Condition .{1,4}$"),t.found&&t.tag("Condition","cond-4-end"),e}},{}],97:[function(e,t){"use strict";t.exports=function(e){return e.has("(#Verb|#Auxiliary)")&&(e.match("#Verb").tag("VerbPhrase","verbphrase-verb"),e.match("#Adverb #Verb").tag("VerbPhrase","adverb-verb"),e.match("#Verb #Adverb").tag("VerbPhrase","verb-adverb"),e.match("#Verb #Negative").tag("VerbPhrase","verb-not"),e.match("never #Verb").tag("VerbPhrase","not-verb"),e.match("#Auxiliary+").tag("VerbPhrase","2"),e.match("#Copula").tag("VerbPhrase","#3"),e.match("#Adverb #Auxiliary").tag("VerbPhrase","#4")),e}},{}],98:[function(e,t){"use strict";const n=e("./00-conditionPass"),r=e("./01-verbPhrase");t.exports=function(e){return e=n(e),e=r(e),e}},{"./00-conditionPass":96,"./01-verbPhrase":97}],99:[function(e,t){"use strict";const n=/^[A-Z][a-z']/,r=/^[IVXCM]+$/,a=function(e){return 1<e.text.length&&!0===r.test(e.text)&&e.canBe("RomanNumeral")},s={a:!0,i:!0,u:!0,r:!0,c:!0,k:!0};t.exports=function(e){let o=e.world.regex||[];return e.terms.forEach((l,t)=>{let d=l.text;!0===n.test(d)&&l.tag("TitleCase","punct-rule"),"-"===l.whitespace.after&&e.terms[t+1]&&""===e.terms[t+1].whitespace.before&&(l.tag("Hyphenated","has-hyphen"),e.terms[t+1].tag("Hyphenated","has-hyphen")),"("===l.text[0]&&l.tag("StartBracket"),!0===/\)[,.?!;:]?$/.test(l.text)&&l.tag("EndBracket"),d=d.replace(/[,\.\?]$/,"");for(let e=0,n;e<o.length;e++)if(n=o[e],!0===n.reg.test(d))return void(l.canBe(n.tag)&&l.tag(n.tag,"punctuation-rule- \""+n.reg.toString()+"\""));1===d.length&&e.terms[t+1]&&/[A-Z]/.test(d)&&!s[d.toLowerCase()]&&l.tag("Acronym","one-letter-acronym"),a(l)&&l.tag("RomanNumeral","is-roman-numeral"),!0===/[0-9]\+$/.test(l.text)&&l.tag("NumericValue","number-plus")}),e}},{}],100:[function(e,t){"use strict";const n=e("./rules/emoji_regex"),r=e("./rules/emoticon_list"),a=(e)=>{return!(":"!==e.text.charAt(0))&&null!==e.text.match(/:.?$/)&&!e.text.match(" ")&&!(35<e.text.length)},s=(e)=>{let t=e.text.replace(/^[:;]/,":");return!0===r.hasOwnProperty(t)};t.exports=(e)=>{for(let r=0,o;r<e.terms.length;r++)o=e.terms[r],a(o)&&o.tag("Emoji","colon-emoji"),o.text.match(n)&&o.tag("Emoji","unicode-emoji"),s(o)&&o.tag("Emoji","emoticon-emoji");return e}},{"./rules/emoji_regex":130,"./rules/emoticon_list":131}],101:[function(e,t){"use strict";const n=e("./contraction/split");t.exports=function(e){const r=e.world.words||{};for(let a=0,s;a<e.terms.length;a++){if(s=e.terms[a],!0===r.hasOwnProperty(s.normal)){s.tag(r[s.normal],"lexicon");continue}if(s.silent_term&&!0===r.hasOwnProperty(s.silent_term)){s.tag(r[s.silent_term],"silent_term-lexicon");continue}if(s.root&&s.normal!==s.root&&!0===r.hasOwnProperty(s.root)){s.tag(r[s.root],"lexicon");continue}let t=n(s);if(t&&t.start){let e=t.start.toLowerCase();if(!0===r.hasOwnProperty(e)){s.tag(r[e],"contraction-lexicon");continue}}}return e}},{"./contraction/split":129}],102:[function(e,t){"use strict";const n=4,r=function(e,t,r){let a=r.words,s=e.terms[t].root,o=e.terms.slice(t+1,t+n).map((e)=>e.root),i=n;o.length<i&&(i=o.length);for(let n=i,l;0<n;n-=1)if(l=s+" "+o.slice(0,n).join(" "),!0===a.hasOwnProperty(l))return e.slice(t,t+n+1).tag(a[l],"multi-lexicon-"+l),n;return 0};t.exports=(e)=>{e.world.cache=e.world.cache||{};let n=e.world.cache.firstWords||{};for(let a=0,s;a<e.terms.length;a++)if(s=e.terms[a],!0===n.hasOwnProperty(s.root)){let t=r(e,a,e.world);a+=t;continue}return e}},{}],103:[function(e,t){"use strict";const n=/^\w+@\w+\.[a-z]{2,3}$/,r=/^#[a-z0-9_]{2,}$/,a=/^@\w{2,}$/,s=/^(https?:\/\/|www\.)\w+\.[a-z]{2,3}/,o=/^[\w\.\/]+\.(com|net|gov|org|ly|edu|info|biz|ru|jp|de|in|uk|br)/;t.exports=function(e){for(let l=0;l<e.length;l++){let i=e.get(l),t=i.text.trim().toLowerCase();!0===n.test(t)&&i.tag("Email","web_pass"),!0===r.test(t)&&i.tag("HashTag","web_pass"),!0===a.test(t)&&i.tag("AtMention","web_pass"),(!0===s.test(t)||!0===o.test(t))&&i.tag("Url","web_pass")}return e}},{}],104:[function(e,t){"use strict";const n=e("./rules/regex_list"),r=e("./rules/suffix_lookup"),a=[[/^(lol)+[sz]$/,"Expression"],[/^ma?cd[aeiou]/,"LastName"],[/^[\-\+]?[0-9][0-9,]*(\.[0-9])*$/,"Cardinal"],[/^(un|de|re)\\-[a-z]../,"Verb"],[/^[\-\+]?[0-9]+(\.[0-9])*$/,"NumericValue"],[/^https?\:?\/\/[a-z0-9]/,"Url"],[/^www\.[a-z0-9]/,"Url"],[/^(over|under)[a-z]{2,}/,"Adjective"],[/^[0-9]{1,4}\.[0-9]{1,2}\.[0-9]{1,4}$/,"Date"],[/^[0-9]+([a-z]{1,2})$/,"Value"],[/^[0-9][0-9,\.]*(st|nd|rd|r?th)$/,["NumericValue","Ordinal"]],[/[a-z]*\\-[a-z]*\\-/,"Adjective"]],s=function(e){const t=e.normal.length;let n=7;t<=n&&(n=t-1);for(let a=n,s;1<a;a-=1)if(s=e.normal.substr(t-a,t),void 0!==r[a][s])return r[a][s];return null},o=function(e){let t=e.normal.charAt(e.normal.length-1);if(n[t]===void 0)return null;let r=n[t];for(let t=0;t<r.length;t++)if(!0===r[t][0].test(e.normal))return r[t];return null};t.exports=function(e){for(let n=0;n<e.terms.length;n++){let r=e.terms[n],t=s(r);if(null!==t&&!0===r.canBe(t)){r.tag(t,"suffix-lookup");continue}if(t=o(r),null!==t&&!0===r.canBe(t[1])){r.tag(t[1],"regex-list: "+(t[0]+""));continue}for(let e=0;e<a.length;e++)!0===a[e][0].test(r.normal)&&(t=a[e][1],!0===r.canBe(t)&&r.tag(t,"misc-regex-"+a[e][0]))}return e}},{"./rules/regex_list":133,"./rules/suffix_lookup":134}],105:[function(e,t){"use strict";const n=e("./rules/neighbours"),r=n.afterThisWord,a=n.beforeThisWord,s=n.beforeThisPos,o=n.afterThisPos,i={TitleCase:!0,UpperCase:!0,CamelCase:!0,Hyphenated:!0,StartBracket:!0,EndBracket:!0,Comma:!0,ClauseEnd:!0};t.exports=function(e){return e.terms.forEach((l,t)=>{let n=Object.keys(l.tags);if(n=n.filter((e)=>!1===i.hasOwnProperty(e)),0===n.length){let n=e.terms[t-1],i=e.terms[t+1];if(n&&r.hasOwnProperty(n.normal)&&!n.tags.ClauseEnd)return void l.tag(r[n.normal],"neighbour-after-\""+n.normal+"\"");if(!l.tags.ClauseEnd&&i&&a.hasOwnProperty(i.normal))return void l.tag(a[i.normal],"neighbour-before-\""+i.normal+"\"");let d=[];if(n){d=Object.keys(n.tags);for(let e=0;e<d.length;e++)if(o[d[e]])return void l.tag(o[d[e]],"neighbour-after-["+d[e]+"]")}if(i){d=Object.keys(i.tags);for(let e=0;e<d.length;e++)if(s[d[e]])return void l.tag(s[d[e]],"neighbour-before-["+d[e]+"]")}}}),e}},{"./rules/neighbours":132}],106:[function(e,t){"use strict";t.exports=function(e){for(let n=1,r;n<e.terms.length;n++)r=e.terms[n],r.tags.TitleCase&&r.isWord()&&(r.tag("Noun","capital-step"),r.tag("TitleCase","capital-step"));let n=e.terms[0];return n&&n.tags.TitleCase&&(n.tags.Person||n.tags.Organization||n.tags.Place)&&n.tag("TitleCase","first-term-capital"),e}},{}],107:[function(e,t){"use strict";const n={TitleCase:!0,UpperCase:!0,CamelCase:!0,Hyphenated:!0,StartBracket:!0,EndBracket:!0,Comma:!0,ClauseEnd:!0},r=function(e){if(e.tags.Noun||e.tags.Verb||e.tags.Adjective)return!1;let t=Object.keys(e.tags);return!(0!==t.length)||!(0!==t.filter((e)=>!n[e]).length)},a=function(e){if(!0===/^(re|un)-?[^aeiou]./.test(e.normal)){let t=e.normal.replace(/^(re|un)-?/,"");if(!0===e.world.words.hasOwnProperty(t)){let n=e.world.words[t];if("Infinitive"===n||"PresentTense"===n||"PastTense"===n||"Gerund"===n)return n}}return null};t.exports=function(e){for(let n=0,s;n<e.terms.length;n++)if((s=e.terms[n],!(s.tags.Noun||s.tags.Verb))&&r(s)){if(!1===s.isWord())continue;let e=a(s);if(null!==e){s.tag(e,"root-tag-match");continue}s.tag("Noun","noun-fallback")}return e}},{}],108:[function(e,t){"use strict";const n=e("./contraction/01-irregulars"),r=e("./contraction/02-isWasHas"),a=e("./contraction/03-easyOnes"),s=e("./contraction/04-numberRange");t.exports=function(e){return e=n(e),e=r(e),e=a(e),e=s(e),e}},{"./contraction/01-irregulars":124,"./contraction/02-isWasHas":125,"./contraction/03-easyOnes":126,"./contraction/04-numberRange":127}],109:[function(e,t){"use strict";const n="(in|by|before|during|on|until|after|of|within|all)",r="(last|next|this|previous|current|upcoming|coming)",a="(start|end|middle|starting|ending|midpoint|beginning)",s="(spring|summer|winter|fall|autumn)",o=(e,t)=>{!0!==e.found||e.list.forEach((e)=>{let n=parseInt(e.terms[0].normal,10);n&&1e3<n&&3e3>n&&e.terms[0].tag("Year",t)})},i=(e,t)=>{!0!==e.found||e.list.forEach((e)=>{let n=parseInt(e.terms[0].normal,10);n&&1900<n&&2030>n&&e.terms[0].tag("Year",t)})};t.exports=function(e){let t="(january|april|may|june|summer|autumn|jan|sep)";e.has(t)&&(e.match(`#Infinitive #Determiner? #Adjective? #Noun? (to|for) ${t}`).lastTerm().tag("Person","ambig-person"),e.match(`#Infinitive ${t}`).lastTerm().tag("Person","infinitive-person"),e.match(`${t} #PresentTense (to|for)`).firstTerm().tag("Person","ambig-active"),e.match(`${t} #Modal`).firstTerm().tag("Person","ambig-modal"),e.match(`#Modal ${t}`).lastTerm().tag("Person","modal-ambig"),e.match(`(that|with|for) ${t}`).term(1).tag("Person","that-month"),e.match(`#Copula ${t}`).term(1).tag("Person","is-may"),e.match(`${t} #Copula`).term(0).tag("Person","may-is"),e.match(`${t} the? #Value`).term(0).tag("Month","person-value"),e.match(`#Date ${t}`).term(1).tag("Month","correction-may"),e.match(`${t} the? #Value`).firstTerm().tag("Month","may-5th"),e.match(`#Value of ${t}`).lastTerm().tag("Month","5th-of-may"),e.match(`${n} ${t}`).ifNo("#Holiday").term(1).tag("Month","preps-month"),e.match(`(next|this|last) ${t}`).term(1).tag("Month","correction-may"));let l="(may|march)";if(e.has(l)&&(e.match(`#Adverb ${l}`).lastTerm().tag("Infinitive","ambig-verb"),e.match(`${l} #Adverb`).lastTerm().tag("Infinitive","ambig-verb"),e.match(`${n} ${l}`).lastTerm().tag("Month","in-month"),e.match(`(next|this|last) ${l}`).lastTerm().tag("Month","this-month"),e.match(`${l} the? #Value`).firstTerm().tag("Month","march-5th"),e.match(`#Value of? ${l}`).lastTerm().tag("Month","5th-of-march"),e.match(`[${l}] .? #Date`).lastTerm().tag("Month","march-and-feb"),e.match(`#Date .? [${l}]`).lastTerm().tag("Month","feb-and-march"),e.has("march")&&(e.match("march (up|down|back|to|toward)").term(0).tag("Infinitive","march-to"),e.match("#Modal march").term(1).tag("Infinitive","must-march"))),e.has("sun")&&(e.match("sun #Date").firstTerm().tag("WeekDay","sun-feb"),e.match("sun the #Ordinal").tag("Date").firstTerm().tag("WeekDay","sun-the-5th"),e.match("#Determiner sun").lastTerm().tag("Singular","the-sun")),e.has("sat")&&(e.match("sat #Date").firstTerm().tag("WeekDay","sat-feb"),e.match(`${n} sat`).lastTerm().tag("WeekDay","sat")),e.has("#Month")&&(e.match(`#Month #DateRange+`).tag("Date","correction-numberRange"),e.match("#Value of #Month").tag("Date","value-of-month"),e.match("#Cardinal #Month").tag("Date","cardinal-month"),e.match("#Month #Value to #Value").tag("Date","value-to-value"),e.match("#Month the #Value").tag("Date","month-the-value")),e.match("in the (night|evening|morning|afternoon|day|daytime)").tag("Time","in-the-night"),e.match("(#Value|#Time) (am|pm)").tag("Time","value-ampm"),e.has("#Value")){e.match("for #Value #Duration").tag("Date","for-x-duration"),e.match("#Value #Abbreviation").tag("Value","value-abbr"),e.match("a #Value").if("(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)").tag("Value","a-value"),e.match("(minus|negative) #Value").tag("Value","minus-value"),e.match("#Value grand").tag("Value","value-grand"),e.match("(half|quarter) #Ordinal").tag("Value","half-ordinal"),e.match("(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion) and #Value").tag("Value","magnitude-and-value"),e.match("#Value (point|decimal) #Value").tag("Value","value-point-value"),e.match(`${n}? #Value #Duration`).tag("Date","value-duration"),e.match("(#WeekDay|#Month) #Value").ifNo("#Money").tag("Date","date-value"),e.match("#Value (#WeekDay|#Month)").ifNo("#Money").tag("Date","value-date");let t=e.match("#TextValue #TextValue");t.found&&t.has("#Date")&&t.tag("#Date","textvalue-date"),e.match("#Value #Duration #Conjunction").tag("Date","val-duration-conjunction"),e.match("#Value #Duration old").unTag("Date","val-years-old")}if(e.has(s)&&(e.match(`${n}? ${r} ${s}`).tag("Date","thisNext-season"),e.match(`the? ${a} of ${s}`).tag("Date","section-season")),e.has("#Date")&&(e.match("#Date the? #Ordinal").tag("Date","correction-date"),e.match(`${r} #Date`).tag("Date","thisNext-date"),e.match("due? (by|before|after|until) #Date").tag("Date","by-date"),e.match("#Date (by|before|after|at|@|about) #Cardinal").not("^#Date").tag("Time","date-before-Cardinal"),e.match("#Date (am|pm)").term(1).unTag("Verb").unTag("Copula").tag("Time","date-am"),e.match("(last|next|this|previous|current|upcoming|coming|the) #Date").tag("Date","next-feb"),e.match("#Date (#Preposition|to) #Date").tag("Date","date-prep-date"),e.match(`the? ${a} of #Date`).tag("Date","section-of-date"),e.match("#Ordinal #Duration in #Date").tag("Date","duration-in-date"),e.match("(early|late) (at|in)? the? #Date").tag("Time","early-evening")),e.has("#Cardinal")){let t=e.match(`#Date #Value #Cardinal`).lastTerm();o(t,"date-value-year"),t=e.match(`#Date+ #Cardinal`).lastTerm(),o(t,"date-year"),t=e.match(`#Month #Value #Cardinal`).lastTerm(),o(t,"month-value-year"),t=e.match(`#Month #Value to #Value #Cardinal`).lastTerm(),o(t,"month-range-year"),t=e.match(`(in|of|by|during|before|starting|ending|for|year) #Cardinal`).lastTerm(),o(t,"in-year"),t=e.match("(q1|q2|q3|q4) [#Cardinal]"),o(t,"in-year"),t=e.match("#Ordinal quarter [#Cardinal]"),o(t,"in-year"),t=e.match("the year [#Cardinal]"),o(t,"in-year"),t=e.match("it (is|was) [#Cardinal]"),i(t,"in-year"),t=e.match(`#Cardinal !#Plural`).firstTerm(),i(t,"year-unsafe")}if(e.has("#Date")){e.has("#Time")&&(e.match("#Cardinal #Time").not("#Year").tag("Time","value-time"),e.match("(by|before|after|at|@|about) #Time").tag("Time","preposition-time"),e.match("#Time (eastern|pacific|central|mountain)").term(1).tag("Time","timezone"),e.match("#Time (est|pst|gmt)").term(1).tag("Time","timezone abbr"));let t=e.match("#Date+").splitOn("Clause");!1===t.has("(#Year|#Time)")&&t.match("#Value (#Month|#Weekday) #Value").lastTerm().unTag("Date")}return e}},{}],110:[function(e,t){"use strict";const n={do:!0,"don't":!0,does:!0,"doesn't":!0,will:!0,wont:!0,"won't":!0,have:!0,"haven't":!0,had:!0,"hadn't":!0,not:!0};t.exports=function(e){for(let r=0,a;r<e.terms.length;r++)if(a=e.terms[r],n[a.normal]||n[a.silent_term]){let t=e.terms[r+1];if(t&&(t.tags.Verb||t.tags.Adverb||t.tags.Negative)){a.tag("Auxiliary","corrections-Auxiliary");continue}}return e}},{}],111:[function(e,t){"use strict";t.exports=function(e){for(let n=0,r;n<e.length;n++)if(r=e.get(n),"not"===r.normal||"not"===r.silent_term)for(let t=n+1;t<e.length;t++){if(e.get(t).tags.Verb){r.tag("VerbPhrase","negate-verb");break}if(e.get(t).tags.Adjective){r.tag("AdjectivePhrase","negate-adj");break}}return e}},{}],112:[function(e,t){"use strict";const n=(e,n)=>{let r=e.terms[n],t=e.terms[n+1];return t&&r.tags.Place&&!r.tags.Country&&t.tags.Country},r=(e)=>{return e.tags.Adjective?"Adjective":e.tags.Noun?"Noun":e.tags.Verb?"Verb":e.tags.Value?"Value":null},a=(e,n)=>{let a=n,s=r(e.terms[n]),o=0,i=0,l=!1;for(++n;n<e.terms.length;n++){let r=e.terms[n];if(0<i&&r.tags.Conjunction){l=!0;continue}if(r.tags[s]){if(r.tags.Comma){i+=1,o=0;continue}if(0<i&&l)return e.slice(a,n).tag("List"),!0}if(o+=1,5<o)return!1;if("Value"===s)return!0}return!1};t.exports=function(e){for(let n=0;n<e.terms.length;n++){let r=e.terms[n],t=r.getPunctuation();if(","===t){r.tag("Comma","comma-step");continue}if(";"===t||":"===t){r.tag("ClauseEnd","clause-punt");continue}if(r.whitespace.after.match(/^\.\./)){r.tag("ClauseEnd","clause-elipses");continue}if(e.terms[n+1]&&e.terms[n+1].whitespace.before.match(/ - /)){r.tag("ClauseEnd","hypen-clause");continue}}for(let r=0,s;r<e.terms.length;r++)if(s=e.terms[r],s.tags.Comma){if(s.tags.List)continue;if(n(e,r))continue;let t=a(e,r);t||s.tag("ClauseEnd","phrasal-comma")}return e}},{}],113:[function(e,t){"use strict";const n={'"':{close:"\"",tag:"StraightDoubleQuotes"},"＂":{close:"\uFF02",tag:"StraightDoubleQuotesWide"},"'":{close:"'",tag:"StraightSingleQuotes"},"“":{close:"\u201D",tag:"CommaDoubleQuotes"},"‘":{close:"\u2019",tag:"CommaSingleQuotes"},"‟":{close:"\u201D",tag:"CurlyDoubleQuotesReversed"},"‛":{close:"\u2019",tag:"CurlySingleQuotesReversed"},"„":{close:"\u201D",tag:"LowCurlyDoubleQuotes"},"⹂":{close:"\u201D",tag:"LowCurlyDoubleQuotesReversed"},"‚":{close:"\u2019",tag:"LowCurlySingleQuotes"},"«":{close:"\xBB",tag:"AngleDoubleQuotes"},"‹":{close:"\u203A",tag:"AngleSingleQuotes"},"‵":{close:"\u2032",tag:"PrimeSingleQuotes"},"‶":{close:"\u2033",tag:"PrimeDoubleQuotes"},"‷":{close:"\u2034",tag:"PrimeTripleQuotes"},"〝":{close:"\u301E",tag:"PrimeDoubleQuotes"},"`":{close:"\xB4",tag:"PrimeSingleQuotes"},"〟":{close:"\u301E",tag:"LowPrimeDoubleQuotesReversed"}};Object.keys(n).forEach((e)=>{n[e].regex=new RegExp(n[e].close+"[;:,.]*"),n[e].open=e});const r=new RegExp("["+Object.keys(n).join("")+"]");t.exports=(e)=>{const a=e.terms.slice(0);for(let s=0,i;s<a.length;s++)if(i=e.terms[s],r.test(i.whitespace.before)){let t=i.whitespace.before.match(r).shift().split("");t=t.map((e)=>n[e]);for(let n=0,r;n<e.terms.length&&a[s+n]&&!(28<n);n++){r=-1;for(let e=0;e<t.length;e+=1)if(!0===t[e].regex.test(a[s+n].whitespace.after)){r=e;break}if(-1!=r){const a=t.splice(r,1).pop();if(a.regex.test(e.terms[s+n].normal)&&e.terms[s+n].whitespace.after.replace(a.regex,""),i.tag("StartQuotation","quotation_open"),e.terms[s+n].tag("EndQuotation","quotation_close"),e.slice(s,s+n+1).tag("Quotation","quotation_step"),n-=1,!t.length)break}}}return e}},{}],114:[function(e,t){"use strict";const n=["it's","that's"],r=/([a-z]s['‘’‛‚‵′`´])\W*$/,a=/['‘’‛‚‵′`´]/,s=/[^'‘’‛‚‵′`´\w]+$/,o={};[["'","'"],["\u2018","\u2019"],["\u201B","\u2019"],["\u201A","\u2019"],["\u2035","\u2032"],["`","\xB4"]].forEach((e)=>{o[e[0]]=new RegExp(e[1]+"[^"+e[1]+"\\w]*$")}),n.map((e)=>new RegExp(e.replace("'","["+"'\u2018\u2019\u201B\u201A\u2035\u2032`\xB4"+"]")));const l=function(e,t,s){const o=e.get(s),i=e.get(s+1),l=e.get(s+2),d=n.map((e)=>t.match(e)).find((e)=>e),u=a.test(o.whitespace.after),m=o.tags.Pronoun;return d||m||!u?!1:r.test(t)||void 0===i||!0===i.tags.Noun||!0===o.tags.ClauseEnd||void 0!==l&&i.tags.Adjective&&l.tags.Noun};t.exports=function(e){let t=[];for(let n=0;n<e.length;n++){const r=e.get(n);let a=r.text;"undefined"!=typeof o[a[0]]&&(t[t.length]=o[a[0]],a=a.slice(1)),a=a.replace(s,"");let i=-1;for(let e=0;e<t.length;e+=1)if(!0===t[e].test(a)){i=e;break}-1!=i&&(a=a.replace(t[i],""),delete t[i]),a=a.replace(s,""),l(e,a,n)&&(!r.tags.Noun&&r.tag("Noun","possessive_pass"),r.tag("Possessive","possessive_pass"),!0===r.tags.Contraction&&(r.unTag("Contraction"),e.terms.splice(n+1,1),r.silent_term=""))}return e}},{}],115:[function(e,t){"use strict";t.exports=function(e){return e.terms.forEach((e)=>{e.isAcronym()&&e.tag("Acronym","acronym-step")}),e}},{}],116:[function(e,t){"use strict";t.exports=function(e){e.match("(mr|mrs|ms|dr) (#TitleCase|#Possessive)+").tag("#Person","mr-putin");let t="(rose|robin|dawn|ray|holly|bill|joy|viola|penny|sky|violet|daisy|melody|kelvin|hope|mercedes|olive|jewel|faith|van|charity|miles|lily|summer|dolly|rod|dick|cliff|lane|reed|kitty|art|jean|trinity)";e.has(t)&&(e.match("(#Determiner|#Adverb|#Pronoun|#Possessive) ["+t+"]").tag("Noun","the-ray"),e.match(t+" (#Person|#Acronym|#TitleCase)").canBe("#Person").tag("Person","ray-smith"));let n="(pat|wade|ollie|will|rob|buck|bob|mark|jack)";e.has(n)&&(e.match("(#Modal|#Adverb) ["+n+"]").tag("Verb","would-mark"),e.match(n+" (#Person|#TitleCase)").tag("Person","rob-smith"));let r="(misty|rusty|dusty|rich|randy)";e.has(r)&&(e.match("#Adverb ["+r+"]").tag("Adjective","really-rich"),e.match(r+" (#Person|#TitleCase)").tag("Person","randy-smith"));let a="(april|june|may|jan|august|eve)";e.has(a)&&(e.match(a+" (#Person|#TitleCase)").canBe("#Person").tag("Person","june-smith"),e.match("(in|during|on|by|before|#Date) ["+a+"]").canBe("#Date").tag("Date","in-june"),e.match(a+" (#Date|#Value)").canBe("#Date").tag("Date","june-5th"));let s="(paris|alexandria|houston|kobe|salvador|sydney)";if(e.has(s)&&(e.match("(in|near|at|from|to|#Place) ["+s+"]").canBe("#Place").tag("Place","in-paris"),e.match("["+s+"] #Place").canBe("#Place").tag("Place","paris-france"),e.match("["+s+"] #Person").canBe("#Person").tag("Person","paris-hilton")),e.match("al")&&(e.match("al (#Person|#TitleCase)").canBe("#Person").tag("#Person","al-borlen"),e.match("#TitleCase al #TitleCase").canBe("#Person").tag("#Person","arabic-al-arabic")),e.match("(private|general|major|corporal|lord|lady|secretary|premier) #Honorific? #Person").terms(0).tag("Honorific","ambg-honorifics"),e.match("(1st|2nd|first|second) #Honorific").terms(0).tag("Honorific","ordinal-honorific"),e.has("#FirstName")){let t=e.match("#FirstName #Noun").ifNo("^#Possessive").ifNo("#ClauseEnd .");t.lastTerm().canBe("#LastName").tag("#LastName","firstname-noun"),e.match("#FirstName de #Noun").canBe("#Person").tag("#Person","firstname-de-noun"),e.match("#FirstName (bin|al) #Noun").canBe("#Person").tag("#Person","firstname-al-noun"),e.match("#FirstName #Acronym #TitleCase").tag("Person","firstname-acronym-titlecase"),e.match("#FirstName #FirstName #TitleCase").tag("Person","firstname-firstname-titlecase"),e.match("#Honorific #FirstName? #TitleCase").tag("Person","Honorific-TitleCase"),e.match("#FirstName #TitleCase #TitleCase?").match("#Noun+").tag("Person","firstname-titlecase"),e.match("#FirstName the #Adjective").tag("Person","correction-determiner5"),e.match("#FirstName (green|white|brown|hall|young|king|hill|cook|gray|price)").tag("#Person","firstname-maybe"),e.match("#FirstName #Acronym #Noun").ifNo("#Date").tag("#Person","n-acro-noun").lastTerm().tag("#LastName","n-acro-noun"),e.match("#FirstName [#Determiner? #Noun] #LastName").tag("#NickName","first-noun-last").tag("#Person","first-noun-last"),e.match("#FirstName (#Singular|#Possessive)").ifNo("#Date").ifNo("#NickName").tag("#Person","first-possessive").lastTerm().tag("#LastName","first-possessive")}return e.has("#LastName")&&(e.match("#Noun #LastName").firstTerm().canBe("#FirstName").tag("#FirstName","noun-lastname"),e.match("(will|may|april|june|said|rob|wade|ray|rusty|drew|miles|jack|chuck|randy|jan|pat|cliff|bill) #LastName").firstTerm().tag("#FirstName","maybe-lastname"),e.match("#TitleCase #Acronym? #LastName").ifNo("#Date").tag("#Person","title-acro-noun").lastTerm().tag("#LastName","title-acro-noun"),e.match("#Copula (#Noun|#PresentTense) #LastName").term(1).tag("#FirstName","copula-noun-lastname")),e.has("#TitleCase")&&(e.match("#Acronym #TitleCase").canBe("#Person").tag("#Person","acronym-titlecase"),e.match("#TitleCase (van|al|bin) #TitleCase").canBe("#Person").tag("Person","correction-titlecase-van-titlecase"),e.match("#TitleCase (de|du) la? #TitleCase").canBe("#Person").tag("Person","correction-titlecase-van-titlecase"),e.match("#Person #TitleCase").match("#TitleCase #Noun").canBe("#Person").tag("Person","correction-person-titlecase"),e.match("(lady|queen|sister) #TitleCase").ifNo("#Date").ifNo("#Honorific").tag("#FemaleName","lady-titlecase"),e.match("(king|pope|father) #TitleCase").ifNo("#Date").tag("#MaleName","correction-poe")),e.match("#Noun van der? #Noun").canBe("#Person").tag("#Person","von der noun"),e.match("(king|queen|prince|saint|lady) of? #Noun").canBe("#Person").tag("#Person","king-of-noun"),e.match("#Honorific #Acronym").tag("Person","Honorific-TitleCase"),e.match("#Person #Person the? #RomanNumeral").tag("Person","correction-roman-numeral"),e.match("#Honorific #Person").tag("Person","Honorific-Person"),e.match("^#Honorific$").unTag("Person","single-honorific"),e}},{}],117:[function(e,t){"use strict";let n=e("../../world/more-data/orgWords");const r=function(e){return!!e.tags.Noun&&(e.tags.Pronoun||e.tags.Comma||e.tags.Possessive||e.tags.Place?!1:e.tags.TitleCase||e.tags.Organization||e.tags.Acronym)};t.exports=(e)=>{for(let a=0,s;a<e.terms.length;a++)if(s=e.terms[a],!0===n.hasOwnProperty(s.root)){let t=e.terms[a-1];if(t&&r(t)){t.tag("Organization","org-word-1"),s.tag("Organization","org-word-2");continue}let n=e.terms[a+1];if(n&&"of"===n.normal&&e.terms[a+2]&&r(e.terms[a+2])){s.tag("Organization","org-of-word-1"),n.tag("Organization","org-of-word-2"),e.terms[a+2].tag("Organization","org-of-word-3");continue}}return e.has("#Acronym")&&(e.match("the #Acronym").not("(iou|fomo|yolo|diy|dui|nimby)").lastTerm().tag("Organization","the-acronym"),e.match("#Acronym").match("#Possessive").tag("Organization","possessive-acronym")),e}},{"../../world/more-data/orgWords":221}],118:[function(e,t){"use strict";t.exports=function(e){return e.terms.forEach((n,t)=>{if(n.tags.StartBracket)for(let n=t;n<e.terms.length;n+=1)if(!0===e.terms[n].tags.EndBracket){e.slice(t,n+1).tag("Parentheses");break}}),e}},{}],119:[function(e,t){"use strict";const n=e("../../subset/nouns/isPlural");t.exports=function(e){for(let r=0,a;r<e.terms.length;r++)if(a=e.terms[r],a.tags.Noun){if(a.tags.Singular||a.tags.Plural)continue;let e=n(a,a.world);!0===e?a.tag("Plural","pluralStep"):!1===e&&a.tag("Singular","pluralStep")}return e}},{"../../subset/nouns/isPlural":39}],120:[function(e,t){"use strict";const n=/^\$?[0-9,](\.[0-9])?/,r=/[0-9](st|nd|rd|th)$/;t.exports=function(e){for(let a=0,s;a<e.terms.length;a++)s=e.terms[a],!0===s.tags.Value&&void 0===s.tags.Ordinal&&void 0===s.tags.Cardinal&&(!0===n.test(s.normal)?(s.tag("Cardinal","cardinal-val-regex"),s.tag("NumericValue","NumericValue-regex")):!0===r.test(s.normal)&&(s.tag("Ordinal","ordinal-value-regex"),s.tag("NumericValue","NumericValue-regex")));return e.match("#Cardinal [#Plural]").tag("Unit","cardinal-plural"),e.match("#Ordinal [#Singular]").tag("Unit","ordinal-singular"),e.match("(one|first|1|1st) [#Singular]").tag("Unit","one-singular"),e}},{}],121:[function(e,t){"use strict";t.exports=function(e){if(e.has("so")&&(e.match("so #Adjective").match("so").tag("Adverb","so-adv"),e.match("so #Noun").match("so").tag("Conjunction","so-conj"),e.match("do so").match("so").tag("Noun","so-noun")),e.has("all")&&(e.match("[all] #Determiner? #Noun").tag("Adjective","all-noun"),e.match("[all] #Verb").tag("Adverb","all-verb")),e.has("(that|which)")&&(e.match("#Verb #Adverb? #Noun (that|which)").lastTerm().tag("Preposition","that-prep"),e.match("that #Noun #Verb").firstTerm().tag("Determiner","that-determiner"),e.match("#Comma [which] (#Pronoun|#Verb)").tag("Preposition","which-copula")),e.has("#Determiner")&&(e.match("(the|this) [#Verb] #Preposition .").tag("Noun","correction-determiner1"),e.match("(the|those|these) (#Infinitive|#PresentTense|#PastTense)").term(1).tag("Noun","correction-determiner2"),e.match("(a|an) [#Gerund]").tag("Adjective","correction-a|an"),e.match("(a|an) #Adjective (#Infinitive|#PresentTense)").term(2).tag("Noun","correction-a|an2"),e.match("some [#Verb] #Plural").tag("Noun","correction-determiner6"),e.match("#Determiner [#Infinitive] #Noun").tag("Noun","correction-determiner7"),e.match("#Determiner #Adjective$").not("(#Comparative|#Superlative)").term(1).tag("Noun","the-adj-1"),e.match("#Determiner [#Adjective] (#Copula|#PastTense|#Auxiliary)").tag("Noun","the-adj-2"),e.match("(the|this|those|these) #Adjective [#Verb]").tag("Noun","the-adj-verb"),e.match("(the|this|those|these) #Adverb #Adjective [#Verb]").tag("Noun","correction-determiner4"),e.match("(the|this|a|an) [#Infinitive] #Adverb? #Verb").tag("Noun","correction-determiner5"),e.match("#Determiner [#Verb] of").tag("Noun","the-verb-of"),e.match("#Determiner #Noun of [#Verb]").tag("Noun","noun-of-noun"),e.match("#Determiner #Adverb? [close]").tag("Adjective","a-close"),e.match("#Verb (a|an) [#Value]").tag("Singular","a-value"),e.match("(a|an) #Noun [#Infinitive]").tag("Noun","a-noun-inf")),e.has("like")&&(e.match("just [like]").tag("Preposition","like-preposition"),e.match("#Noun [like] #Noun").tag("Preposition","noun-like"),e.match("#Verb [like]").tag("Adverb","verb-like"),e.match("#Adverb like").not("(really|generally|typically|usually|sometimes|often) like").lastTerm().tag("Adverb","adverb-like")),e.has("#Value")&&(e.match("half a? #Value").tag("Value","half-a-value"),e.match("#Value and a (half|quarter)").tag("Value","value-and-a-half"),e.match("#Value+ #Currency").tag("Money","value-currency").lastTerm().tag("Unit","money-unit"),e.match("#Money and #Money #Currency?").tag("Money","money-and-money"),e.match("1 #Value #PhoneNumber").tag("PhoneNumber","1-800-Value"),e.match("#NumericValue #PhoneNumber").tag("PhoneNumber","(800) PhoneNumber"),e.match("#TextValue+").match("#Cardinal+ #Ordinal").tag("Ordinal","two-hundredth")),e.has("#Noun")&&(e.match("more #Noun").tag("Noun","more-noun"),e.match("[second] #Noun").not("#Honorific").unTag("Unit").tag("Ordinal","second-noun"),e.match("#Noun #Adverb [#Noun]").tag("Verb","correction"),e.match("#Noun [#Particle]").tag("Preposition","repair-noPhrasal"),e.match("#Noun (&|n) #Noun").tag("Organization","Noun-&-Noun"),e.match("#Noun #Actor").tag("Actor","thing-doer"),e.match("(this|that) [#Plural]").tag("PresentTense","this-verbs"),e.match("#Determiner #Infinitive$").lastTerm().tag("Noun","a-inf"),e.match("#Determiner [(western|eastern|northern|southern|central)] #Noun").tag("Noun","western-line"),e.match("(#Determiner|#Value) [(linear|binary|mobile|lexical|technical|computer|scientific|formal)] #Noun").tag("Noun","technical-noun"),e.has("#Organization")&&(e.match("#Organization of the? #TitleCase").tag("Organization","org-of-place"),e.match("#Organization #Country").tag("Organization","org-country"),e.match("(world|global|international|national|#Demonym) #Organization").tag("Organization","global-org")),e.has("#Possessive")&&(e.match("#Possessive [#FirstName]").unTag("Person","possessive-name"),e.match("#FirstName #Acronym? #Possessive").notIf("#Comma").match("#FirstName #Acronym? #LastName").tag("Possessive"),e.match("#Organization+ #Possessive").notIf("#Comma").tag("Possessive"),e.match("#Place+ #Possessive").notIf("#Comma").tag("Possessive"))),e.has("#Verb")){if(e.match("[still] #Verb").tag("Adverb","still-verb"),e.match("[u] #Verb").tag("Pronoun","u-pronoun-1"),e.match("is no [#Verb]").tag("Noun","is-no-verb"),e.match("[#Verb] than").tag("Noun","correction"),e.match("#Possessive [#Verb]").tag("Noun","correction-possessive"),e.match("there (are|were) #Adjective? [#PresentTense]").tag("Plural","there-are"),e.match("#Singular (seems|appears) #Adverb? [#PastTense$]").tag("Adjective","seems-filled"),e.has("(who|what|where|why|how|when)")){e.match("^how").tag("QuestionWord","how-question").tag("QuestionWord","how-question"),e.match("how (#Determiner|#Copula|#Modal|#PastTense)").term(0).tag("QuestionWord","how-is"),e.match("^which").tag("QuestionWord","which-question").tag("QuestionWord","which-question"),e.match("which . (#Noun)+ #Pronoun").term(0).tag("QuestionWord","which-question2"),e.match("which").tag("QuestionWord","which-question3");let t=e.match("#QuestionWord #Noun #Copula #Adverb? (#Verb|#Adjective)").firstTerm();t.unTag("QuestionWord").tag("Conjunction","how-he-is-x"),t=e.match("#QuestionWord #Noun #Adverb? #Infinitive not? #Gerund").firstTerm(),t.unTag("QuestionWord").tag("Conjunction","when i go fishing")}e.has("#Copula")&&(e.match("#Copula #Adjective to #Verb").match("#Adjective to").tag("Verb","correction"),e.match("#Copula [#Infinitive] #Noun").tag("Noun","is-pres-noun"),e.match("[#Infinitive] #Copula").tag("Noun","infinitive-copula"),e.match("#Copula (pretty|dead|full|well) (#Adjective|#Noun)").notIf("#Comma").tag("#Copula #Adverb #Adjective","sometimes-adverb"),e.match("#Copula [(just|alone)$]").tag("Adjective","not-adverb"),e.match("#Singular is #Adverb? [#PastTense$]").tag("Adjective","is-filled"));let t="(#Adverb|not)+?";e.has(t)&&(e.match(`(has|had) ${t} #PastTense`).not("#Verb$").tag("Auxiliary","had-walked"),e.match(`#Copula ${t} #Gerund`).not("#Verb$").tag("Auxiliary","copula-walking"),e.match(`(be|been) ${t} #Gerund`).not("#Verb$").tag("Auxiliary","be-walking"),e.match(`(#Modal|did) ${t} #Verb`).not("#Verb$").tag("Auxiliary","modal-verb"),e.match(`#Modal ${t} have ${t} had ${t} #Verb`).not("#Verb$").tag("Auxiliary","would-have"),e.match(`(#Modal) ${t} be ${t} #Verb`).not("#Verb$").tag("Auxiliary","would-be"),e.match(`(#Modal|had|has) ${t} been ${t} #Verb`).not("#Verb$").tag("Auxiliary","would-be")),e.match("#PhrasalVerb #PhrasalVerb").lastTerm().tag("Particle","phrasal-particle"),e.has("#Gerund")&&(e.match("#Gerund #Adverb? not? #Copula").firstTerm().tag("Activity","gerund-copula"),e.match("#Gerund #Modal").firstTerm().tag("Activity","gerund-modal"),e.match("#Gerund #Determiner [#Infinitive]").tag("Noun","running-a-show")),e.has("will #Adverb? not? #Adverb? be")&&!1===e.has("will #Adverb? not? #Adverb? be #Gerund")&&(e.match("will not? be").tag("Copula","will-be-copula"),e.match("will #Adverb? not? #Adverb? be #Adjective").match("be").tag("Copula","be-copula"))}if(e.has("#Adjective")&&(e.match("still #Adjective").match("still").tag("Adverb","still-advb"),e.match("#Adjective [#PresentTense]").tag("Noun","adj-presentTense"),e.match("will [#Adjective]").tag("Verb","will-adj"),e.match("#PresentTense (hard|quick|long|bright|slow)").lastTerm().tag("Adverb","lazy-ly"),e.match("(his|her|its) [#Adjective]").tag("Noun","his-fine"),e.match("#Noun #Adverb? [left]").tag("PastTense","left-verb")),e.has("#TitleCase")&&(e.match("#TitleCase (ltd|co|inc|dept|assn|bros)").tag("Organization","org-abbrv"),e.match("#TitleCase+ (district|region|province|county|prefecture|municipality|territory|burough|reservation)").tag("Region","foo-district"),e.match("(district|region|province|municipality|territory|burough|state) of #TitleCase").tag("Region","district-of-Foo")),e.has("#Hyphenated")){e.match("#Hyphenated #Hyphenated").match("#Noun #Verb").tag("Noun","hyphen-verb");let t=e.match("#Hyphenated+");t.has("#Expression")&&t.tag("Expression","ooh-wee")}return e.has("#Place")&&(e.match("(west|north|south|east|western|northern|southern|eastern)+ #Place").tag("Region","west-norfolk"),e.match("#City [#Acronym]").match("(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|or|pa|sc|tn|tx|ut|vt|pr)").tag("Region","us-state")),e.match("(foot|feet)").tag("Noun","foot-noun"),e.match("#Value (foot|feet)").term(1).tag("Unit","foot-unit"),e.match("#Conjunction [u]").tag("Pronoun","u-pronoun-2"),e.match("(a|an) (#Duration|hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)").ifNo("#Plural").term(0).tag("Value","a-is-one"),e.match("holy (shit|fuck|hell)").tag("Expression","swears-expression"),e.match("#Determiner (shit|damn|hell)").term(1).tag("Noun","swears-noun"),e.match("(shit|damn|fuck) (#Determiner|#Possessive|them)").term(0).tag("Verb","swears-verb"),e.match("#Copula fucked up?").not("#Copula").tag("Adjective","swears-adjective"),e.match("#Holiday (day|eve)").tag("Holiday","holiday-day"),e.match("(standard|daylight|summer|eastern|pacific|central|mountain) standard? time").tag("Time","timezone"),e.match("#Demonym #Currency").tag("Currency","demonym-currency"),e.match("about to #Adverb? #Verb").match("about to").tag(["Auxiliary","Verb"],"about-to"),e.match("#Honorific #Person").tag("Person","honorific-person"),e.match("#Person (jr|sr|md)").tag("Person","person-honorific"),e.match("(right|rights) of .").tag("Noun","right-of"),e}},{}],122:[function(e,t){t.exports=function(e){return!0===e.has("#Person")&&(e.match("#FirstName #Person+").tag("ProperNoun"),e.match("#Person+ #LastName").tag("ProperNoun")),!0===e.has("#Place")&&e.match("(#City|#Region|#Country)").tag("ProperNoun"),e.match("#Organization").tag("ProperNoun"),e.match("#Month").tag("ProperNoun"),e}},{}],123:[function(e,t){t.exports=function(e){const t=e.world.patterns;return Object.keys(t).forEach((n)=>{e.match(n).tag(t[n],"post-hoc: "+n)}),e}},{}],124:[function(e,t){"use strict";const n=e("./fix"),r={wanna:["want","to"],gonna:["going","to"],im:["i","am"],alot:["a","lot"],dont:["do","not"],dun:["do","not"],ive:["i","have"],"won't":["will","not"],wont:["will","not"],"can't":["can","not"],cant:["can","not"],cannot:["can","not"],"shan't":["should","not"],imma:["I","will"],"where'd":["where","did"],whered:["where","did"],"when'd":["when","did"],whend:["when","did"],"how'd":["how","did"],howd:["how","did"],"what'd":["what","did"],whatd:["what","did"],"let's":["let","us"],dunno:["do","not","know"],brb:["be","right","back"],gtg:["got","to","go"],irl:["in","real","life"],tbh:["to","be","honest"],imo:["in","my","opinion"],til:["today","i","learned"],rn:["right","now"],twas:["it","was"],"@":["at"]};t.exports=(e)=>{for(let a=0,s;a<e.terms.length;a++)if(s=e.terms[a],r[s.normal]){let t=r[s.normal];e=n(e,t,a),a+=t.length-1}return e}},{"./fix":128}],125:[function(e,t){"use strict";const n=e("./fix"),r=e("./split"),a={"that's":!0,"there's":!0},s={we:!0,they:!0,you:!0},o=(e,n)=>{let r=e.terms[n],t=e.terms[n+1];return r.tags.Pronoun||r.tags.QuestionWord?!1:!a[r.normal]&&(!t||!!t.tags.Infinitive||!t.tags.VerbPhrase&&(!!t.tags.Noun||t.tags.Adjective&&e.terms[n+2]&&e.terms[n+2].tags.Noun||(t.tags.Adjective||t.tags.Adverb||t.tags.Verb)&&!1))},l=function(e,t){let n=["is","not"];if(e.terms[t-1]){let r=e.terms[t-1];r.tags.Adverb&&e.terms[t-2]&&(r=e.terms[t-2]),(r.tags.Plural||!0===s[r.normal])&&(n[0]="are")}return n};t.exports=(e)=>{for(let t=0;t<e.terms.length;t++){if(e.terms[t].silent_term)continue;if("ain't"===e.terms[t].normal||"aint"===e.terms[t].normal){let r=l(e,t);e=n(e,r,t),t+=1;continue}let a=r(e.terms[t]);if(a&&"s"===a.end){if(o(e,t)){e.terms[t].tag("#Possessive","hard-contraction");continue}let r=[a.start,"is"];if(e.terms[t+1]){let n=e.terms[t].normal;e.match(n+" (#Negative|#Adverb|#Auxiliary)+? #Gerund").found?r=[a.start,"is"]:e.match(n+" (#Negative|#Adverb|#Auxiliary)+? #Verb").found&&(r=[a.start,"has"])}e=n(e,r,t),t+=1}}return e}},{"./fix":128,"./split":129}],126:[function(e,t){"use strict";const n=e("./fix"),r=e("./split"),a={ll:"will",ve:"have",re:"are",m:"am","n't":"not"};t.exports=(e)=>{for(let t=0;t<e.terms.length;t++){if(e.terms[t].silent_term)continue;let s=r(e.terms[t]);if(s){if(s.start=s.start.toLowerCase(),a[s.end]){let r=[s.start,a[s.end]];e=n(e,r,t),t+=1}if("d"===s.end){let r=[s.start,"would"];e.terms[t+1]&&e.terms[t+1].tags.PastTense&&(r[1]="had"),e.terms[t+2]&&e.terms[t+2].tags.PastTense&&e.terms[t+1].tags.Adverb&&(r[1]="had"),e=n(e,r,t),t+=1}}}return e}},{"./fix":128,"./split":129}],127:[function(e,t){"use strict";const n=e("./fix"),r=e("../../../term"),a=function(e){let t=/(-|–|—)/;return t.test(e.whitespace.before)||t.test(e.whitespace.after)};t.exports=(e)=>{e.match("#Hyphenated #Hyphenated").match("#NumericValue #NumericValue").tag("NumberRange");for(let s=0,o;s<e.terms.length;s++)if((o=e.terms[s],!o.silent_term)&&!o.tags.TextValue){if(o.tags.Value&&e.terms[s+1]&&0<s&&(a(o)||a(e.terms[s-1]))&&e.terms[s-1].tags.Value){let t=new r("",e.world);return t.silent_term="to",e.insertAt(s,t),e.terms[s-1].tag("NumberRange","number-number1"),e.terms[s].tag("NumberRange","number-number2"),e.terms[s].whitespace.before="",e.terms[s].whitespace.after="",e.terms[s+1].tag("NumberRange","number-number3"),e}if(o.tags.NumberRange){let t=o.text.split(/(-|–|—)/);t[1]="to",e=n(e,t,s),e.terms[s].tag(["NumberRange","NumericValue"],"numRange-1"),e.terms[s+1].tag(["NumberRange","Preposition"],"numRange-silent"),e.terms[s+2].tag(["NumberRange","NumericValue"],"numRange-3"),s+=2}}return e}},{"../../../term":143,"./fix":128}],128:[function(e,t){"use strict";const n=e("../../../term"),r={not:"Negative",will:"Verb",would:"Modal",have:"Verb",are:"Copula",is:"Copula",am:"Verb"},a=(e)=>{r[e.silent_term]&&e.tag(r[e.silent_term])};t.exports=(e,t,r)=>{let s=e.terms[r];if(s.silent_term=t[0],s.tag("Contraction","tagger-contraction"),t[1]){let s=new n("",e.world);s.silent_term=t[1],s.tag("Contraction","tagger-contraction"),e.insertAt(r+1,s),s.whitespace.before="",s.whitespace.after="",a(s)}if(t[2]){let s=new n("",e.world);s.silent_term=t[2],e.insertAt(r+2,s),s.tag("Contraction","tagger-contraction"),a(s)}return e}},{"../../../term":143}],129:[function(e,t){"use strict";const n=/^([a-z]+)'([a-z][a-z]?)$/i,r=/[a-z]s'$/i,a={re:1,ve:1,ll:1,t:1,s:1,d:1,m:1};t.exports=(e)=>{if("can't"===e.normal)return{start:"can",end:"n't"};let t=e.normal.match(n);return t&&t[1]&&1===a[t[2]]?("t"===t[2]&&t[1].match(/[a-z]n$/)&&(t[1]=t[1].replace(/n$/,""),t[2]="n't"),!0===e.tags.TitleCase&&(t[1]=t[1].replace(/^[a-z]/,(e)=>e.toUpperCase())),{start:t[1],end:t[2]}):!0===r.test(e.text)?{start:e.normal.replace(/s'?$/,""),end:""}:null}},{}],130:[function(e,t){t.exports=/(?:0\u20E3\n1\u20E3|2\u20E3|3\u20E3|4\u20E3|5\u20E3|6\u20E3|7\u20E3|8\u20E3|9\u20E3|#\u20E3|\*\u20E3|\uD83C(?:\uDDE6\uD83C(?:\uDDE8|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDEE|\uDDF1|\uDDF2|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFC|\uDDFD|\uDDFF)|\uDDE7\uD83C(?:\uDDE6|\uDDE7|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDEF|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFB|\uDDFC|\uDDFE|\uDDFF)|\uDDE8\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF5|\uDDF7|\uDDFA|\uDDFB|\uDDFC|\uDDFD|\uDDFE|\uDDFF)|\uDDE9\uD83C(?:\uDDEA|\uDDEC|\uDDEF|\uDDF0|\uDDF2|\uDDF4|\uDDFF)|\uDDEA\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEC|\uDDED|\uDDF7|\uDDF8|\uDDF9|\uDDFA)|\uDDEB\uD83C(?:\uDDEE|\uDDEF|\uDDF0|\uDDF2|\uDDF4|\uDDF7)|\uDDEC\uD83C(?:\uDDE6|\uDDE7|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDF1|\uDDF2|\uDDF3|\uDDF5|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFC|\uDDFE)|\uDDED\uD83C(?:\uDDF0|\uDDF2|\uDDF3|\uDDF7|\uDDF9|\uDDFA)|\uDDEE\uD83C(?:\uDDE8|\uDDE9|\uDDEA|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9)|\uDDEF\uD83C(?:\uDDEA|\uDDF2|\uDDF4|\uDDF5)|\uDDF0\uD83C(?:\uDDEA|\uDDEC|\uDDED|\uDDEE|\uDDF2|\uDDF3|\uDDF5|\uDDF7|\uDDFC|\uDDFE|\uDDFF)|\uDDF1\uD83C(?:\uDDE6|\uDDE7|\uDDE8|\uDDEE|\uDDF0|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFB|\uDDFE)|\uDDF2\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF5|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFB|\uDDFC|\uDDFD|\uDDFE|\uDDFF)|\uDDF3\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEB|\uDDEC|\uDDEE|\uDDF1|\uDDF4|\uDDF5|\uDDF7|\uDDFA|\uDDFF)|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C(?:\uDDE6|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF7|\uDDF8|\uDDF9|\uDDFC|\uDDFE)|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C(?:\uDDEA|\uDDF4|\uDDF8|\uDDFA|\uDDFC)|\uDDF8\uD83C(?:\uDDE6|\uDDE7|\uDDE8|\uDDE9|\uDDEA|\uDDEC|\uDDED|\uDDEE|\uDDEF|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF7|\uDDF8|\uDDF9|\uDDFB|\uDDFD|\uDDFE|\uDDFF)|\uDDF9\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEB|\uDDEC|\uDDED|\uDDEF|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF7|\uDDF9|\uDDFB|\uDDFC|\uDDFF)|\uDDFA\uD83C(?:\uDDE6|\uDDEC|\uDDF2|\uDDF8|\uDDFE|\uDDFF)|\uDDFB\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEC|\uDDEE|\uDDF3|\uDDFA)|\uDDFC\uD83C(?:\uDDEB|\uDDF8)|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C(?:\uDDEA|\uDDF9)|\uDDFF\uD83C(?:\uDDE6|\uDDF2|\uDDFC)))|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2694\u2696\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD79\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED0\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3]|\uD83E[\uDD10-\uDD18\uDD80-\uDD84\uDDC0]/g},{}],131:[function(e,t){t.exports={":(":!0,":)":!0,":P":!0,":p":!0,":O":!0,":3":!0,":|":!0,":/":!0,":\\":!0,":$":!0,":*":!0,":@":!0,":-(":!0,":-)":!0,":-P":!0,":-p":!0,":-O":!0,":-3":!0,":-|":!0,":-/":!0,":-\\":!0,":-$":!0,":-*":!0,":-@":!0,":^(":!0,":^)":!0,":^P":!0,":^p":!0,":^O":!0,":^3":!0,":^|":!0,":^/":!0,":^\\":!0,":^$":!0,":^*":!0,":^@":!0,"):":!0,"(:":!0,"$:":!0,"*:":!0,")-:":!0,"(-:":!0,"$-:":!0,"*-:":!0,")^:":!0,"(^:":!0,"$^:":!0,"*^:":!0,"<3":!0,"</3":!0,"<\\3":!0}},{}],132:[function(e,t){"use strict";t.exports={beforeThisWord:{there:"Verb",me:"Verb",man:"Adjective",only:"Verb",him:"Verb",were:"Noun",took:"Noun",himself:"Verb",went:"Noun",who:"Noun",jr:"Person"},afterThisWord:{i:"Verb",first:"Noun",it:"Verb",there:"Verb",not:"Verb",because:"Noun",if:"Noun",but:"Noun",who:"Verb",this:"Noun",his:"Noun",when:"Noun",you:"Verb",very:"Adjective",old:"Noun",never:"Verb",before:"Noun"},beforeThisPos:{Copula:"Noun",PastTense:"Noun",Conjunction:"Noun",Modal:"Noun",PluperfectTense:"Noun",PerfectTense:"Verb"},afterThisPos:{Adjective:"Noun",Possessive:"Noun",Determiner:"Noun",Adverb:"Verb",Pronoun:"Verb",Value:"Noun",Ordinal:"Noun",Modal:"Verb",Superlative:"Noun",Demonym:"Noun",Honorific:"Person"}}},{}],133:[function(e,t){"use strict";const n="Adjective",r="Infinitive",a="Singular",s="PastTense",o="Adverb",i="Expression",l="Actor",d="Verb",u="Noun",m="LastName";t.exports={a:[[/.[aeiou]na$/,u],[/.[oau][wvl]ska$/,m],[/.[^aeiou]ica$/,a],[/^([hyj]a)+$/,i]],c:[[/.[^aeiou]ic$/,n]],d:[[/.[ia]sed$/,n],[/.[gt]led$/,n],[/.[aeiou][td]ed$/,s],[/.[^aeiou]led$/,s],[/[^aeiou]ard$/,a],[/[aeiou][^aeiou]id$/,n],[/[aeiou]c?ked$/,s],[/[^aeiou][aeiou][tvx]ed$/,s],[/[aeiou]red$/,s],[/.[vrl]id$/,n]],e:[[/.[lnr]ize$/,r],[/.[^aeiou]ise$/,r],[/.[aeiou]te$/,r],[/.[^aeiou][ai]ble$/,n],[/.[^aeiou]eable$/,n],[/.[^aeiou]ive$/,n]],h:[[/.[^aeiouf]ish$/,n],[/.v[iy]ch$/,m],[/^ug?h+$/,i],[/^uh[ -]?oh$/,i]],i:[[/.[oau][wvl]ski$/,m]],k:[[/^(k)+$/,i]],l:[[/.[gl]ial$/,n],[/.[^aeiou]ful$/,n],[/.[nrtumcd]al$/,n],[/.[^aeiou][ei]al$/,n]],m:[[/.[^aeiou]ium$/,a],[/[^aeiou]ism$/,a],[/^h*u*m+$/,i],[/^\d+ ?[ap]m$/,"Date"]],n:[[/.[lsrnpb]ian$/,n],[/[^aeiou]ician$/,l],[/okin$/,"Gerund"]],o:[[/^no+$/,i],[/^(yo)+$/,i],[/^woo+[pt]?$/,i]],r:[[/.[ilk]er$/,"Comparative"],[/[aeiou][pns]er$/,a],[/[^i]fer$/,r],[/.[^aeiou][ao]pher$/,l]],t:[[/.[di]est$/,"Superlative"],[/.[icldtgrv]ent$/,n],[/[aeiou].*ist$/,n],[/^[a-z]et$/,d]],s:[[/.[rln]ates$/,"PresentTense"],[/.[^z]ens$/,d],[/.[lstrn]us$/,a],[/[aeiou][^aeiou]is$/,a],[/[a-z]\'s$/,u],[/^yes+$/,i]],v:[[/.[^aeiou][ai][kln]ov$/,m]],y:[[/.[cts]hy$/,n],[/.[st]ty$/,n],[/.[gk]y$/,n],[/.[tnl]ary$/,n],[/.[oe]ry$/,a],[/[rdntkbhs]ly$/,o],[/...lly$/,o],[/[bszmp]{2}y$/,n],[/.(gg|bb|zz)ly$/,n],[/.[aeiou]my$/,n],[/[ea]{2}zy$/,n],[/.[^aeiou]ity$/,a]]}},{}],134:[function(e,t){"use strict";const n="Adjective",r="Infinitive",a="PresentTense",s="Singular",o="PastTense",i="Adverb",l="Plural",d="Actor",u="Verb",m="Noun",c="LastName",h="Modal";t.exports=[null,null,{ea:s,ia:m,ic:n,ly:i,"'n":u,"'t":u},{que:n,lar:n,ike:n,ffy:n,nny:n,rmy:n,azy:n,oid:n,mum:n,ous:n,end:u,sis:s,rol:s,ize:r,ify:r,zes:a,nes:a,ing:"Gerund"," so":i,"'ll":h,"'re":"Copula"},{teen:"Value",tors:m,amed:o,ched:o,ends:u,oses:a,fies:a,ects:a,nded:o,cede:r,tage:r,gate:r,vice:s,tion:s,cted:o,ette:s,some:n,llen:n,ried:n,gone:n,made:n,fore:i,less:i,ices:l,ions:l,ints:l,aped:o,lked:o,ould:h,tive:d,sson:c,czyk:c,chuk:c,enko:c,akis:c,nsen:c},{fully:i,where:i,wards:i,urned:o,tized:o,eased:o,ances:l,tures:l,ports:l,ettes:l,ities:l,rough:n,bound:n,tieth:"Ordinal",ishes:a,tches:a,nssen:c,marek:c},{keeper:d,logist:d,auskas:c,teenth:"Value"},{sdottir:c,opoulos:c}]},{}],135:[function(e,t){"use strict";t.exports=function(e){const t=Object.keys(e);t.forEach((n)=>{e[n].downward=[];for(let r=0;r<t.length;r++)e[t[r]].isA&&e[t[r]].isA===n&&e[n].downward.push(t[r])})}},{}],136:[function(e,t){"use strict";t.exports=[["Noun","Verb","Adjective","Adverb","Determiner","Conjunction","Preposition","QuestionWord","Expression","Url","PhoneNumber","Email","Emoji"],["Person","Organization","Value","Place","Actor","Demonym","Pronoun"],["Acronym","Pronoun","Actor","Unit","Address"],["Acronym","Plural"],["Plural","Singular"],["MaleName","FemaleName"],["FirstName","LastName","Honorific"],["Comparative","Superlative"],["Value","Verb","Adjective"],["Ordinal","Cardinal"],["TextValue","NumericValue"],["NiceNumber","TextValue"],["Ordinal","Currency"],["PastTense","PresentTense","FutureTense"],["Pluperfect","Copula","Modal","Participle","Infinitive","Gerund","FuturePerfect","PerfectTense"],["Auxiliary","Noun","Value"],["Month","WeekDay","Year","Duration","Holiday"],["Particle","Conjunction","Adverb","Preposition"],["Date","Verb","Adjective","Person"],["Date","Money","RomanNumeral","Fraction"],["Value","Determiner"],["Url","Value","HashTag","PhoneNumber","Emoji"],["RomanNumeral","Fraction","NiceNumber"],["RomanNumeral","Money"],["UpperCase","TitleCase","CamelCase"],["VerbPhrase","Noun","Adjective","Value"],["QuestionWord","VerbPhrase"],["Acronym","VerbPhrase"]]},{}],137:[function(e,t){"use strict";const n=e("./conflicts"),r=e("./tags/nouns"),a=e("./tags/verbs"),s=e("./tags/values"),o=e("./tags/dates"),i=e("./tags/misc"),l=e("./addDownward"),d={Noun:"blue",Date:"red",Value:"red",Verb:"green",Auxiliary:"green",Negative:"green",VerbPhrase:"green",Preposition:"cyan",Condition:"cyan",Conjunction:"cyan",Determiner:"cyan",Adjective:"magenta",Adverb:"cyan"},u=function(e,t){Object.keys(e).forEach((n)=>{t[n]=e[n]})},m=function(t){Object.keys(t).forEach((r)=>{t[r].notA={};for(let e=0,a;e<n.length;e++)a=n[e],-1!==a.indexOf(r)&&(a=a.filter((e)=>e!==r),a.forEach((n)=>{t[r].notA[n]=!0}));t[r].notA=Object.keys(t[r].notA)})},c=function(e){Object.keys(e).forEach((t)=>{return d[t]?void(e[t].color=d[t]):e[t].isA&&d[e[t].isA]?void(e[t].color=d[e[t].isA]):void(e[t].isA&&e[e[t].isA].color&&(e[t].color=e[e[t].isA].color))})};t.exports=(()=>{let e={};return u(r,e),u(a,e),u(s,e),u(o,e),u(i,e),l(e),m(e),c(e),e})()},{"./addDownward":135,"./conflicts":136,"./tags/dates":138,"./tags/misc":139,"./tags/nouns":140,"./tags/values":141,"./tags/verbs":142}],138:[function(e,t){t.exports={Date:{},Month:{isA:"Date",also:"Singular"},WeekDay:{isA:"Date",also:"Noun"},RelativeDay:{isA:"Date"},Year:{isA:"Date"},Duration:{isA:"Date",also:"Noun"},Time:{isA:"Date",also:"Noun"},Holiday:{isA:"Date",also:"Noun"}}},{}],139:[function(e,t){t.exports={Adjective:{},Comparable:{isA:"Adjective"},Comparative:{isA:"Adjective"},Superlative:{isA:"Adjective"},NumberRange:{isA:"Contraction"},Adverb:{},Currency:{},Determiner:{},Conjunction:{},Preposition:{},QuestionWord:{},RelativeProunoun:{isA:"Pronoun"},Expression:{},Abbreviation:{},Url:{},PhoneNumber:{},HashTag:{},AtMention:{is:"Noun"},Emoji:{},Email:{},Condition:{},VerbPhrase:{},Auxiliary:{},Negative:{},Contraction:{},TitleCase:{},CamelCase:{},UpperCase:{},Hyphenated:{},Acronym:{},ClauseEnd:{},Quotation:{},StartQuotation:{isA:"Quotation"},EndQuotation:{isA:"Quotation"},Parentheses:{},EndBracket:{isA:"Parentheses"},StartBracket:{isA:"Parentheses"}}},{}],140:[function(e,t){t.exports={Noun:{},Singular:{isA:"Noun"},ProperNoun:{isA:"Noun"},Person:{isA:"Singular"},FirstName:{isA:"Person"},MaleName:{isA:"FirstName"},FemaleName:{isA:"FirstName"},LastName:{isA:"Person"},Honorific:{isA:"Noun"},Place:{isA:"Singular"},Country:{isA:"Place"},City:{isA:"Place"},Region:{isA:"Place"},Address:{isA:"Place"},Organization:{isA:"Singular"},SportsTeam:{isA:"Organization"},Company:{isA:"Organization"},School:{isA:"Organization"},Plural:{isA:"Noun"},Uncountable:{isA:"Noun"},Pronoun:{isA:"Noun"},Actor:{isA:"Noun"},Activity:{isA:"Noun"},Unit:{isA:"Noun"},Demonym:{isA:"Noun"},Possessive:{isA:"Noun"}}},{}],141:[function(e,t){t.exports={Value:{},Ordinal:{isA:"Value"},Cardinal:{isA:"Value"},Multiple:{isA:"Value"},RomanNumeral:{isA:"Cardinal"},Fraction:{isA:"Value"},TextValue:{isA:"Value"},NumericValue:{isA:"Value"},NiceNumber:{isA:"Value"},Money:{},Percent:{isA:"Value"}}},{}],142:[function(e,t){t.exports={Verb:{isA:"VerbPhrase"},PresentTense:{isA:"Verb"},Infinitive:{isA:"PresentTense"},Gerund:{isA:"PresentTense"},PastTense:{isA:"Verb"},PerfectTense:{isA:"Verb"},FuturePerfect:{isA:"Verb"},Pluperfect:{isA:"Verb"},Copula:{isA:"Verb"},Modal:{isA:"Verb"},Participle:{isA:"Verb"},Particle:{isA:"Verb"},PhrasalVerb:{isA:"Verb"}}},{}],143:[function(e,t){"use strict";const n=e("./paths").fns,r=e("./whitespace"),a=e("./makeUID"),s=e("./methods/normalize/normalize").addNormal,o=e("./methods/normalize/root"),i=function(e,t){this.tags={},this._text=n.ensureString(e),Object.defineProperty(this,"world",{enumerable:!1,value:t});let i=r(this._text);this.whitespace=i.whitespace,this._text=i.text,this.parent=null,this.silent_term="",this.lumped=!1,s(this),o(this),this.dirty=!1,this.uid=a(this.normal),Object.defineProperty(this,"text",{get:function(){return this._text},set:function(e){e=e||"",this._text=e.trim(),this.dirty=!0,this.normalize()}}),Object.defineProperty(this,"isA",{get:function(){return"Term"}})};i.prototype.normalize=function(){return s(this),o(this),this},i.prototype.index=function(){let e=this.parentTerms;return e?e.terms.indexOf(this):null},i.prototype.clone=function(){let e=new i(this._text,this.world);return e.tags=n.copy(this.tags),e.whitespace=n.copy(this.whitespace),e.silent_term=this.silent_term,e},e("./methods/misc")(i),e("./methods/out")(i),e("./methods/tag")(i),e("./methods/case")(i),e("./methods/punctuation")(i),t.exports=i},{"./makeUID":144,"./methods/case":146,"./methods/misc":147,"./methods/normalize/normalize":149,"./methods/normalize/root":150,"./methods/out":153,"./methods/punctuation":156,"./methods/tag":158,"./paths":161,"./whitespace":162}],144:[function(e,t){"use strict";t.exports=(e)=>{let t="";for(let n=0;5>n;n++)t+=parseInt(9*Math.random(),10);return e+"-"+t}},{}],145:[function(e,t){"use strict";const n={Auxiliary:1,Possessive:1,TitleCase:1,ClauseEnd:1,Comma:1,CamelCase:1,UpperCase:1,Hyphenated:1,VerbPhrase:1,EndBracket:1,StartBracket:1,Parentheses:1,Quotation:1};t.exports=function(e){const t=e.world.tags;let r=Object.keys(e.tags);return r=r.sort(),r=r.sort((e,r)=>{return t[e]?n[r]||!t[r]?-1:t[e].downward.length>t[r].downward.length?1:1:1}),r[0]}},{}],146:[function(e,t){"use strict";t.exports=(e)=>{const t={toUpperCase:function(){return this.text=this._text.toUpperCase(),this.tag("#UpperCase","toUpperCase"),this},toLowerCase:function(){return this.text=this._text.toLowerCase(),this.unTag("#TitleCase"),this.unTag("#UpperCase"),this},toTitleCase:function(){return this.text=this._text.replace(/^ *[a-z]/,(e)=>e.toUpperCase()),this.tag("#TitleCase","toTitleCase"),this},needsTitleCase:function(){const e=["Person","Place","Organization","Acronym","UpperCase","Currency","RomanNumeral","Month","WeekDay","Holiday","Demonym"];for(let t=0;t<e.length;t++)if(this.tags[e[t]])return!0;const t=["i","god","allah"];for(let e=0;e<t.length;e++)if(this.normal===t[e])return!0;return!1}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{}],147:[function(e,t){"use strict";const n=e("./normalize/isAcronym"),r=e("./bestTag"),a=/[aeiouy]/i,s=/[a-z]/,o=/[0-9]/;t.exports=(e)=>{const t={bestTag:function(){return r(this)},isAcronym:function(){return n(this._text)},isWord:function(){let e=this;return!!e.silent_term||!1!==/[a-z|A-Z|0-9]/.test(e.text)&&(3<e.normal.length&&!0===s.test(e.normal)&&!1===a.test(e.normal)&&!1===e.isAcronym()?!1:!0===o.test(e.normal)&&!1===e.tags.hasOwnProperty("Value")&&!0===/[a-z][0-9][a-z]/.test(e.normal)?!1:!0)}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"./bestTag":145,"./normalize/isAcronym":148}],148:[function(e,t){"use strict";const n=/([A-Z]\.)+[A-Z]?,?$/,r=/^[A-Z]\.,?$/,a=/[A-Z]{2}('s|,)?$/;t.exports=function(e){return!(!0!==n.test(e))||!(!0!==r.test(e))||!(!0!==a.test(e))}},{}],149:[function(e,t,n){"use strict";const r=e("./unicode"),a=e("./isAcronym");n.normalize=function(e){e=e||"",e=e.toLowerCase(),e=e.trim();let t=e;return e=r(e),e=e.replace(/^[#@]/,""),e=e.replace(/[,;.!?]+$/,""),e=e.replace(/[\u0027\u0060\u00B4\u2018\u2019\u201A\u201B\u2032\u2035\u2039\u203A]+/g,"'"),e=e.replace(/[\u0022\u00AB\u00BB\u201C\u201D\u201E\u201F\u2033\u2034\u2036\u2037\u2E42\u301D\u301E\u301F\uFF02]+/g,"\""),e=e.replace(/\u2026/g,"..."),e=e.replace(/\u2013/g,"-"),!0===/[a-z][^aeiou]in['’]$/.test(e)&&(e=e.replace(/in['’]$/,"ing")),!0===/^(re|un)-?[^aeiou]./.test(e)&&(e=e.replace("-","")),!1===/^[:;]/.test(e)&&(e=e.replace(/\.{3,}$/g,""),e=e.replace(/['",\.!:;\?\)]+$/g,""),e=e.replace(/^['"\(]+/g,"")),e=e.trim(),""===e&&(e=t),e},n.addNormal=function(e){let t=e._text||"";t=n.normalize(t),a(e._text)&&(t=t.replace(/\./g,"")),t=t.replace(/([0-9]),([0-9])/g,"$1$2"),e.normal=t}},{"./isAcronym":148,"./unicode":151}],150:[function(e,t){"use strict";t.exports=function(e){let t=e.normal||e.silent_term||"";t=t.replace(/'s\b/,""),t=t.replace(/'$/,""),e.root=t}},{}],151:[function(e,t){"use strict";let n={"!":"\xA1","?":"\xBF\u0241",'"':"\u201C\u201D\"\u275D\u275E","'":"\u2018\u201B\u275B\u275C","-":"\u2014\u2013",a:"\xAA\xC0\xC1\xC2\xC3\xC4\xC5\xE0\xE1\xE2\xE3\xE4\xE5\u0100\u0101\u0102\u0103\u0104\u0105\u01CD\u01CE\u01DE\u01DF\u01E0\u01E1\u01FA\u01FB\u0200\u0201\u0202\u0203\u0226\u0227\u023A\u0386\u0391\u0394\u039B\u03AC\u03B1\u03BB\u0410\u0414\u0430\u0434\u0466\u0467\u04D0\u04D1\u04D2\u04D3\u019B\u0245\xE6",b:"\xDF\xFE\u0180\u0181\u0182\u0183\u0184\u0185\u0243\u0392\u03B2\u03D0\u03E6\u0411\u0412\u042A\u042C\u0431\u0432\u044A\u044C\u0462\u0463\u048C\u048D\u0494\u0495\u01A5\u01BE",c:"\xA2\xA9\xC7\xE7\u0106\u0107\u0108\u0109\u010A\u010B\u010C\u010D\u0186\u0187\u0188\u023B\u023C\u037B\u037C\u037D\u03F2\u03F9\u03FD\u03FE\u03FF\u0404\u0421\u0441\u0454\u0480\u0481\u04AA\u04AB",d:"\xD0\u010E\u010F\u0110\u0111\u0189\u018A\u0221\u018B\u018C\u01F7",e:"\xC8\xC9\xCA\xCB\xE8\xE9\xEA\xEB\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011A\u011B\u018E\u018F\u0190\u01DD\u0204\u0205\u0206\u0207\u0228\u0229\u0246\u0247\u0388\u0395\u039E\u03A3\u03AD\u03B5\u03BE\u03F1\u03F5\u03F6\u0400\u0401\u0415\u042D\u0435\u0450\u0451\u04BC\u04BD\u04BE\u04BF\u04D6\u04D7\u04D8\u04D9\u04DA\u04DB\u04EC\u04ED",f:"\u0191\u0192\u03DC\u03DD\u04FA\u04FB\u0492\u0493\u04F6\u04F7\u017F",g:"\u011C\u011D\u011E\u011F\u0120\u0121\u0122\u0123\u0193\u01E4\u01E5\u01E6\u01E7\u01F4\u01F5",h:"\u0124\u0125\u0126\u0127\u0195\u01F6\u021E\u021F\u0389\u0397\u0402\u040A\u040B\u041D\u043D\u0452\u045B\u04A2\u04A3\u04A4\u04A5\u04BA\u04BB\u04C9\u04CA",I:"\xCC\xCD\xCE\xCF",i:"\xEC\xED\xEE\xEF\u0128\u0129\u012A\u012B\u012C\u012D\u012E\u012F\u0130\u0131\u0196\u0197\u0208\u0209\u020A\u020B\u038A\u0390\u03AA\u03AF\u03B9\u03CA\u0406\u0407\u0456\u0457",j:"\u0134\u0135\u01F0\u0237\u0248\u0249\u03F3\u0408\u0458",k:"\u0136\u0137\u0138\u0198\u0199\u01E8\u01E9\u039A\u03BA\u040C\u0416\u041A\u0436\u043A\u045C\u049A\u049B\u049C\u049D\u049E\u049F\u04A0\u04A1",l:"\u0139\u013A\u013B\u013C\u013D\u013E\u013F\u0140\u0141\u0142\u019A\u01AA\u01C0\u01CF\u01D0\u0234\u023D\u0399\u04C0\u04CF",m:"\u039C\u03FA\u03FB\u041C\u043C\u04CD\u04CE",n:"\xD1\xF1\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014A\u014B\u019D\u019E\u01F8\u01F9\u0220\u0235\u039D\u03A0\u03AE\u03B7\u03DE\u040D\u0418\u0419\u041B\u041F\u0438\u0439\u043B\u043F\u045D\u048A\u048B\u04C5\u04C6\u04E2\u04E3\u04E4\u04E5\u03C0",o:"\xD2\xD3\xD4\xD5\xD6\xD8\xF0\xF2\xF3\xF4\xF5\xF6\xF8\u014C\u014D\u014E\u014F\u0150\u0151\u019F\u01A0\u01A1\u01D1\u01D2\u01EA\u01EB\u01EC\u01ED\u01FE\u01FF\u020C\u020D\u020E\u020F\u022A\u022B\u022C\u022D\u022E\u022F\u0230\u0231\u038C\u0398\u039F\u03B8\u03BF\u03C3\u03CC\u03D5\u03D8\u03D9\u03EC\u03ED\u03F4\u041E\u0424\u043E\u0472\u0473\u04E6\u04E7\u04E8\u04E9\u04EA\u04EB\xA4\u018D\u038F",p:"\u01A4\u01BF\u03A1\u03C1\u03F7\u03F8\u03FC\u0420\u0440\u048E\u048F\xDE",q:"\u024A\u024B",r:"\u0154\u0155\u0156\u0157\u0158\u0159\u01A6\u0210\u0211\u0212\u0213\u024C\u024D\u0403\u0413\u042F\u0433\u044F\u0453\u0490\u0491",s:"\u015A\u015B\u015C\u015D\u015E\u015F\u0160\u0161\u01A7\u01A8\u0218\u0219\u023F\u03C2\u03DA\u03DB\u03DF\u03E8\u03E9\u0405\u0455",t:"\u0162\u0163\u0164\u0165\u0166\u0167\u01AB\u01AC\u01AD\u01AE\u021A\u021B\u0236\u023E\u0393\u03A4\u03C4\u03EE\u03EF\u0422\u0442\u0482\u04AC\u04AD",u:"\xB5\xD9\xDA\xDB\xDC\xF9\xFA\xFB\xFC\u0168\u0169\u016A\u016B\u016C\u016D\u016E\u016F\u0170\u0171\u0172\u0173\u01AF\u01B0\u01B1\u01B2\u01D3\u01D4\u01D5\u01D6\u01D7\u01D8\u01D9\u01DA\u01DB\u01DC\u0214\u0215\u0216\u0217\u0244\u03B0\u03BC\u03C5\u03CB\u03CD\u03D1\u040F\u0426\u0427\u0446\u045F\u04B4\u04B5\u04B6\u04B7\u04CB\u04CC\u04C7\u04C8",v:"\u03BD\u0474\u0475\u0476\u0477",w:"\u0174\u0175\u019C\u03C9\u03CE\u03D6\u03E2\u03E3\u0428\u0429\u0448\u0449\u0461\u047F",x:"\xD7\u03A7\u03C7\u03D7\u03F0\u0425\u0445\u04B2\u04B3\u04FC\u04FD\u04FE\u04FF",y:"\xDD\xFD\xFF\u0176\u0177\u0178\u01B3\u01B4\u0232\u0233\u024E\u024F\u038E\u03A5\u03AB\u03B3\u03C8\u03D2\u03D3\u03D4\u040E\u0423\u0443\u0447\u045E\u0470\u0471\u04AE\u04AF\u04B0\u04B1\u04EE\u04EF\u04F0\u04F1\u04F2\u04F3",z:"\u0179\u017A\u017B\u017C\u017D\u017E\u01A9\u01B5\u01B6\u0224\u0225\u0240\u0396\u03B6"},r={};Object.keys(n).forEach(function(e){n[e].split("").forEach(function(t){r[t]=e})});t.exports=(e)=>{let t=e.split("");return t.forEach((e,n)=>{r[e]&&(t[n]=r[e])}),t.join("")}},{}],152:[function(e,t){"use strict";const n=e("../../paths"),r=n.fns,a=n.tags;t.exports=(e)=>{let t="silver",n=Object.keys(e.tags);for(let r=0;r<n.length;r++)if(a[n[r]]&&a[n[r]].color){t=a[n[r]].color;break}let s=r.leftPad(e.text,12);s+=" "+n,console.log("%c "+s,"color: "+t)}},{"../../paths":161}],153:[function(e,t){"use strict";const n=e("./renderHtml"),r=e("./client"),a=e("./server"),s={text:function(e){return(e.whitespace.before||"")+e._text+(e.whitespace.after||"")},normal:function(e){return e.normal},root:function(e){return e.root||e.normal},html:function(e){return n(e)},tags:function(e){return{text:e.text,normal:e.normal,tags:Object.keys(e.tags)}},debug:function(e){"object"==typeof window?r(e):a(e)}};t.exports=(e)=>{return e.prototype.out=function(e){return s[e]||(e="text"),s[e](this)},e}},{"./client":152,"./renderHtml":154,"./server":155}],154:[function(e,t){"use strict";const n=(e)=>{const t={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#39;"," ":"&nbsp;"};return e.replace(/[<>&"' ]/g,function(e){return t[e]})},r=(e)=>{const t=/<(?:!--(?:(?:-*[^->])*--+|-?)|script\b(?:[^"'>]|"[^"]*"|'[^']*')*>[\s\S]*?<\/script\s*|style\b(?:[^"'>]|"[^"]*"|'[^']*')*>[\s\S]*?<\/style\s*|\/?[a-z](?:[^"'>]|"[^"]*"|'[^']*')*)>/gi;let n;do n=e,e=e.replace(t,"");while(e!==n);return e.replace(/</g,"&lt;")};t.exports=function(e){let t=Object.keys(e.tags).filter((e)=>"Term"!==e);t=t.map((e)=>"nl-"+e),t=t.join(" ");let a=r(e.text);a=n(a);let s="<span class=\""+t+"\">"+a+"</span>";return n(e.whitespace.before)+s+n(e.whitespace.after)}},{}],155:[function(e,t){"use strict";const n=e("../../paths").fns;t.exports=function(e){let t=Object.keys(e.tags).map((e)=>{return n.printTag(e)}).join(", "),r=e.text;r="'"+n.yellow(r||"-")+"'";let a="";e.silent_term&&(a="["+e.silent_term+"]"),r=n.leftPad(r,20),r+=n.leftPad(a,8),console.log("   "+r+"        - "+t)}},{"../../paths":161}],156:[function(e,t){"use strict";const n=/([a-z0-9 ])([,:;.!?]+)$/i;t.exports=(e)=>{const t={getPunctuation:function(){let e=this.text.match(n);return e?e[2]:(e=this.whitespace.after.match(n),e?e[2]:null)},setPunctuation:function(e){return this.killPunctuation(),this.text+=e,","===e&&(this.tags.Comma=!0),this},hasComma:function(){return","===this.getPunctuation()},killPunctuation:function(){return this.text=this._text.replace(n,"$1"),delete this.tags.Comma,delete this.tags.ClauseEnd,this}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{}],157:[function(e,t){"use strict";const n=function(e,t){const r=e.world.tags;if(r[t]===void 0)return!0;let a=r[t].notA||[];for(let n=0;n<a.length;n++)if(!0===e.tags[a[n]])return!1;return!(void 0!==r[t].isA)||n(e,r[t].isA)};t.exports=n},{}],158:[function(e,t){"use strict";const n=e("./setTag"),r=e("./unTag"),a=e("./canBe"),s={".":!0};t.exports=(e)=>{const t={tag:function(e,t){!0!==s[e]&&n(this,e,t)},unTag:function(e,t){!0!==s[e]&&r(this,e,t)},canBe:function(e){if(e=e||"","string"==typeof e){if(!0===s[e])return!0;e=e.replace(/^#/,"")}return a(this,e)}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"./canBe":157,"./setTag":159,"./unTag":160}],159:[function(e,t){"use strict";const n=e("../../paths"),r=n.log,a=n.fns,s=e("./unTag"),o=(e,t,n)=>{const a=e.world.tags;if((t=t.replace(/^#/,""),!0!==e.tags[t])&&(e.tags[t]=!0,r.tag(e,t,n),a[t])){let r=a[t].notA||[];for(let t=0;t<r.length;t++)!0===e.tags[r[t]]&&s(e,r[t],n);if(a[t].isA){let n=a[t].isA;!0!==e.tags[n]&&o(e,n," --> "+t)}}};t.exports=function(e,t,n){if(e&&t){const r=e.world.tags;return a.isArray(t)?void t.forEach((r)=>o(e,r,n)):void(o(e,t,n),r[t]&&void 0!==r[t].also&&o(e,r[t].also,n))}}},{"../../paths":161,"./unTag":160}],160:[function(e,t){"use strict";const n=e("../../paths"),r=n.log,a=(e,t,n)=>{const s=e.world.tags;if(e.tags[t]&&(r.unTag(e,t,n),delete e.tags[t],s[t])){let n=s[t].downward;for(let t=0;t<n.length;t++)a(e,n[t]," - -   - ")}};t.exports=(e,t,n)=>{if(e&&t){if("*"===t)return void(e.tags={});a(e,t,n)}}},{"../../paths":161}],161:[function(e,t){t.exports={fns:e("../fns"),log:e("../log"),tags:e("../tags")}},{"../fns":3,"../log":6,"../tags":137}],162:[function(e,t){"use strict";const n=/^(\s|-+|\.\.+|\/|"|\u0022|\uFF02|\u0027|\u201C|\u2018|\u201F|\u201B|\u201E|\u2E42|\u201A|\u00AB|\u2039|\u2035|\u2036|\u2037|\u301D|\u0060|\u301F)+/u,r=/(\s+|-+|\.\.+|"|\u0022|\uFF02|\u0027|\u201D|\u2019|\u00BB|\u203A|\u2032|\u2033|\u2034|\u301E|\u00B4)+[,;.!? ]*$/u,a=/^( *)-(\$|€|¥|£)?([0-9])/;t.exports=(e)=>{let t={before:"",after:""},s=e.match(a);return null===s?(s=e.match(n),null!==s&&(t.before=s[0],e=e.replace(n,""))):(t.before=s[1],e=e.replace(/^ */,"")),s=e.match(r),null!==s&&(e=e.replace(r,""),t.after=s[0]),{whitespace:t,text:e}}},{}],163:[function(e,t){"use strict";const n=e("../term"),r=/\S/,a=/^[!?.]+$/,s={".":!0,"-":!0,"–":!0,"—":!0,"--":!0,"...":!0},o=function(e){if(!0===/^(re|un)-?[^aeiou]./.test(e))return!1;let t=/^([a-z`"'/]+)(-|–|—)([a-z0-9].*)/i;if(!0===t.test(e))return!0;let n=/^([0-9]+)(–|—)([0-9].*)/i;return!!n.test(e)},l=function(e){const t=/[a-z]\/[a-z]/;return t.test(e)&&2===e.split(/\//g).length};t.exports=function(e,i){let t=[],d=[];e=e||"","number"==typeof e&&(e+="");const u=e.split(/(\S+)/);for(let t=0;t<u.length;t++){const e=u[t];if(!0===o(e)){const t=e.split(/[-–—]/);for(let e=0;e<t.length;e++)e===t.length-1?d.push(t[e]):d.push(t[e]+"-")}else if(!0===l(e)){const t=e.split(/\//);d.push(t[0]),d.push("/"+t[1])}else d.push(e)}let m="";for(let n=0;n<d.length;n++)!0===r.test(d[n])&&!1===s.hasOwnProperty(d[n])&&!1===a.test(d[n])?(t.push(m+d[n]),m=""):m+=d[n];return m&&0<t.length&&(t[t.length-1]+=m),t.map((e)=>new n(e,i))}},{"../term":143}],164:[function(e,t){"use strict";t.exports={parent:{get:function(){return this.refText||this},set:function(e){return this.refText=e,this}},parentTerms:{get:function(){return this.refTerms||this},set:function(e){return this.refTerms=e,this}},dirty:{get:function(){for(let e=0;e<this.terms.length;e++)if(!0===this.terms[e].dirty)return!0;return!1},set:function(e){this.terms.forEach((n)=>{n.dirty=e})}},refTerms:{get:function(){return this._refTerms||this},set:function(e){return this._refTerms=e,this}},found:{get:function(){return 0<this.terms.length}},length:{get:function(){return this.terms.length}},isA:{get:function(){return"Terms"}},whitespace:{get:function(){return{before:(e)=>{return this.firstTerm().whitespace.before=e,this},after:(e)=>{return this.lastTerm().whitespace.after=e,this}}}}}},{}],165:[function(e,t){"use strict";const n=e("./build"),r=e("./getters");let a=e("../world");const s=function(e,t,n,s){this.terms=e,this.world=t||a,this.refText=n,this._refTerms=s,this.get=(e)=>{return this.terms[e]};let o=Object.keys(r);for(let a=0;a<o.length;a++)Object.defineProperty(this,o[a],r[o[a]])};s.fromString=function(e,t){let r=n(e,t),a=new s(r,t,null);return a.terms.forEach((e)=>{e.parentTerms=a}),a},e("./match")(s),e("./methods/tag")(s),e("./methods/loops")(s),e("./match/not")(s),e("./methods/delete")(s),e("./methods/insert")(s),e("./methods/misc")(s),e("./methods/out")(s),e("./methods/replace")(s),e("./methods/split")(s),e("./methods/transform")(s),e("./methods/lump")(s),t.exports=s},{"../world":215,"./build":163,"./getters":164,"./match":166,"./match/not":176,"./methods/delete":177,"./methods/insert":178,"./methods/loops":179,"./methods/lump":181,"./methods/misc":182,"./methods/out":183,"./methods/replace":184,"./methods/split":185,"./methods/tag":186,"./methods/transform":187}],166:[function(e,t){"use strict";const n=e("./lib/syntax"),r=e("./lib/startHere"),a=e("../../text"),s=e("./lib");t.exports=(e)=>{const t={match:function(t,n){if(0===this.terms.length)return new a([],this.world,this.parent);if(!t)return new a([],this.world,this.parent);let r=s(this,t,n);return r=r.map((t)=>{return new e(t,this.world,this.refText,this.refTerms)}),new a(r,this.world,this.parent)},matchOne:function(e){if(0===this.terms.length)return null;let a=n(e);for(let n=0,t;n<this.terms.length&&!(a[0]&&a[0].starting&&0<n);n++)if(t=r(this,n,a),t)return t;return null},has:function(e){return null!==this.matchOne(e)}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"../../text":192,"./lib":170,"./lib/startHere":174,"./lib/syntax":175}],167:[function(e,t){"use strict";t.exports=(e,t)=>{e.captureGroup=!!t.capture||void 0}},{}],168:[function(e,t){"use strict";t.exports=function(e){let t=[];return e.forEach((e)=>{if(0===e.filter((e)=>!0===e.captureGroup).length)return void t.push(e);let n=[];for(let r=0;r<e.length;r+=1)e[r].captureGroup?n.push(e[r]):0<n.length&&(t.push(n),n=[]);0<n.length&&t.push(n)}),t}},{}],169:[function(e,t){"use strict";t.exports=(e,t)=>{for(let n=0;n<t.length;n++){let r=t[n],a=!1;if(!0!==r.optional&&!0!==r.negative&&void 0===r.minMax){if(void 0!==r.normal){for(let t=0;t<e.terms.length;t++){if(e.terms[t].normal===r.normal||e.terms[t].silent_term===r.normal){a=!0;break}if(!0===e.terms[t].lumped)return!1}if(!1==a)return!0}if(void 0!==r.tag){for(let t=0;t<e.terms.length;t++)if(!0===e.terms[t].tags[r.tag]){a=!0;break}if(!1==a)return!0}}}return!1}},{}],170:[function(e,t){"use strict";const n=e("./syntax"),r=e("./startHere"),a=e("./fastPass"),s=e("./captureGroup"),o=function(e){if(!e)return[];let t=e.terms.map((e)=>{return{id:e.uid}});return t};t.exports=(e,i,l)=>{if("string"==typeof i?i=n(i):i&&"Text"===i.isA?i=o(i.list[0]):i&&"Terms"===i.isA&&(i=o(i)),!i||0===i.length)return[];if(!0===a(e,i,l))return[];let d=[];for(let n=0,t;n<e.terms.length&&!(0<n&&i[0]&&i[0].starting);n+=1)if(t=r(e,n,i,l),t&&0<t.length){d.push(t);let e=t.length-1;n+=e}return d=s(d),d}},{"./captureGroup":168,"./fastPass":169,"./startHere":174,"./syntax":175}],171:[function(e,t){"use strict";const n=e("./applyCaptureGroup"),r=(e,t)=>{if(!e||!t)return!1;if(!0===t.anyOne)return!0;if(void 0!==t.tag)return e.tags[t.tag];if(void 0!==t.id)return t.id===e.uid;if(void 0!==t.normal)return t.normal===e.normal||t.normal===e.silent_term;if(!0===t.suffix&&void 0!==t.partial){const n=e.normal.length;return e.normal.substr(n-t.partial.length,n)===t.partial}if(!0===t.prefix&&void 0!==t.partial)return e.normal.substr(0,t.partial.length)===t.partial;if(!0===t.infix&&t.partial)return-1!==e.normal.indexOf(t.partial);if(void 0!==t.regex)return t.regex.test(e.normal)||t.regex.test(e.text);if(void 0!==t.oneOf){for(let n=0;n<t.oneOf.tagArr.length;n++)if(!0===e.tags.hasOwnProperty(t.oneOf.tagArr[n]))return!0;return t.oneOf.terms.hasOwnProperty(e.normal)||t.oneOf.terms.hasOwnProperty(e.silent_term)}return!1};t.exports=(e,t,a)=>{if(!e||!t)return!1;let s=r(e,t,a);return t.negative&&(s=!!!s),s&&n(e,t),s}},{"./applyCaptureGroup":167}],172:[function(e,t){"use strict";const n=(e,t)=>{let n=t.normal.substr(0,e.length);return n===e};t.exports=function(e,t,r){let a=t[r].normal;if(a!==void 0&&n(a,e))for(++r,r;r<t.length;r++){if(a+=" "+t[r].normal,a===e.normal)return r;if(!1===n(a,e))return null}return null}},{}],173:[function(e,t,n){arguments[4][73][0].apply(n,arguments)},{"../../paths":189,dup:73}],174:[function(e,t){"use strict";const n=e("./lumpMatch"),r=e("./isMatch"),a=e("./applyCaptureGroup"),s=(e,t,n)=>{for(;t<e.length;t++)if(r(e.terms[t],n))return t;return null},o=(e,n,a,s)=>{for(;n<e.length;n++){let o=e.terms[n];if(s&&r(o,s))return n;if(!r(o,a))return n}return n};t.exports=(e,t,i,l)=>{let d=t;for(let u=0;u<i.length;u++){let m=e.terms[d],c=i[u],h=i[u+1];if(!m){if(!0===c.optional)continue;return null}if(!0===c.starting&&0<d)return null;if(!0===c.ending&&d!==e.length-1&&!c.minMax)return null;if(!0===c.astrix){if(!h){let n=e.terms.slice(t,e.length);for(let e=d-t;e<n.length;e++)a(n[e],c);return n}let n=s(e,d,i[u+1]);if(!n)return null;for(let t=d;t<n;t++)a(e.terms[t],c);d=n+1,u+=1;continue}if(void 0!==i[u].minMax){let n=i[u].minMax.min||0,a=i[u].minMax.max,s=i[u+1];for(let o=0,i;o<a;o++){if(i=e.terms[d+o],!i)return null;if(!1===r(i,c))return null;if(o<n-1)continue;if(!s){d+=1;break}if(o>=n&&r(i,s))break;let l=e.terms[d+o+1];if(l&&r(l,s)){d+=o+2,u+=1;break}else if(o===a-1)return null}continue}if(!0===c.optional){let t=i[u+1];d=o(e,d,c,t);continue}if(r(m,c,l)){if(d+=1,!0===c.consecutive){let t=i[u+1];d=o(e,d,c,t)}continue}if(m.silent_term&&!m.normal){if(0===u)return null;d+=1,u-=1;continue}let p=n(m,i,u,l);if(null!==p){u=p,d+=1;continue}if(!0!==c.optional)return null}return e.terms.slice(t,d)}},{"./applyCaptureGroup":167,"./isMatch":171,"./lumpMatch":172}],175:[function(e,t){"use strict";const n=e("./paths").fns,r=/\{[0-9,]+\}$/,a=function(e){return e.substr(1,e.length)},s=function(e){return e.substring(0,e.length-1)},o=function(e){e=e||"",e=e.trim();let t={};if(1===e.length&&"."!==e&&"*"!==e)return t.normal=e.toLowerCase(),t;if("!"===e.charAt(0)&&(e=a(e),t.negative=!0),"^"===e.charAt(0)&&(e=a(e),t.starting=!0),"$"===e.charAt(e.length-1)&&(e=s(e),t.ending=!0),"?"===e.charAt(e.length-1)&&(e=s(e),t.optional=!0),"+"===e.charAt(e.length-1)&&(e=s(e),t.consecutive=!0),"_"===e.charAt(e.length-1)?(e=s(e),t.prefix=!0,"_"===e.charAt(0)&&(e=a(e),t.prefix=void 0,t.infix=!0),t.partial=e,e=""):"_"===e.charAt(0)&&(e=a(e),t.suffix=!0,t.partial=e,e=""),"}"===e.charAt(e.length-1)&&!0===r.test(e)){let n=e.match(/\{([0-9])*,? ?([0-9]+)\}/);t.minMax={min:parseInt(n[1],10)||0,max:parseInt(n[2],10)},e=e.replace(r,"")}if("#"===e.charAt(0)&&(e=a(e),t.tag=n.titleCase(e),e=""),"/"===e.charAt(0)&&"/"===e.charAt(e.length-1)&&(e=s(e),e=a(e),t.regex=new RegExp(e,"i"),e=""),"("===e.charAt(0)&&")"===e.charAt(e.length-1)){e=s(e),e=a(e);let r=e.split(/\|/g);t.oneOf={terms:{},tagArr:[]},r.forEach((e)=>{if("#"===e.charAt(0)){let r=e.substr(1,e.length);r=n.titleCase(r),t.oneOf.tagArr.push(r)}else t.oneOf.terms[e]=!0}),e=""}return"."===e&&(t.anyOne=!0,e=""),"*"===e&&(t.astrix=!0,e=""),""!==e&&(e=e.replace(/\\([\\#\*\.\[\]\(\)\+\?\^])/g,""),t.normal=e.toLowerCase()),t};t.exports=function(e){e=e||"";let t=e.split(/ +/);for(let n=0;n<t.length;n+=1)if(-1!==t[n].indexOf("(")&&-1===t[n].indexOf(")")){let e=t[n+1];e&&-1===e.indexOf("(")&&-1!==e.indexOf(")")&&(t[n+1]=t[n]+" "+t[n+1],t[n]="")}t=t.filter((e)=>e);let n=!1;return t=t.map((e)=>{let t=!1;return"["===e.charAt(0)&&(e=a(e),n=!0),"]"===e.charAt(e.length-1)&&(e=s(e),n=!1,t=!0),e=o(e),(!0==n||!0==t)&&(e.capture=!0),e}),t}},{"./paths":173}],176:[function(e,t){"use strict";const n=e("./lib/syntax"),a=e("./lib/startHere"),s=e("../../text");t.exports=(e)=>{const t={notObj:function(t,n){let r=[],a=[];return t.terms.forEach((e)=>{n.hasOwnProperty(e.normal)?(a.length&&r.push(a),a=[]):a.push(e)}),a.length&&r.push(a),r=r.map((n)=>{return new e(n,t.world,t.refText,t.refTerms)}),new s(r,t.world,t.parent)},notString:function(t,r,o){let l=[],d=n(r),u=[];for(let e=0,n;e<t.terms.length;e++){if(n=a(t,e,d,o),n&&0<n.length){0<u.length&&(l.push(u),u=[]),e+=n.length-1;continue}u.push(t.terms[e])}return 0<u.length&&l.push(u),l=l.map((n)=>{return new e(n,t.world,t.refText,t.refTerms)}),new s(l,t.world,t.parent)}};return t.notArray=function(e,n){let r=n.reduce((e,t)=>{return e[t]=!0,e},{});return t.notObj(e,r)},t.notText=function(e,n){let r=n.out("array");return t.notArray(e,r)},e.prototype.not=function(e,n){if("object"==typeof e){let r=Object.prototype.toString.call(e);if("[object Array]"===r)return t.notArray(this,e,n);if("[object Object]"===r)return"Text"===e.isA?t.notText(this,e,n):t.notObj(this,e,n)}return"string"==typeof e?t.notString(this,e,n):this},e}},{"../../text":192,"./lib/startHere":174,"./lib/syntax":175}],177:[function(e,t){"use strict";const n=e("../mutate");t.exports=(e)=>{return e.prototype.delete=function(e){if(!this.found)return this;if(!e)return this.parentTerms=n.deleteThese(this.parentTerms,this),this;let t=this.match(e);if(t.found){let e=n.deleteThese(this,t);return e}return this.parentTerms},e}},{"../mutate":188}],178:[function(e,t){"use strict";const n=e("../mutate"),r=(e,t)=>{return e.terms.length&&e.terms[t]?(e.terms[t].whitespace.before=" ",e):e};t.exports=(e)=>{const t=function(t,n){if("Terms"===t.isA)return t;if("Term"===t.isA)return new e([t],n);let r=e.fromString(t,n);return r.tagger(),r},a={insertBefore:function(e,a){let s=this.terms.length,o=t(e,this.world);a&&o.tag(a);let i=this.index();return r(this.parentTerms,i),0<i&&r(o,0),this.parentTerms.terms=n.insertAt(this.parentTerms.terms,i,o),this.terms.length===s&&(this.terms=o.terms.concat(this.terms)),this},insertAfter:function(e,a){let s=this.terms.length,o=t(e,this.world);a&&o.tag(a);let i=this.terms[this.terms.length-1].index();return r(o,0),this.parentTerms.terms=n.insertAt(this.parentTerms.terms,i+1,o),this.terms.length===s&&(this.terms=this.terms.concat(o.terms)),this},insertAt:function(e,a,s){0>e&&(e=0);let o=this.terms.length,i=t(a,this.world);return s&&i.tag(s),0<e&&r(i,0),this.parentTerms.terms=n.insertAt(this.parentTerms.terms,e,i),this.terms.length===o&&Array.prototype.splice.apply(this.terms,[e,0].concat(i.terms)),0===e&&(this.terms[0].whitespace.before="",i.terms[i.terms.length-1].whitespace.after=" "),this}};return Object.keys(a).forEach((t)=>{e.prototype[t]=a[t]}),e}},{"../mutate":188}],179:[function(e,t){"use strict";t.exports=(e)=>{return[["toUpperCase","UpperCase"],["toLowerCase"],["toTitleCase","TitleCase"]].forEach((t)=>{let n=t[0],r=t[1];e.prototype[n]=function(){let e=arguments;return this.terms.forEach((r)=>{r[n].apply(r,e)}),r&&this.tag(r,n),this}}),e}},{}],180:[function(e,t){"use strict";const n=e("../../../term"),r=(e,t)=>{let n=e.whitespace.before+e.text+e.whitespace.after;return n+=t.whitespace.before+t.text+t.whitespace.after,n};t.exports=function(e,t){let s=e.terms[t],a=e.terms[t+1];if(a){let o=r(s,a);return e.terms[t]=new n(o,s.context),e.terms[t].normal=s.normal+" "+a.normal,e.terms[t].lumped=!0,e.terms[t].parentTerms=e.terms[t+1].parentTerms,e.terms[t+1]=null,void(e.terms=e.terms.filter((e)=>null!==e))}}},{"../../../term":143}],181:[function(e,t){"use strict";const n=e("./combine"),r=e("../../mutate"),a=function(e,t){let r=e.terms.length;for(let a=0;a<r;a++)n(e,0);let a=e.terms[0];return a.tags=t,a};t.exports=(e)=>{return e.prototype.lump=function(){let e=this.index(),t={};if(this.terms.forEach((e)=>{Object.keys(e.tags).forEach((e)=>t[e]=!0)}),this.parentTerms===this){let e=a(this,t);return this.terms=[e],this}this.parentTerms=r.deleteThese(this.parentTerms,this);let n=a(this,t);return this.parentTerms.terms=r.insertAt(this.parentTerms.terms,e,n),this},e}},{"../../mutate":188,"./combine":180}],182:[function(e,t){"use strict";const n=e("../../tagger");t.exports=(e)=>{const t={tagger:function(){return n(this),this},firstTerm:function(){return this.terms[0]},lastTerm:function(){return this.terms[this.terms.length-1]},all:function(){return this.parent},data:function(){return{text:this.out("text"),normal:this.out("normal")}},term:function(e){return this.terms[e]},first:function(){let n=this.terms[0];return new e([n],this.world,this.refText,this.refTerms)},last:function(){let n=this.terms[this.terms.length-1];return new e([n],this.world,this.refText,this.refTerms)},slice:function(t,n){let r=this.terms.slice(t,n);return new e(r,this.world,this.refText,this.refTerms)},index:function(){let e=this.parentTerms,t=this.terms[0];if(!e||!t)return null;for(let n=0;n<e.terms.length;n++)if(t===e.terms[n])return n;return null},termIndex:function(){let e=this.terms[0],t=this.refText||this;if(!t||!e)return null;let r=0;for(let n=0,a;n<t.list.length;n++){a=t.list[n];for(let t=0;t<a.terms.length;t++){if(a.terms[t]===e)return r;r+=1}}return r},chars:function(){return this.terms.reduce((e,n)=>{return e+=n.whitespace.before.length,e+=n.text.length,e+=n.whitespace.after.length,e},0)},wordCount:function(){return this.terms.length},setPunctuation:function(e){let t=this.terms[this.terms.length-1];t.setPunctuation(e)},getPunctuation:function(){let e=this.last().terms[0];return e?e.getPunctuation()||"":""},toCamelCase:function(){return this.toTitleCase(),this.terms.forEach((e,t)=>{0!==t&&(e.whitespace.before=""),e.whitespace.after=""}),this.tag("#CamelCase","toCamelCase"),this}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"../../tagger":95}],183:[function(e,t){"use strict";const n=e("../paths").fns,r={text:function(e){return e.terms.reduce((e,n)=>{return e+=n.out("text"),e},"")},match:function(e){let t="",n=e.terms.length;for(let r=0;r<n;r++)0<r&&(t+=e.terms[r].whitespace.before),t+=e.terms[r].text.replace(/[,.?!]$/,""),r<n-1&&(t+=e.terms[r].whitespace.after);return t},normal:function(e){let t=e.terms.filter((e)=>{return e.text});return t=t.map((e)=>{return e.normal}),t.join(" ")},grid:function(e){let t="  ";return t+=e.terms.reduce((e,r)=>{return e+=n.leftPad(r.text,11),e},""),t+"\n\n"},color:function(e){return e.terms.reduce((e,r)=>{return e+=n.printTerm(r),e},"")},csv:function(e){return e.terms.map((e)=>e.normal.replace(/,/g,"")).join(",")},newlines:function(e){return e.terms.reduce((e,n)=>{return e+=n.out("text").replace(/\n/g," "),e},"").replace(/^\s/,"")},root:function(e){return e.terms.map((e)=>e.silent_term||e.root).join(" ").toLowerCase()},html:function(e){return e.terms.map((e)=>e.render.html()).join(" ")},debug:function(e){e.terms.forEach((e)=>{e.out("debug")})},custom:function(e,n){return e.terms.map((e)=>{return Object.keys(n).reduce((t,r)=>{return n[r]&&e[r]&&("function"==typeof e[r]?t[r]=e[r]():t[r]=e[r]),t},{})})}};r.plaintext=r.text,r.normalize=r.normal,r.normalized=r.normal,r.colors=r.color,r.tags=r.terms;t.exports=(e)=>{return e.prototype.out=function(e){if("string"==typeof e){if(r[e])return r[e](this);}else if(!0===n.isObject(e))return r.custom(this,e);return r.text(this)},e.prototype.debug=function(){return r.debug(this)},e}},{"../paths":189}],184:[function(e,t){"use strict";const n=e("../mutate");t.exports=(e)=>{const t={replace:function(e,t,n){return void 0===t?this.replaceWith(e,n):(this.match(e).replaceWith(t,n),this)},replaceWith:function(t,r){let a=e.fromString(t,this.world);a.tagger(),r&&this.terms.forEach((e,t)=>{let n=Object.keys(e.tags);void 0!==a.terms[t]&&n.forEach((e)=>a.terms[t].tag(e,"from-memory"))});let s=this.getPunctuation(),o=this.index();return this.parentTerms=n.deleteThese(this.parentTerms,this),this.parentTerms.terms=n.insertAt(this.parentTerms.terms,o,a),this.terms=a.terms,0<this.terms.length&&(this.terms[this.terms.length-1].whitespace.after+=s),this}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"../mutate":188}],185:[function(e,t,n){"use strict";const r=(e,t)=>{let n=t.terms[0],r=t.terms.length;for(let a=0;a<e.length;a++)if(e[a]===n)return{before:e.slice(0,a),match:e.slice(a,a+r),after:e.slice(a+r,e.length)};return{after:e}},a=(e)=>{const t={splitAfter:function(t,n){let a=this.match(t,n),s=this.terms,o=[];return a.list.forEach((e)=>{let t=r(s,e);t.before&&t.match&&o.push(t.before.concat(t.match)),s=t.after}),s.length&&o.push(s),o=o.map((t)=>{let n=this.refText;return new e(t,this.world,n,this.refTerms)}),o},splitOn:function(t,n){let a=this.match(t,n),s=this.terms,o=[];return a.list.forEach((e)=>{let t=r(s,e);t.before&&o.push(t.before),t.match&&o.push(t.match),s=t.after}),s.length&&o.push(s),o=o.filter((e)=>e&&e.length),o=o.map((t)=>new e(t,t.world,t.refText,this.refTerms)),o},splitBefore:function(t,n){let a=this.match(t,n),s=this.terms,l=[];a.list.forEach((e)=>{let t=r(s,e);t.before&&l.push(t.before),t.match&&l.push(t.match),s=t.after}),s.length&&l.push(s);for(let e=0;e<l.length;e++)for(let t=0;t<a.length;t++)a.list[t].terms[0]===l[e][0]&&l[e+1]&&(l[e]=l[e].concat(l[e+1]),l[e+1]=[]);return l=l.filter((e)=>e&&e.length),l=l.map((t)=>new e(t,t.world,t.refText,this.refTerms)),l}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e};t.exports=a,n=a},{}],186:[function(e,t){"use strict";t.exports=(e)=>{const t={tag:function(e,n){let r=[];return("string"==typeof e&&(r=e.split(" ")),1<r.length)?(this.terms.forEach((e,t)=>{e.tag(r[t],n)}),this):(this.terms.forEach((r)=>{r.tag(e,n)}),this)},unTag:function(e,n){let r=[];return("string"==typeof e&&(r=e.split(" ")),1<r.length)?(this.terms.forEach((e,t)=>{e.unTag(r[t],n)}),this):(this.terms.forEach((r)=>{r.unTag(e,n)}),this)},canBe:function(n){let t=this.terms.filter((e)=>e.canBe(n));return new e(t,this.world,this.refText,this.refTerms)}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{}],187:[function(e,t){"use strict";t.exports=(e)=>{const t={clone:function(){let t=this.terms.map((e)=>{return e.clone()});return new e(t,this.world,this.refText,null)},hyphenate:function(){return this.terms.forEach((e,t)=>{t!==this.terms.length-1&&(e.whitespace.after="-"),0!==t&&(e.whitespace.before="")}),this},dehyphenate:function(){return this.terms.forEach((e)=>{"-"===e.whitespace.after&&(e.whitespace.after=" ")}),this},trim:function(){return 0>=this.length?this:(this.terms[0].whitespace.before="",this.terms[this.terms.length-1].whitespace.after="",this)}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{}],188:[function(e,t,n){"use strict";const r=(e)=>{let t=[];return"Terms"===e.isA?t=e.terms:"Text"===e.isA?t=e.flatten().list[0].terms:"Term"===e.isA&&(t=[e]),t};n.deleteThese=(e,t)=>{let n=r(t);return e.terms=e.terms.filter((e)=>{for(let t=0;t<n.length;t++)if(e===n[t])return!1;return!0}),e},n.insertAt=(e,t,n)=>{n.dirty=!0;let a=r(n);return 0<t&&a[0]&&!a[0].whitespace.before&&(a[0].whitespace.before=" "),Array.prototype.splice.apply(e,[t,0].concat(a)),e}},{}],189:[function(e,t){t.exports={fns:e("../fns"),Term:e("../term")}},{"../fns":3,"../term":143}],190:[function(e,t){"use strict";const n=e("./index"),r=e("./tokenize"),a=e("./paths"),o=a.Terms,s=a.fns;t.exports=(e,t)=>{let a=[];s.isArray(e)?a=e:(e=s.ensureString(e),a=r(e));let i=a.map((e)=>o.fromString(e,t)),l=new n(i,t);return l.list.forEach((e)=>{e.refText=l}),l}},{"./index":192,"./paths":205,"./tokenize":207}],191:[function(e,t){t.exports={found:function(){return 0<this.list.length},parent:function(){return this.original||this},length:function(){return this.list.length},isA:function(){return"Text"},whitespace:function(){return{before:(e)=>{return this.list.forEach((t)=>{t.whitespace.before(e)}),this},after:(e)=>{return this.list.forEach((t)=>{t.whitespace.after(e)}),this}}}}},{}],192:[function(e,t){"use strict";function n(e,t,n){this.list=e||[],"function"==typeof t&&(t=t()),this.world=()=>{return t},this.original=n;let a=Object.keys(r);for(let s=0;s<a.length;s++)Object.defineProperty(this,a[s],{get:r[a[s]]})}const r=e("./getters");t.exports=n,n.addMethods=function(e,t){let n=Object.keys(t);for(let r=0;r<n.length;r++)e.prototype[n[r]]=t[n[r]]},n.makeSubset=function(e,t){let r=function(e,t,r){n.call(this,e,t,r)};return r.prototype=Object.create(n.prototype),n.addMethods(r,e),r.find=t,r},e("./methods/misc")(n),e("./methods/loops")(n),e("./methods/match")(n),e("./methods/out")(n),e("./methods/sort")(n),e("./methods/split")(n),e("./methods/normalize")(n),e("./subsets")(n);const a={acronyms:e("../subset/acronyms"),adjectives:e("../subset/adjectives"),adverbs:e("../subset/adverbs"),contractions:e("../subset/contractions"),dates:e("../subset/dates"),nouns:e("../subset/nouns"),people:e("../subset/people"),sentences:e("../subset/sentences"),terms:e("../subset/terms"),possessives:e("../subset/possessives"),values:e("../subset/values"),verbs:e("../subset/verbs"),ngrams:e("../subset/ngrams"),startGrams:e("../subset/ngrams/startGrams"),endGrams:e("../subset/ngrams/endGrams")};Object.keys(a).forEach((e)=>{n.prototype[e]=function(t,n){let r=a[e],s=r.find(this,t,n);return new a[e](s.list,this.world,this.parent)}}),n.prototype.words=n.prototype.terms},{"../subset/acronyms":9,"../subset/adjectives":10,"../subset/adverbs":17,"../subset/contractions":23,"../subset/dates":25,"../subset/ngrams":35,"../subset/ngrams/endGrams":32,"../subset/ngrams/startGrams":36,"../subset/nouns":38,"../subset/people":49,"../subset/possessives":51,"../subset/sentences":52,"../subset/terms":58,"../subset/values":65,"../subset/verbs":75,"./getters":191,"./methods/loops":193,"./methods/match":194,"./methods/misc":195,"./methods/normalize":196,"./methods/out":197,"./methods/sort":202,"./methods/split":204,"./subsets":206}],193:[function(e,t){"use strict";const n=["toTitleCase","toUpperCase","toLowerCase","toCamelCase","hyphenate","dehyphenate","trim","insertBefore","insertAfter","insertAt","replace","replaceWith","delete","lump","tagger","unTag"];t.exports=(e)=>{n.forEach((t)=>{e.prototype[t]=function(){for(let e=0;e<this.list.length;e++)this.list[e][t].apply(this.list[e],arguments);return this}}),e.prototype.tag=function(){if(0===this.list.length)return this;for(let e=0;e<this.list.length;e++)this.list[e].tag.apply(this.list[e],arguments);return this}}},{}],194:[function(e,t){"use strict";const n=e("../../../terms/match/lib/syntax"),a=e("../../../terms");t.exports=(e)=>{const t=function(t,r,a){let s=[];r=n(r),t.list.forEach((e)=>{let t=e.match(r,a);t.list.forEach((e)=>{s.push(e)})});let o=t.parent||t;return new e(s,t.world(),o)},s=function(n,r){let s=[];return n.list.forEach((e)=>{e.terms.forEach((e)=>{!0===r.hasOwnProperty(e.normal)&&s.push(e)})}),s=s.map((e)=>{return new a([e],n.world(),n,e.parentTerms)}),new e(s,n.world(),n.parent)},o=function(e,t){let n=t.reduce((e,t)=>{return e[t]=!0,e},{});return s(e,n)},r=function(e,t){let n=t.out("array");return o(e,n)},i={match:function(n,a){if(0===this.list.length||void 0===n||null===n){let t=this.parent||this;return new e([],this.world(),t)}if("string"==typeof n||"number"==typeof n)return t(this,n,a);let i=Object.prototype.toString.call(n);return"[object Array]"===i?o(this,n):"[object Object]"===i?"Text"===n.isA?r(this,n):s(this,n):this},not:function(t,n){let r=[];this.list.forEach((e)=>{let a=e.not(t,n);r=r.concat(a.list)});let a=this.parent||this;return new e(r,this.world(),a)},if:function(t){let n=[];for(let e=0;e<this.list.length;e++)!0===this.list[e].has(t)&&n.push(this.list[e]);let r=this.parent||this;return new e(n,this.world(),r)},ifNo:function(t){let n=[];for(let e=0;e<this.list.length;e++)!1===this.list[e].has(t)&&n.push(this.list[e]);let r=this.parent||this;return new e(n,this.world(),r)},has:function(e){for(let t=0;t<this.list.length;t++)if(!0===this.list[t].has(e))return!0;return!1},before:function(t){let n=[];for(let e=0,r;e<this.list.length;e++)if(r=this.list[e].matchOne(t),r){let t=r[0].index(),a=this.list[e].slice(0,t);0<a.length&&n.push(a)}let r=this.parent||this;return new e(n,this.world(),r)},after:function(t){let n=[];for(let e=0,r;e<this.list.length;e++)if(r=this.list[e].matchOne(t),r){let t=r[r.length-1],a=t.index(),s=this.list[e].slice(a+1,this.list[e].length);0<s.length&&n.push(s)}let r=this.parent||this;return new e(n,this.world(),r)}};return i.and=i.match,i.notIf=i.ifNo,i.only=i.if,i.onlyIf=i.if,e.addMethods(e,i),e}},{"../../../terms":165,"../../../terms/match/lib/syntax":175}],195:[function(t,n){"use strict";const r=t("../../terms");n.exports=(t)=>{const n={all:function(){return this.parent},index:function(){return this.list.map((e)=>e.index())},wordCount:function(){return this.terms().length},data:function(){return this.list.map((e)=>e.data())},map:function(e){return this.list.map((n,r)=>{let a=new t([n],this.world);return e(a,r)})},forEach:function(e){return this.list.forEach((n,r)=>{let a=new t([n],this.world);e(a,r)}),this},filter:function(e){let n=this.list.filter((n,r)=>{let a=new t([n],this.world);return e(a,r)});return new t(n,this.world)},reduce:function(e,n){return this.list.reduce((n,r)=>{let a=new t([r],this.world);return e(n,a)},n)},find:function(e){for(let n=0;n<this.list.length;n++){let r=this.list[n],a=new t([r],this.world);if(e(a))return a}},clone:function(){let e=this.list.map((e)=>{return e.clone()});return new t(e,this.world)},term:function(e){let n=this.list.map((t)=>{let n=[],a=t.terms[e];return a&&(n=[a]),new r(n,this.world,this.refText,this.refTerms)});return new t(n,this.world,this.parent)},firstTerm:function(){return this.match("^.")},lastTerm:function(){return this.match(".$")},slice:function(e,t){return this.list=this.list.slice(e,t),this},get:function(e){if(!e&&0!==e||!this.list[e])return new t([],this.world,this.parent);let r=this.list[e];return new t([r],this.world,this.parent)},first:function(e){return e||0===e?new t(this.list.slice(0,e),this.world,this.parent):this.get(0)},last:function(e){if(!e&&0!==e)return this.get(this.list.length-1);let r=this.list.length;return new t(this.list.slice(r-e,r),this.world,this.parent)},concat:function(){for(let e=0,t;e<arguments.length;e++)t=arguments[e],"object"==typeof t&&("Text"===t.isA&&t.list&&(this.list=this.list.concat(t.list)),"Terms"===t.isA&&this.list.push(t));return this},flatten:function(){let e=[];if(this.list.forEach((t)=>{e=e.concat(t.terms)}),!e.length)return new t(null,this.world,this.parent);let n=new r(e,this.world,this,null);return new t([n],this.world,this.parent)},canBe:function(e){return this.list.forEach((t)=>{t.terms=t.terms.filter((n)=>{return n.canBe(e)})}),this},random:function(a){a=a||1;let n=e(Math.random()*this.list.length),r=this.list.slice(n,n+a);if(r.length<a){let e=a-r.length;e>n&&(e=n),r=r.concat(this.list.slice(0,e))}return new t(r,this.world,this.parent)},setPunctuation:function(e){return this.list.forEach((t)=>t.setPunctuation(e)),this},getPunctuation:function(e){return e||0===e?this.list[e]?this.list[e].getPunctuation():"":this.list.map((e)=>e.getPunctuation())},offset:function(){return this.out("offset")},text:function(){return this.out("text")}};n.eq=n.get,n.join=n.flatten,t.addMethods(t,n)}},{"../../terms":165}],196:[function(e,t){"use strict";const n=e("../../term/methods/normalize/unicode"),r={whitespace:!0,case:!0,numbers:!0,punctuation:!0,unicode:!0,contractions:!0,acronyms:!0,parentheses:!1,possessives:!1,plurals:!1,verbs:!1,honorifics:!1},a={whitespace:(e)=>{return e.terms().list.forEach((e,n)=>{let r=e.terms[0];0<n&&!r.silent_term?r.whitespace.before=" ":0===n&&(r.whitespace.before=""),r.whitespace.after="",!0===r.tags.StartQuotation&&(r.whitespace.before+="\""),!0===r.tags.EndQuotation&&(r.whitespace.after="\""+r.whitespace.after)}),e},case:(e)=>{return e.list.forEach((e)=>{e.terms.forEach((n,t)=>{0===t||n.tags.Person||n.tags.Place||n.tags.Organization||e.toLowerCase()})}),e},numbers:(e)=>{return e.values().toNumber(),e},punctuation:(e)=>{return e.list.forEach((e)=>{if(e.terms.length){e.terms[0]._text=e.terms[0]._text.replace(/^¿/,"");for(let n=0,r;n<e.terms.length-1;n++)r=e.terms[n],r._text=r._text.replace(/[:;,]$/,"");let t=e.terms[e.terms.length-1];t._text=t._text.replace(/\.+$/,"."),t._text=t._text.replace(/!+$/,"!"),t._text=t._text.replace(/\?+!?$/,"?")}}),e},unicode:(e)=>{return e.list.forEach((e)=>{e.terms.forEach((e)=>{e.text=n(e.text)})}),e},contractions:(e)=>{return e.contractions().expand(),e},acronyms:(e)=>{return e.acronyms().stripPeriods(),e},possessives:(e)=>{return e.possessives().strip(),e},parentheses:(e)=>{return e.parentheses().delete(),e},plurals:(e)=>{return e.nouns().toSingular(),e},verbs:(e)=>{return e.verbs().toInfinitive(),e},honorifics:(e)=>{return e=e.delete("#Honorific"),e}};t.exports=(e)=>{e.prototype.normalize=function(e){let t=this;e=e||{};let n=Object.assign({},r),s=Object.keys(e);return s.forEach((t)=>{n[t]=e[t]}),Object.keys(n).forEach((e)=>{n[e]&&void 0!==a[e]&&(t=a[e](t))}),t}}},{"../../term/methods/normalize/unicode":151}],197:[function(e,t){"use strict";const n=e("./topk"),a=e("./offset"),s=e("./indexes"),r=e("../paths").fns,o={text:(e)=>{return e.list.reduce((e,t)=>{return e+=t.out("text"),e},"")},match:(e)=>{return e.list.reduce((e,t)=>{return e+=t.out("match"),e},"")},normal:(e)=>{return e.list.map((e)=>{let t=e.out("normal"),n=e.last();if(n){let n=e.getPunctuation();("."===n||"!"===n||"?"===n)&&(t+=n)}return t}).join(" ")},root:(e)=>{return e.list.map((e)=>{return e.out("root")}).join(" ")},offsets:(e)=>{return a(e)},index:(e)=>{return s(e)},grid:(e)=>{return e.list.reduce((e,t)=>{return e+=t.out("grid"),e},"")},color:(e)=>{return e.list.reduce((e,t)=>{return e+=t.out("color"),e},"")},array:(e)=>{return e.list.map((e)=>{return e.out("normal")})},csv:(e)=>{return e.list.map((e)=>{return e.out("csv")}).join("\n")},newlines:(e)=>{return e.list.map((e)=>{return e.out("newlines")}).join("\n")},json:(e)=>{return e.list.reduce((e,t)=>{let n=t.terms.map((e)=>{return{text:e.text,normal:e.normal,tags:e.tag}});return e.push(n),e},[])},html:(e)=>{let t=e.list.reduce((e,t)=>{let n=t.terms.reduce((e,n)=>{return e+="\n    "+n.out("html"),e},"");return e+="\n  <span>"+n+"\n  </span>"},"");return"<span> "+t+"\n</span>"},terms:(e)=>{let n=[];return e.list.forEach((e)=>{e.terms.forEach((e)=>{n.push({text:e.text,normal:e.normal,tags:Object.keys(e.tags)})})}),n},debug:(e)=>{return console.log("===="),e.list.forEach((e)=>{console.log("   --"),e.debug()}),e},topk:(e)=>{return n(e)},custom:(e,t)=>{return e.list.map((e)=>e.out(t))}};o.plaintext=o.text,o.normalized=o.normal,o.colors=o.color,o.tags=o.terms,o.offset=o.offsets,o.idexes=o.index,o.frequency=o.topk,o.freq=o.topk,o.arr=o.array;t.exports=(e)=>{return e.prototype.out=function(e){if("string"==typeof e){if(o[e])return o[e](this);}else if(!0===r.isObject(e))return o.custom(this,e);return o.text(this)},e.prototype.debug=function(){return o.debug(this)},e}},{"../paths":201,"./indexes":198,"./offset":199,"./topk":200}],198:[function(e,t){"use strict";t.exports=(e)=>{let n=[],r={};e.terms().list.forEach((e)=>{r[e.terms[0].uid]=!0});let a=0,t=e.all();return t.list.forEach((e,o)=>{e.terms.forEach((e,t)=>{void 0!==r[e.uid]&&n.push({text:e.text,normal:e.normal,term:a,sentence:o,sentenceTerm:t}),a+=1})}),n}},{}],199:[function(e,t){"use strict";const n=(e,n)=>{let r=0;for(let a=0;a<e.list.length;a++)for(let s=0,o;s<e.list[a].terms.length;s++){if(o=e.list[a].terms[s],o.uid===n.uid)return r;r+=o.whitespace.before.length+o._text.length+o.whitespace.after.length}return null},r=function(e){let n=e.terms;if(2>=n.length)return e.out("normal");let r=n[0].normal;for(let a=1,s;a<n.length-1;a++)s=n[a],r+=s.whitespace.before+s.text+s.whitespace.after;return r+=" "+n[e.terms.length-1].normal,r};t.exports=(e)=>{let t=e.all();return e.list.map((e)=>{let a=[];for(let t=0;t<e.terms.length;t++)a.push(e.terms[t].normal);let s=r(e),o=e.out("text"),i=n(t,e.terms[0]),l=e.terms[0].whitespace.before,d=i+l.length;return{text:o,normal:e.out("normal"),offset:i,length:o.length,wordStart:d,wordEnd:d+s.length}})}},{}],200:[function(e,t){"use strict";t.exports=function(e,t){let n={};e.list.forEach((e)=>{let t=e.out("root");n[t]=n[t]||0,n[t]+=1});let r=[];return Object.keys(n).forEach((e)=>{r.push({normal:e,count:n[e]})}),r.forEach((t)=>{t.percent=parseFloat((100*(t.count/e.list.length)).toFixed(2))}),r=r.sort((e,t)=>{return e.count>t.count?-1:1}),t&&(r=r.splice(0,t)),r}},{}],201:[function(e,t){t.exports=e("../paths")},{"../paths":205}],202:[function(e,t){"use strict";const n=e("./methods");t.exports=(e)=>{return e.addMethods(e,{sort:function(t){return t=t||"alphabetical",t=t.toLowerCase(),t&&"alpha"!==t&&"alphabetical"!==t?"chron"===t||"chronological"===t?n.chron(this,e):"length"===t?n.lengthFn(this,e):"freq"===t||"frequency"===t?n.freq(this,e):"wordcount"===t?n.wordCount(this,e):this:n.alpha(this,e)},reverse:function(){return this.list=this.list.reverse(),this},unique:function(){let e={};return this.list=this.list.filter((t)=>{let n=t.out("root");return!e.hasOwnProperty(n)&&(e[n]=!0,!0)}),this}}),e}},{"./methods":203}],203:[function(e,t,n){"use strict";const a=function(e){return e=e.sort((e,t)=>{return e.index>t.index?1:e.index===t.index?0:-1}),e.map((e)=>e.ts)};n.alpha=function(e){return e.list.sort((e,t)=>{if(e===t)return 0;if(e.terms[0]&&t.terms[0]){if(e.terms[0].root>t.terms[0].root)return 1;if(e.terms[0].root<t.terms[0].root)return-1}return e.out("root")>t.out("root")?1:-1}),e},n.chron=function(e){let t=e.list.map((e)=>{return{ts:e,index:e.termIndex()}});return e.list=a(t),e},n.lengthFn=function(e){let t=e.list.map((e)=>{return{ts:e,index:e.chars()}});return e.list=a(t).reverse(),e},n.wordCount=function(e){let t=e.list.map((e)=>{return{ts:e,index:e.length}});return e.list=a(t),e},n.freq=function(e){let t={};e.list.forEach((e)=>{let n=e.out("root");t[n]=t[n]||0,t[n]+=1});let n=e.list.map((e)=>{let n=t[e.out("root")]||0;return{ts:e,index:-1*n}});return e.list=a(n),e}},{}],204:[function(e,t){"use strict";t.exports=(e)=>{return e.addMethods(e,{splitAfter:function(e,t){let n=[];return this.list.forEach((r)=>{r.splitAfter(e,t).forEach((e)=>{n.push(e)})}),this.list=n,this},splitBefore:function(e,t){let n=[];return this.list.forEach((r)=>{r.splitBefore(e,t).forEach((e)=>{n.push(e)})}),this.list=n,this},splitOn:function(e,t){let n=[];return this.list.forEach((r)=>{r.splitOn(e,t).forEach((e)=>{n.push(e)})}),this.list=n,this}}),e}},{}],205:[function(e,t,n){arguments[4][201][0].apply(n,arguments)},{"../paths":8,dup:201}],206:[function(e,t){"use strict";const n=e("../subset/sentences/isQuestion");t.exports=(e)=>{const t={clauses:function(e){let t=this.splitAfter("#ClauseEnd");return"number"==typeof e&&(t=t.get(e)),t},hashTags:function(e){let t=this.match("#HashTag").terms();return"number"==typeof e&&(t=t.get(e)),t},organizations:function(e){let t=this.splitAfter("#Comma");return t=t.match("#Organization+"),"number"==typeof e&&(t=t.get(e)),t},phoneNumbers:function(e){let t=this.splitAfter("#Comma");return t=t.match("#PhoneNumber+"),"number"==typeof e&&(t=t.get(e)),t},places:function(e){let t=this.splitAfter("#Comma");return t=t.match("#Place+"),"number"==typeof e&&(t=t.get(e)),t},quotations:function(e){let t=this.match("#Quotation+"),r=[];return t.list.forEach((e)=>{let n=0,a=null;e.terms.forEach((s,t)=>{!0===s.tags.StartQuotation&&(0==n&&(a=t),n+=1),0<n&&!0===s.tags.EndQuotation&&(n-=1),0==n&&null!==a&&(r.push(e.slice(a,t+1)),a=null)}),null!==a&&r.push(e.slice(a,e.terms.length))}),t.list=r,"number"==typeof e&&(t=t.get(e)),t},topics:function(e){let t=this.clauses(),r=t.people();r.concat(t.places()),r.concat(t.organizations());return r=r.not(["someone","man","woman","mother","brother","sister","father"]),r.sort("chronological"),"number"==typeof e&&(r=r.get(e)),r},urls:function(e){let t=this.match("#Url");return"number"==typeof e&&(t=t.get(e)),t},questions:function(t){let a=this.all();"number"==typeof t&&(a=a.get(t));let r=a.list.filter((e)=>n(e));return new e(r,this.world,this.parent)},statements:function(t){let a=this.all();"number"==typeof t&&(a=a.get(t));let r=a.list.filter((e)=>!1===n(e));return new e(r,this.world,this.parent)},parentheses:function(e){let t=this.match("#Parentheses+");return t=t.splitAfter("#EndBracket"),"number"==typeof e&&(t=t.get(e)),t}};return Object.keys(t).forEach((n)=>{e.prototype[n]=t[n]}),e}},{"../subset/sentences/isQuestion":53}],207:[function(e,t){"use strict";const n=Object.keys(e("../world/more-data/abbreviations")),r=new RegExp("\\b("+n.join("|")+")[.!?\u203D\u2E18\u203C\u2047-\u2049] *$","i"),a=/[ .][A-Z]\.? *$/i,s=/(?:\u2026|\.{2,}) *$/,o=/((?:\r?\n|\r)+)/,l=/(\S.+?[.!?\u203D\u2E18\u203C\u2047-\u2049])(?=\s+|$)/g,d=/[a-z0-9\u0000-\u007F]/i,u=/\S/,i=function(e){let t=[],n=e.split(o);for(let r=0,a;r<n.length;r++){a=n[r].split(l);for(let e=0;e<a.length;e++)t.push(a[e])}return t};t.exports=function(e){e=e||"",e=e+"";let t=[],n=[];if(!e||"string"!=typeof e||!1===u.test(e))return t;let o=i(e);for(let t=0,r;t<o.length;t++)if(r=o[t],void 0!==r&&""!==r){if(!1===u.test(r))if(n[n.length-1]){n[n.length-1]+=r;continue}else if(o[t+1]){o[t+1]=r+o[t+1];continue}n.push(r)}for(let o=0,i;o<n.length;o++)i=n[o],n[o+1]&&d.test(i)&&(r.test(i)||a.test(i)||s.test(i))?n[o+1]=i+(n[o+1]||""):i&&0<i.length&&d.test(i)&&(t.push(i),n[o]="");return 0===t.length?[e]:t}},{"../world/more-data/abbreviations":216}],208:[function(e,t){t.exports=`{"words":"Comparative¦better|Superlative¦earlier|PresentTense¦sounds|Value¦a few|Noun¦autumn,daylight9eom,here,no doubt,one d8s5t2w0yesterd8;eek0int5;d6end;mr1o0;d4morrow;!w;ome 1tandard3umm0;er;d0point;ay; time|Copula¦a1is,w0;as,ere;m,re|Condition¦if,unless|PastTense¦be2came,d1had,mea0sa1taken,we0;nt;id;en,gan|Gerund¦accord0be0develop0go0result0stain0;ing|Negative¦n0;ever,o0;!n,t|QuestionWord¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s|Singular¦a06bZcUdQeOfLgKhGici0Ajel07kitty,lFmDnCoBp8question mark,r7s4t1us 0;dollVstW; rex,a1h0ic,ragedy,v show;ere,i07;l03x return;ky,t0uper bowl,yst06;ri04u0;dIff;alZi02oom;a1robl02u0;dCrpo8;rt,tE;cean,thers;othiXumbG;ayfTeeNo0;del,nopoS;iRunch;ead start,o0;lPme1u0;se;! run;adfMirlIlaci8od,rand slam,ulM;amiLly,olLr1un0;diN;iGosD;conomy,gg,ner3v0xampG;ent;eath,inn2o0ragonfG;cument6g0iFlFor;gy;er;an3eiliFhocol2i0ottage,redit card;ty,vil w0;ar;ate;ary;ankiAel7les9o2reakfast,u0;n0tterf6;ti8;dy,tt2y0;fri0;end;le;d1l0noma0;ly; homin2verti0;si0;ng;em|Infinitive¦0:6Y;1:7C;2:7A;3:79;4:74;5:5F;6:6D;7:6L;8:78;9:6W;A:73;B:7D;C:76;D:6R;E:68;F:60;a6Qb69c5Bd4Je43f3Qg3Jh3Ci2Zj2Xk2Tl2Km2Bn28o24p1Pques3Rr0Xs05tWuRvOwHyG;awn,ield;aJe24hist7iIoGre6H;nd0rG;k,ry;n,pe,sh,th0;lk,nHrGsh,tDve;n,raB;d0t;aHiGo8;ew,sA;l6Rry;nHpGr3se;gra4Wli49;dGi8lo65;erGo;go,mi5H;aNeMhKie,oJrHuGwi4;ne,rn;aGe0Ui60u4y;de,in,nsf0p,v5O;r37uD;ank,rG;eat2Vi2;nd,st;ke,lk,rg5Os8;a06c03eZhWi4Jkip,lVmUneTo56pQtJuGwitD;bmAck,ff0gge4ppHrGspe6;ge,pri1rou53vi2;ly,o3D;aLeKoJrHuG;dy,mb7;aEeGi2;ngth2Lss,tD;p,re;m,p;in,ke,r0Yy;iHlaFoil,rinG;g,k7;n,t;ak,e3E;aFe22i7o5B;am,e1Qip;aHiv0oG;ck,ut;re,ve;arDeIle6nHr2tG;!t7;d,se;k,m;aHo5rG;atDew;le,re;il,ve;a05eIisk,oHuG;b,in,le,n,sh;am,ll;a01cZdu9fYgXje6lUmTnt,pQquPsKtJvGwa5V;eGiew,o4U;al,l,rG;se,t;aEi5u42;eJi4oItG;!o5rG;i6uc20;l2rt;mb7nt,r2;e4i5;air,eHlGo40reseB;a9y;at;aEemb0i3Wo2;aHeGi2y;a1nt;te,x;a5Dr4A;act1Yer,le6u1;a12ei2k5PoGyc7;gni2Cnci7rd;ch,li2Bs5N;i1nG;ge,k;aTerSiRlPoNrIuG;b21ll,mp,rGsh,t;cha1s4Q;ai1eJiBoG;cHdu9greChibAmi1te4vG;e,i2U;eClaim;di6pa5ss,veB;iBp,rtr43sGur;e,t;a3RuG;g,n3;ck,le;fo32mAsi4;ck,iBrt4Mss,u1y;bIccur,ff0pera8utweHverGwe;co47lap,ta3Qu1whelm;igh;ser2taE;eHotG;e,i9;ed,gle6;aLeKiIoHuG;ltip3Frd0;nit14ve;nGrr13;d,g7us;asu5lt,n0Qr3ssa3;intaEke d40na3rHtG;ch,t0;ch,k39ry;aMeLiIoGu1F;aGck,ok,ve;d,n;ft,ke,mAnHstGve;!en;e,k;a2Gc0Ht;b0Qck,uG;gh,nD;eIiHnoG;ck,w;ck,ll,ss;ep;am,oEuG;d3mp;gno5mQnGss3I;cOdica8flu0NhNsKtIvG;eGol2;nt,st;erGrodu9;a6fe5;i4tG;aGru6;ll;abAibA;lu1Fr1D;agi22pG;lemeBo20ro2;aKeIi5oHuG;nt,rry;ld fa4n03pe,st;aGlp;d,t;nd7ppGrm,te;en;aLet,loCoKrIuG;arGeCi14;ant39d;aGip,ow,umb7;b,sp;es,ve1I;in,th0ze;aQeaPiNlLoIracHuncG;ti3I;tu5;cus,lHrG;ce,eca4m,s30;d,l22;aFoG;at,od,w;gu5lGniFx;e,l;r,tu5;il,ll,vG;or;a13cho,dAle6mSnPstNvalua8xG;a0AcLerKi4pGte16;a15eHlaEoGreC;rt,se;ct,riG;en9;ci1t;el,han3;abGima8;liF;ab7couXdHfor9ga3han9j03riDsu5t0vG;isi2Vy;!u5;body,er3pG;hasiGow0;ze;a06eUiMoLrHuG;mp;aIeHiGop;ft;am,ss;g,in;!d3ubt;e,ff0p,re6sHvG;e,iXor9;aJcGli13miCpl18tinguiF;oGuC;uGv0;ra3;gr1YppG;ear,ro2;al,cNem,fLliv0ma0Cny,pKsHterG;mi0D;cribe,er2iHtrG;oy;gn,re;a08e07i6osA;eGi08y;at,ct;iIlHrG;ea1;a5i04;de;ma3n9re,te;a0Ae09h06i8l03oJrGut;aHeGoCuFy;a8dA;ck,ve;llYmSnHok,py,uGv0;gh,nt;cePdu6fMsKtIvG;eGin9;rt,y;aEin0XrG;a4ibu8ol;iGtitu8;d0st;iHoGroB;rm;gu5rm;rn;biKe,foJmaIpG;a5laE;re;nd;rt;ne;ap1e6;aHiGo1;ng,p;im,w;aHeG;at,ck,w;llen3n3r3se;a1nt0;ll,ncHrGt0u1;e,ry;el;aUeQloPoNrKuG;dgIlHrG;n,y;ly;et;aHuF;sh;ke;a4mb,o4rrGth0un9;ow;ck;ar,coSgElHnefAtrG;ay;ie2ong;in;nGse;!g;band0Jc0Bd06ffo05gr04id,l01mu1nYppTrQsKttGvoid,waA;acIeHra6;ct;m0Fnd;h,k;k,sG;eIiHocia8uG;me;gn,st;mb7rt;le;chHgGri2;ue;!i2;eaJlIroG;aDve;ch;aud,y;l,r;noun9sw0tG;icipa8;ce;lHt0;er;e3ow;ee;rd;aRdIju4mAoR;it;st;!reC;ss;cJhie2knowled3tiva8;te;ge;ve;eIouBu1;se;nt;pt;on|Actor¦aJbGcFdCengineIfAgardenIh9instructPjournalLlawyIm8nurse,opeOp5r3s1t0;echnCherapK;ailNcientJoldiGu0;pervKrgeon;e0oofE;ceptionGsearC;hotographClumbColi1r0sychologF;actitionBogrammB;cem6t5;echanic,inist9us4;airdress8ousekeep8;arm7ire0;fight6m2;eputy,iet0;ici0;an;arpent2lerk;ricklay1ut0;ch0;er;ccoun6d2ge7r0ssis6ttenda7;chitect,t0;ist;minist1v0;is1;rat0;or;ta0;nt|Honorific¦aObrigadiNcHdGexcellency,fiBking,liDmaAofficNp6queen,r3s0taoiseach,vice5;e0ultJ;c0rgeaC;ond liAretary;abbi,e0;ar0verend; adJ;astFr0;eside6i0ofessE;me ministEnce0;!ss;gistrate,r4yB;eld mar3rst l0;ady,i0;eutena0;nt;shA;oct5utchess;aptain,hance3o0;lonel,mmand4ngress0unci2;m0wom0;an;ll0;or;er;d0yatullah;mir0;al|SportsTeam¦0:1M;1:1T;2:1U;a1Rb1Dc0Zd0Qfc dallas,g0Nhouston 0Mindiana0Ljacksonville jagua0k0Il0Fm02newVoRpKqueens parkJrIsAt5utah jazz,vancouver whitecaps,w3yY;ashington 3est ham0Xh16;natio21redski1wizar12;ampa bay 6e5o3;ronto 3ttenham hotspur;blu1Hrapto0;nnessee tita1xasD;buccanee0ra1G;a7eattle 5heffield0Qporting kansas13t3;. louis 3oke12;c1Srams;mari02s3;eah1IounI;cramento Sn 3;antonio spu0diego 3francisco gi0Bjose earthquak2;char0EpaB;eal salt lake,o04; ran0C;a8h5ittsburgh 4ortland t3;imbe0rail blaze0;pirat2steele0;il3oenix su1;adelphia 3li2;eagl2philNunE;dr2;akland 4klahoma city thunder,r3;i10lando magic;athle0Trai3;de0; 3castle05;england 6orleans 5york 3;city fc,giUje0Lkn02me0Lred bul19y3;anke2;pelica1sain0J;patrio0Irevolut3;ion;aBe9i3ontreal impact;ami 7lwaukee b6nnesota 3;t4u0Rvi3;kings;imberwolv2wi1;re0Cuc0W;dolphi1heat,marli1;mphis grizz3ts;li2;nchester 5r3vN;i3li1;ne0;c00u0H;a4eicesterYos angeles 3;clippe0dodFlaA; galaxy,ke0;ansas city 3nH;chiefs,ro3;ya0M; pace0polis colX;astr0Edynamo,rockeWtexa1;i4olden state warrio0reen bay pac3;ke0;anT;.c.Aallas 7e3i0Cod5;nver 5troit 3;lio1pisto1ti3;ge0;bronc06nuggeO;cowboUmav3;er3;ic06; uX;arCelNh8incinnati 6leveland 5ol3;orado r3umbus crew sc;api5ocki2;brow1cavalie0india1;benga03re3;ds;arlotte horCicago 3;b4cubs,fire,wh3;iteE;ea0ulY;di3olina panthe0;ff3naW; c3;ity;altimore ElAoston 7r3uffalo bilT;av2e5ooklyn 3;ne3;ts;we0;cel4red3; sox;tics;ackburn rove0u3;e ja3;ys;rs;ori3rave1;ol2;rizona Ast8tlanta 3;brav2falco1h4u3;nited;aw9;ns;es;on villa,r3;os;c5di3;amondbac3;ks;ardi3;na3;ls|Uncountable¦0:1C;a1Hb1Bc12e0Wf0Qg0Mh0Gi0Dj0Cknowled1Gl07mYnXoWpRrOsCt8vi7w1;a5ea0Ai4o1;o2rld1;! seI;d,l;ldlife,ne;rmth,t0;neg0Xol08;e3hund0ime,oothpaste,r1una;affRou1;ble,sers,t;a,nnis;aAcene07e9h8il7now,o6p3te2u1;g0Rnshi0L;am,el;ace2e1;ciOed;!c12;ap,cc0ft0B;k,v0;eep,opp0O;riJ;d07fe0Wl1nd;m0Qt;ain,e1i0W;c1laxa0Csearch;ogni0Brea0B;a4e2hys0Elast9o1ress00;rk,w0;a1pp0trol;ce,nR;p0tiK;il,xygen;ews,oi0C;a7ea5i4o3u1;mps,s1;ic;nHo08;lk,st;sl1t;es;chine1il,themat00; learn02ry;aught0e3i2u1;ck,g07;ghtnZqu0CteratI;a1isH;th0;ewel7usti08;ce,mp1nformaOtself;ati1ortan06;en05;a4isto3o1;ck1mework,n1spitali01;ey;ry;ir,lib1ppi9;ut;o2r1um,ymnastJ;a7ound;l1ssip;d,f;i5lour,o2ruit,urnit1;ure;od,rgive1wl;ne1;ss;c6sh;conom9duca5lectriciMn3quip4th9very1;body,o1thB;ne;joy1tertain1;ment;tiC;a8elcius,h4iv3loth6o1urrency;al,ffee,ld w1nfusiAttA;ar;ics;aos,e1;e2w1;ing;se;ke,sh;a3eef,is2lood,read,utt0;er;on;g1ss;ga1;ge;c4dvi3irc2mnes1rt;ty;raft;ce;id|Unit¦0:17;a12b10c0Md0Le0Jf0Fg0Bh08in07joule0k01lZmOnNoMpIqHsqCt7volts,w6y4z3°2µ1;g,s;c,f,n;b,e2;a0Lb,d0Rears old,o1;tt0F;att0b;able4b3e2on1sp;!ne0;a2r0B;!l,sp;spo03; ft,uare 1;c0Gd0Ff3i0Dkilo0Hm1ya0C;e0Kil1;e0li0F;eet0o0B;t,uart0;a3e2i1ou0Nt;c0Knt0;rcent,t00;!scals;hms,uVz;an0GewtR;/s,b,e7g,i3l,m2p1²,³;h,s;!²;!/h,cro3l1;e1li05;! DsC²;g05s0A;gPter1;! 2s1;! 1;per second;b,iZm,u1x;men0x0;b,elvin0g,ilo2m1nQ;!/h,ph,²;byYgWmeter1;! 2s1;! 1;per hour;²,³;e1g,z;ct1rtz0;aWogP;al2b,ig9ra1;in0m0;!l1;on0;a3emtOl1tG; oz,uid ou1;nce0;hrenheit0rad0;b,x1;abyH;eciCg,l,mA;arat0eAg,l,m9oulomb0u1;bic 1p0;c5d4fo3i2meAya1;rd0;nch0;ot0;eci2;enti1;me4;!²,³;lsius0nti1;g2li1me1;ter0;ram0;bl,y1;te0;c4tt1;os1;eco1;nd0;re0;!s|Pronoun¦'em,elle,h4i3me,ourselves,she5th1us,we,you0;!rself;e0ou;m,y;!l,t;e0im;!'s|Organization¦0:44;a39b2Qc2Ad22e1Yf1Ug1Mh1Hi1Ej1Ak18l14m0Tn0Go0Dp07qu06rZsStFuBv8w3y1;amaha,m0You1w0Y;gov,tu2R;a3e1orld trade organizati3Z;lls fargo,st1;fie23inghou17;l1rner br3B;-m12gree30l street journ25m12;an halNeriz3Uisa,o1;dafo2Gl1;kswagLvo;bs,kip,n2ps,s1;a tod2Qps;es33i1;lev2Wted natio2T; mobi2Jaco bePd bMeAgi frida9h3im horto2Smz,o1witt2V;shiba,y1;ota,s r Y;e 1in lizzy;b3carpen31daily ma2Vguess w2holli0rolling st1Ns1w2;mashing pumpki2Nuprem0;ho;ea1lack eyed pe3Dyrds;ch bo1tl0;ys;l2s1;co,la m13;efoni08us;a6e4ieme2Fnp,o2pice gir5ta1ubaru;rbucks,to2L;ny,undgard1;en;a2Px pisto1;ls;few24insbu25msu1W;.e.m.,adiohead,b6e3oyal 1yan2V;b1dutch she4;ank;/max,aders dige1Ed 1vl30;bu1c1Thot chili peppe2Ilobst27;ll;c,s;ant2Tizno2D;an5bs,e3fiz23hilip morrBi2r1;emier25octer & gamb1Qudenti14;nk floyd,zza hut;psi26tro1uge09;br2Ochina,n2O; 2ason1Wda2E;ld navy,pec,range juli2xf1;am;us;aAb9e5fl,h4i3o1sa,wa;kia,tre dame,vart1;is;ke,ntendo,ss0L;l,s;c,stl3tflix,w1; 1sweek;kids on the block,york09;e,é;a,c;nd1Rs2t1;ional aca2Co,we0P;a,cYd0N;aAcdonald9e5i3lb,o1tv,yspace;b1Knsanto,ody blu0t1;ley crue,or0N;crosoft,t1;as,subisO;dica3rcedes2talli1;ca;!-benz;id,re;'s,s;c's milk,tt11z1V;'ore08a3e1g,ittle caesa1H;novo,x1;is,mark; pres5-z-boy,bour party;atv,fc,kk,m1od1H;art;iffy lu0Jo3pmorgan1sa;! cha1;se;hnson & johns1Py d1O;bm,hop,n1tv;g,te1;l,rpol; & m,asbro,ewlett-packaSi3o1sbc,yundai;me dep1n1G;ot;tac1zbollah;hi;eneral 6hq,l5mb,o2reen d0Gu1;cci,ns n ros0;ldman sachs,o1;dye1g09;ar;axo smith kliYencore;electr0Gm1;oto0S;a3bi,da,edex,i1leetwood mac,oFrito-l08;at,nancial1restoU; tim0;cebook,nnie mae;b04sa,u3xxon1; m1m1;ob0E;!rosceptics;aiml08e5isney,o3u1;nkin donuts,po0Tran dur1;an;j,w j1;on0;a,f leppa2ll,peche mode,r spiegXstiny's chi1;ld;rd;aEbc,hBi9nn,o3r1;aigsli5eedence clearwater reviv1ossra03;al;ca c5l4m1o08st03;ca2p1;aq;st;dplLgate;ola;a,sco1tigroup;! systems;ev2i1;ck fil-a,na daily;r0Fy;dbury,pital o1rl's jr;ne;aFbc,eBf9l5mw,ni,o1p,rexiteeV;ei3mbardiJston 1;glo1pizza;be;ng;ack & deckFo2ue c1;roW;ckbuster video,omingda1;le; g1g1;oodriM;cht3e ge0n & jer2rkshire hathaw1;ay;ryG;el;nana republ3s1xt5y5;f,kin robbi1;ns;ic;bWcRdidQerosmith,ig,lKmEnheuser-busDol,pple9r6s3t&t,v2y1;er;is,on;hland1sociated F; o1;il;by4g2m1;co;os; compu2bee1;'s;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 4catel2t1;air;!-luce1;nt;jazeera,qae1;da;as;/dc,a3er,t1;ivisi1;on;demy of scienc0;es;ba,c|Demonym¦0:16;1:13;a0Wb0Nc0Cd0Ae09f07g04h02iYjVkTlPmLnIomHpDqatari,rBs7t5u4v3wel0Rz2;am0Fimbabwe0;enezuel0ietnam0H;g9krai1;aiwThai,rinida0Iu2;ni0Qrkmen;a4cot0Ke3ingapoOlovak,oma0Tpa05udRw2y0X;edi0Kiss;negal0Br08;mo0uU;o6us0Lw2;and0;a3eru0Hhilipp0Po2;li0Ertugu06;kist3lesti1na2raguay0;ma1;ani;amiZi2orweP;caragu0geri2;an,en;a3ex0Mo2;ngo0Erocc0;cedo1la2;gasy,y08;a4eb9i2;b2thua1;e0Dy0;o,t02;azakh,eny0o2uwaiti;re0;a2orda1;ma0Bp2;anN;celandic,nd4r2sraeli,ta02vo06;a2iT;ni0qi;i0oneV;aiDin2ondur0unN;di;amDe2hanai0reek,uatemal0;or2rm0;gi0;i2ren7;lipino,n4;cuadoVgyp6ngliJsto1thiopi0urope0;a2ominXut4;niH;a9h6o4roa3ub0ze2;ch;ti0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el8o6r3ul2;gaG;aziBi2;ti2;sh;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;gent2me1;ine;ba1ge2;ri0;ni0;gh0r2;ic0;an|Region¦a20b1Sc1Id1Des1Cf19g13h10i0Xj0Vk0Tl0Qm0FnZoXpSqPrMsDtAut9v5w2y0zacatec22;o05u0;cat18kZ;a0est vir4isconsin,yomi14;rwick1Qshington0;! dc;er2i0;cto1Ir0;gin1R;acruz,mont;ah,tar pradesh;a1e0laxca1Cusca9;nnessee,x1Q;bas0Jmaulip1PsmI;a5i3o1taf0Nu0ylh12;ffUrrZs0X;me0Zno19uth 0;cRdQ;ber1Hc0naloa;hu0Rily;n1skatchew0Qxo0;ny; luis potosi,ta catari1H;a0hode6;j0ngp01;asth0Lshahi;inghai,u0;e0intana roo;bec,ensVreta0D;ara3e1rince edward0; isT;i,nnsylv0rnambu01;an13;!na;axa0Mdisha,h0klaho1Antar0reg3x03;io;ayarit,eAo2u0;evo le0nav0K;on;r0tt0Qva scot0W;f5mandy,th0; 0ampton0P;c2d1yo0;rk0N;ako0X;aroli0U;olk;bras0Wva00w0; 1foundland0;! and labrador;brunswick,hamp0Gjers0mexiIyork state;ey;a5i1o0;nta0Mrelos;ch2dlanAn1ss0;issippi,ouri;as geraFneso0L;igPoacP;dhya,harasht03ine,ni2r0ssachusetts;anhao,y0;land;p0toba;ur;anca03e0incoln03ouis7;e0iG;ds;a0entucky,hul09;ns07rnata0Cshmir;alis0iangxi;co;daho,llino1nd0owa;ia04;is;a1ert0idalDun9;fordS;mpRwaii;ansu,eorgVlou4u0;an1erre0izhou,jarat;ro;ajuato,gdo0;ng;cesterL;lori1uji0;an;da;sex;e3o1uran0;go;rs0;et;lawaDrbyC;a7ea6hi5o0umbrG;ahui3l2nnectic1rsi0ventry;ca;ut;iLorado;la;apDhuahua;ra;l7m0;bridge2peche;a4r3uck0;ingham0;shi0;re;emen,itish columb2;h1ja cal0sque,var1;iforn0;ia;guascalientes,l3r0;izo1kans0;as;na;a1ber0;ta;ba1s0;ka;ma|Possessive¦anyAh5its,m3noCo1sometBthe0yo1;ir1mselves;ur0;!s;i8y0;!se4;er1i0;mse2s;!s0;!e0;lf;o1t0;hing;ne|Currency¦$,aud,bRcPdKeurJfIgbp,hkd,inr,jpy,kGlEp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotyRł;en,uanQ;af,of;h0t5;e0il5;k0q0;elL;iel,oubleKp,upeeK;e2ound st0;er0;lingH;n0soG;ceFn0;ies,y;e0i7;i,mpi6;n,r0wanzaByatB;!onaAw;ori7ranc9t;!o8;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;ad,e0ny;nt1;aht,itcoin0;!s|Country¦0:38;1:2L;a2Wb2Dc21d1Xe1Rf1Lg1Bh19i13j11k0Zl0Um0Gn05om3CpZqat1JrXsKtCu6v4wal3yemTz2;a24imbabwe;es,lis and futu2X;a2enezue31ietnam;nuatu,tican city;.5gTkraiZnited 3ruXs2zbeE;a,sr;arab emirat0Kkingdom,states2;! of am2X;k.,s.2; 27a.;a7haBimor-les0Bo6rinidad4u2;nis0rk2valu;ey,me2Xs and caic1T; and 2-2;toba1J;go,kel0Ynga;iw2Vji2nz2R;ki2T;aCcotl1eBi8lov7o5pa2Bri lanka,u4w2yr0;az2ed9itzerl1;il1;d2Qriname;lomon1Vmal0uth 2;afr2IkLsud2O;ak0en0;erra leoEn2;gapo1Wt maart2;en;negKrb0ychellY;int 2moa,n marino,udi arab0;hele24luc0mart1Z;epublic of ir0Com2Cuss0w2;an25;a3eHhilippinTitcairn1Ko2uerto riM;l1rtugE;ki2Bl3nama,pua new0Tra2;gu6;au,esti2;ne;aAe8i6or2;folk1Gth3w2;ay; k2ern mariana1B;or0M;caragua,ger2ue;!ia;p2ther18w zeal1;al;mib0u2;ru;a6exi5icro09o2yanm04;ldova,n2roc4zamb9;a3gol0t2;enegro,serrat;co;c9dagascZl6r4urit3yot2;te;an0i14;shall0Vtin2;ique;a3div2i,ta;es;wi,ys0;ao,ed00;a5e4i2uxembourg;b2echtenste10thu1E;er0ya;ban0Gsotho;os,tv0;azakh1De2iriba02osovo,uwait,yrgyz1D;eling0Jnya;a2erF;ma15p1B;c6nd5r3s2taly,vory coast;le of m19rael;a2el1;n,q;ia,oI;el1;aiSon2ungary;dur0Mg kong;aAermany,ha0Pibralt9re7u2;a5ern4inea2ya0O;!-biss2;au;sey;deloupe,m,tema0P;e2na0M;ce,nl1;ar;bTmb0;a6i5r2;ance,ench 2;guia0Dpoly2;nes0;ji,nl1;lklandTroeT;ast tim6cu5gypt,l salv5ngl1quatorial3ritr4st2thiop0;on0; guin2;ea;ad2;or;enmark,jibou4ominica3r con2;go;!n B;ti;aAentral african 9h7o4roat0u3yprQzech2; 8ia;ba,racao;c3lo2morPngo-brazzaville,okFsta r03te d'ivoiK;mb0;osD;i2ristmasF;le,na;republic;m2naTpe verde,yman9;bod0ero2;on;aFeChut00o8r4u2;lgar0r2;kina faso,ma,undi;azil,itish 2unei;virgin2; is2;lands;liv0nai4snia and herzegoviGtswaGuvet2; isl1;and;re;l2n7rmuF;ar2gium,ize;us;h3ngladesh,rbad2;os;am3ra2;in;as;fghaFlCmAn5r3ustr2zerbaijH;al0ia;genti2men0uba;na;dorra,g4t2;arct6igua and barbu2;da;o2uil2;la;er2;ica;b2ger0;an0;ia;ni2;st2;an|City¦a2Wb26c1Wd1Re1Qf1Og1Ih1Ai18jakar2Hk0Zl0Tm0Gn0Co0ApZquiYrVsLtCuBv8w3y1z0;agreb,uri1Z;ang1Te0okohama;katerin1Hrev34;ars3e2i0rocl3;ckl0Vn0;nipeg,terth0W;llingt1Oxford;aw;a1i0;en2Hlni2Z;lenc2Uncouv0Gr2G;lan bat0Dtrecht;a6bilisi,e5he4i3o2rondheim,u0;nVr0;in,ku;kyo,ronIulouC;anj23l13miso2Jra2A; haJssaloni0X;gucigalpa,hr2Ol av0L;i0llinn,mpe2Bngi07rtu;chu22n2MpT;a3e2h1kopje,t0ydney;ockholm,uttga12;angh1Fenzh1X;o0KvZ;int peters0Ul3n0ppo1F; 0ti1B;jo0salv2;se;v0z0Q;adU;eykjavik,i1o0;me,t25;ga,o de janei17;to;a8e6h5i4o2r0ueb1Qyongya1N;a0etor24;gue;rt0zn24; elizabe3o;ls1Grae24;iladelph1Znom pe07oenix;r0tah tik19;th;lerJr0tr10;is;dessa,s0ttawa;a1Hlo;a2ew 0is;delTtaip0york;ei;goya,nt0Upl0Uv1R;a5e4i3o1u0;mb0Lni0I;nt0scH;evideo,real;l1Mn01skolc;dellín,lbour0S;drid,l5n3r0;ib1se0;ille;or;chest0dalWi0Z;er;mo;a4i1o0vAy01;nd00s angel0F;ege,ma0nz,sbZverpo1;!ss0;ol; pla0Iusan0F;a5hark4i3laipeda,o1rak0uala lump2;ow;be,pavog0sice;ur;ev,ng8;iv;b3mpa0Kndy,ohsiu0Hra0un03;c0j;hi;ncheMstanb0̇zmir;ul;a5e3o0; chi mi1ms,u0;stI;nh;lsin0rakliG;ki;ifa,m0noi,va0A;bu0SiltD;alw4dan3en2hent,iza,othen1raz,ua0;dalaj0Gngzhou;bu0P;eUoa;sk;ay;es,rankfu0;rt;dmont4indhovU;a1ha01oha,u0;blRrb0Eshanbe;e0kar,masc0FugavpiJ;gu,je0;on;a7ebu,h2o0raioJuriti01;lo0nstanJpenhagNrk;gFmbo;enn3i1ristchur0;ch;ang m1c0ttagoL;ago;ai;i0lgary,pe town,rac4;ro;aHeBirminghWogoAr5u0;char3dap3enos air2r0sZ;g0sa;as;es;est;a2isba1usse0;ls;ne;silPtisla0;va;ta;i3lgrade,r0;g1l0n;in;en;ji0rut;ng;ku,n3r0sel;celo1ranquil0;la;na;g1ja lu0;ka;alo0kok;re;aBb9hmedabad,l7m4n2qa1sh0thens,uckland;dod,gabat;ba;k0twerp;ara;m5s0;terd0;am;exandr0maty;ia;idj0u dhabi;an;lbo1rh0;us;rg|Place¦aMbKcIdHeFfEgBhAi9jfk,kul,l7m5new eng4ord,p2s1the 0upJyyz;bronx,hamptons;fo,oho,under2yd;acifMek,h0;l,x;land;a0co,idDuc;libu,nhattK;a0gw,hr;s,x;ax,cn,ndianGst;arlem,kg,nd;ay village,re0;at 0enwich;britain,lak2;co,ra;urope,verglad0;es;en,fw,own1xb;dg,gk,hina0lt;town;cn,e0kk,rooklyn;l air,verly hills;frica,m5ntar1r1sia,tl0;!ant1;ct0;ic0; oce0;an;ericas,s|FemaleName¦0:G0;1:G4;2:FT;3:FF;4:FE;5:FU;6:ER;7:GH;8:F1;9:ET;A:GD;B:E7;C:GA;D:FQ;E:FN;F:EI;G:C8;aE4bD6cB9dAJe9Hf92g8Ih85i7Uj6Wk61l4Pm3An2Vo2Sp2Hqu2Fr1Ps0Rt05ursu9vVwPyMzH;aKeIoH;e,la,ra;lHna;da,ma;da,ra;as7GeIol1UvH;et6onBA;le0sen3;an8endBPhiB5iH;lJnH;if3BniHo0;e,f3A;a,helmi0lHma;a,ow;aNeKiH;cIviH;an9YenG4;kD1tor3;da,l8Wnus,rH;a,nHoniD4;a,iDE;leHnesEF;nDOrH;i1y;aTeQhOiNoKrHu9y4;acG6iHu0F;c3na,sH;h9Nta;nIrH;a,i;i9Kya;a5KffaCIna,s5;al3eHomasi0;a,l8Ho6Zres1;g7Vo6YrIssH;!a,ie;eFi,ri7;bOliNmLnJrIs5tHwa0;ia0um;a,yn;iHya;a,ka,s5;a4e4iHmCCra;!ka;a,t5;at5it5;a06carlet2Ze05hViTkye,oRtNuIyH;bFMlvi1;e,sIzH;an2Uet6ie,y;anHi7;!a,e,nH;aEe;aJeH;fHl3EphH;an2;cFBr73;f3nHphi1;d4ia,ja,ya;er4lv3mon1nHobh76;dy;aLeHirlBNo0y9;ba,e0i9lJrH;iHrBRyl;!d71;ia,lBX;ki4nJrIu0w0yH;la,na;i,leAon,ron;a,da,ia,nHon;a,on;l60re0;bNdMi8lLmJndIrHs5vannaE;aEi0;ra,y;aHi4;nt5ra;lBPome;e,ie;in1ri0;a03eYhWiUoIuH;by,thBM;bRcQlPnOsIwe0xH;an95ie,y;aIeHie,lC;ann7ll1marBHtB;!lHnn1;iHyn;e,nH;a,d7X;da,i,na;an8;hel55io;bin,erByn;a,cHkki,na,ta;helC2ki;ea,iannE0oH;da,n13;an0bJgi0i0nHta,y0;aHee;!e,ta;a,eH;cATkaE;chHe,i0mo0n5FquCGvDy0;aCFelHi8;!e,le;een2iH;a0nn;aNeMhKoJrH;iHudenAX;scil1Uyamva8;lly,rt3;ilome0oebe,ylH;is,lis;arl,ggy,nelope,r9t4;ige,m0Fn4Po9rvaBDtIulH;a,et6in1;ricHsy,tA9;a,e,ia;ctav3deIf86lHph86;a,ga,iv3;l3t6;aReQiKoHy9;eIrH;aEeDma;ll1mi;aLcJkHla,na,s5ta;iHki;!ta;hoB4k8ColH;a,eBJ;!mh;l7Una,risF;dJi5PnIo23taH;li1s5;cy,et6;eAiCQ;a01ckenz2eViLoIrignayani,uriBIyrH;a,na,tAV;i4ll9ZnH;a,iH;ca,ka,qB7;a,chPkaOlKmi,nJrHtzi;aHiam;!n8;a,dy,erva,h,n2;a,dJi9LlH;iHy;cent,e;red;!e9;ae9el3I;ag4LgLi,lIrH;edi62isFyl;an2iHliF;nHsAP;a,da;!an,han;b09c9Gd07e,g05i04l02n00rLtKuIv6TxGyHz2;a,bell,ra;de,rH;a,eD;h77il8t2;a,cTgPiKjor2l6Jn2s5tJyH;!aHbe5RjaAlou;m,n9V;a,ha,i0;!aJbAOeIja,lCna,sHt54;!a,ol,sa;!l07;!h,m,nH;!a,e,n1;arJeIie,oHr3Lueri6;!t;!ry;et3JiB;elHi62y;a,l1;dHon,ue9;akranBy;iHlo97;a,ka,n8;a,re,s2;daHg2;!l2Y;alCd2elHge,isBJon0;eiAin1yn;el,le;a0Je09iXoRuLyH;d3la,nH;!a,dIe9VnHsAT;!a,e9U;a,sAR;aB4cKelJiFlIna,pHz;e,iB;a,u;a,la;iHy;a2Ce,l27n8;is,l1IrItt2uH;el9is1;aJeIi7na,rH;aGi7;lei,n1tB;!in1;aRbQd3lMnJsIv3zH;!a,be4Let6z2;a,et6;a,dH;a,sHy;ay,ey,i,y;a,iaJlH;iHy;a8Je;!n4G;b7Verty;!n5T;aOda,e0iMla,nLoJslAUtHx2;iHt2;c3t3;la,nHra;a,ie,o4;a,or1;a,gh,laH;!ni;!h,nH;a,d4e,n4O;cOdon7Ui9kes5na,rNtLurJvIxHy9;mi;ern1in3;a,eHie,yn;l,n;as5is5oH;nya,ya;a,isF;ey,ie,y;a01eWhadija,iOoNrJyH;lHra;a,ee,ie;isHy5D;!tH;a,en,iHy;!e,n48;ri,urtn9C;aNerMl9BmJrHzzy;a,stH;en,in;!berlH;eHi,y;e,y;a,stD;!na,ra;el6QiKlJnIrH;a,i,ri;d4na;ey,i,l9Ss2y;ra,s5;c8Yi5YlPma9nyakumari,rNss5MtKviByH;!e,lH;a,eH;e,i7A;a5FeIhHi3PlCri0y;arGerGie,leDr9Hy;!lyn75;a,en,iHl4Vyn;!ma,n31sF;ei74i,l2;a05eWilUoNuH;anLdKliHstG;aIeHsF;!nAt0W;!n8Z;e,i2Ry;a,iB;!anMcelCd5Wel73han6JlKni,sIva0yH;a,ce;eHie;fi0lCphG;eHie;en,n1;!a,e,n36;!i10lH;!i0Z;anMle0nJrIsH;i5Rsi5R;i,ri;!a,el6Rif1RnH;a,et6iHy;!e,f1P;a,e74iInH;a,e73iH;e,n1;cMd1mi,nIqueliAsmin2Uvie4yAzH;min7;a7eIiH;ce,e,n1s;!lHsFt06;e,le;inIk2lCquelH;in1yn;da,ta;da,lQmOnNo0rMsIvaH;!na;aIiHob6W;do4;!belHdo4;!a,e,l2G;en1i0ma;a,di4es,gr5T;el8ogH;en1;a,eAia0o0se;aNeKilIoHyacin1N;ll2rten1H;a5HdHla5H;a,egard;ath0XiIlHnrietBrmiAst0X;en25ga;di;il78lLnKrHtt2yl78z6G;iHmo4Hri4I;etH;!te;aEnaE;ey,l2;aZeUiPlNold13rJwH;enHyne19;!dolC;acIetHisel8;a,chD;e,ieH;!la;adys,enHor3yn1Z;a,da,na;aKgi,lIna,ov74selH;a,e,le;da,liH;an;!n0;mZnJorgIrH;aldGi,m2Utru76;et6i5W;a,eHna;s1Ovieve;briel3Hil,le,rnet,yle;aSePio0loNrH;anIe8iH;da,e8;!cH;esIiHoi0H;n1s3X;!ca;!rH;a,en45;lIrnH;!an8;ec3ic3;rItiHy7;ma;ah,rah;d0GileDkBl01mVn4DrSsNtMuLvH;aJelIiH;e,ta;in0Byn;!ngelG;geni1la,ni3T;h55ta;meral8peranKtH;eIhHrel9;er;l2Rr;za;iHma,nestGyn;cHka,n;a,ka;eKilJmH;aHie,y;!liA;ee,i1y;lHrald;da,y;aUeSiNlMma,no4oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c3da,nKsHzaI;aHe;!beH;th;!a,or;anor,nH;!a;in1na;en,iHna,wi0;e,th;aXeLiKoHul2W;lor54miniq41n32rHtt2;a,eDis,la,othHthy;ea,y;an0AnaEonAx2;anQbPde,eOiMja,lJmetr3nHsir4X;a,iH;ce,se;a,iIla,orHphiA;es,is;a,l5M;dHrdH;re;!d4Pna;!b2EoraEra;a,d4nH;!a,e;hl3i0mNnLphn1rIvi1YyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,et6iH;!ca,el1Cka;arHia;is;a0Se0Oh06i04lWoKrIynH;di,th3;istHy06;al,i0;lQnNrIurH;tn1F;aKdJiHnJriA;!nH;a,e,n1;el3;!l1T;n2sH;tanHuelo;ce,za;eHleD;en,t6;aJeoIotH;il4D;!pat4;ir7rJudH;et6iH;a,ne;a,e,iH;ce,sY;a4er4ndH;i,y;aQeNloe,rH;isIyH;stal;sy,tH;aIen,iHy;!an1e,n1;!l;lseIrH;!i7yl;a,y;nMrH;isKlImH;aiA;a,eHot6;n1t6;!sa;d4el1RtH;al,el1Q;cIlH;es6i3H;el3ilH;e,ia,y;iZlYmilXndWrOsMtHy9;aKeJhHri0;erGleDrCy;in1;ri0;li0ri0;a2IsH;a2Hie;a,iNlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eHie,y;ne,y;na,sF;a0Ei0E;a,e,l1;isBl2;tlH;in,yn;arb0DeZianYlWoUrH;andSeQiJoIyH;an0nn;nwCok7;an2PdgLg0KtH;n29tH;!aInH;ey,i,y;ny;etH;!t7;an0e,nH;da,na;i7y;bbi7nH;iBn2;ancHossom,ythe;a,he;ca;aScky,lin8niBrOssNtJulaEvH;!erlH;ey,y;hIsy,tH;e,i11y7;!anH;ie,y;!ie;nHt5yl;adIiH;ce;et6iA;!triH;ce,z;a4ie,ra;aliy2Bb26d1Ng1Ji1Bl0Um0Pn03rYsPthe0uLvJyH;anHes5;a,na;a,eHr27;ry;drJgusIrH;el3o4;ti0;a,ey,i,y;hItrH;id;aLlHt1Q;eIi7yH;!n;e,iHy;gh;!nH;ti;iJleIpiB;ta;en,n1t6;an1AelH;le;aZdXeVgRiPja,nItoHya;inet6n3;!aKeIiHmJ;e,ka;!mHt6;ar2;!belIliFmU;sa;!le;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!t6;te;je9rea;la;!bImHstas3;ar3;el;aJberIel3iHy;e,na;!ly;l3n8;da;aUba,eOiLlJma,ta,yH;a,c3sH;a,on,sa;iHys0K;e,s0J;a,cIna,sHza;a,ha,on,sa;e,ia;c3is5jaJna,ssaJxH;aHia;!nd4;nd4;ra;ia;i0nIyH;ah,na;a,is,naE;c5da,leDmMnslLsH;haElH;inHyX;g,n;!h;ey;ee;en;at5g2nH;es;ie;ha;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lCsH;on;yn;!lH;iAyn;ne;agaKbIiH;!gaJ;ey,i7y;!e;il;ah|Person¦a01bZcTdQeOfMgJhHinez,jFkEleDmAnettPo9p7r4s3t2uncle,v0womL;a0irgin maH;lentino rossi,n go3;heresa may,iger woods,yra banks;addam hussaQcarlett johanssRistZlobodan milosevic,omeone,tepGuC;ay romano,eese witherspoQo1ush limbau0;gh;d stewart,naldinho,sario;a0ipV;lmUris hiltM;prah winfrOra;an,essiaen,itt romnNo0ubarek;m0thR;!my;bron james,e;anye west,iefer sutherland,obe bryaN;aime,effersFk rowli0;ng;alle ber0ulk hog3;ry;astBentlem1irl,rand0uy;fa2mo2;an;a0ella;thF;ff0meril lagasse,zekiel;ie;a0enzel washingt4ick wolf,ude;d0lt3nte;!dy;ar2lint1ous0ruz;in;on;dinal wols1son0;! palm5;ey;arack obama,oy,ro0;!ck,th2;dolf hitl1shton kutch1u0;nt;er|WeekDay¦fri4mon4s2t1wed0;!nesd4;hurs2ues2;at0un1;!urd1;!d0;ay0;!s|Date¦autumn,daylight9eom,one d8s5t2w0yesterd8;eek0int5;d6end;mr1o0;d4morrow;!w;ome 1tandard3umm0;er;d0point;ay; time|Time¦a6breakfast 5dinner5e3lunch5m2n0oclock,some5to7;i7o0;on,w;id4or1;od,ve0;ning;time;fternoon,go,ll day,t 0;ni0;ght|Holiday¦0:1Q;1:1P;a1Fb1Bc12d0Ye0Of0Kg0Hh0Di09june07kwanzaa,l04m00nYoVpRrPsFt9v6w4xm03y2;om 2ule;hasho16kippur;hit2int0Xomens equalit8; 0Ss0T;alentines3e2ictor1E;r1Bteran1;! 0;-0ax 0h6isha bav,rinityMu2; b3rke2;y 0;ish2she2;vat;a0Xe prophets birth0;a6eptember14h4imchat tor0Ut 3u2;kk4mmer T;a8p7s6valentines day ;avu2mini atzeret;ot;int 2mhain;a4p3s2valentine1;tephen1;atrick1;ndrew1;amadan,ememberanc0Yos2;a park1h hashana;a3entecost,reside0Zur2;im,ple heart 0;lm2ssovE; s04;rthodox 2stara;christma1easter2goOhoJn0C;! m07;ational 2ew years09;freedom 0nurse1;a2emorial 0lHoOuharram;bMr2undy thurs0;ch0Hdi gr2tin luther k0B;as;a2itRughnassadh;bour 0g baom2ilat al-qadr;er; 2teenth;soliU;d aJmbolc,n2sra and miraj;augurGd2;ependen2igenous people1;c0Bt1;a3o2;ly satur0;lloween,nukkUrvey mil2;k 0;o3r2;ito de dolores,oundhoW;odW;a4east of 2;our lady of guadalupe,the immaculate concepti2;on;ther1;aster8id 3lectYmancip2piphany;atX;al-3u2;l-f3;ad3f2;itr;ha;! 2;m8s2;un0;ay of the dead,ecemb3i2;a de muertos,eciseis de septiembre,wali;er sol2;stice;anad8h4inco de mayo,o3yber m2;on0;lumbu1mmonwealth 0rpus christi;anuk4inese n3ristmas2;! N;ew year;ah;a 0ian tha2;nksgiving;astillCeltaine,lack4ox2;in2;g 0; fri0;dvent,ll 9pril fools,rmistic8s6u2;stral4tum2;nal2; equinox;ia 0;cens2h wednes0sumption of mary;ion 0;e 0;hallows 6s2;ai2oul1t1;nt1;s 0;day;eve|Month¦aBdec9feb7j2mar,nov9oct1sep0;!t8;!o8;an3u0;l1n0;!e;!y;!u1;!ru0;ary;!em0;ber;pr1ug0;!ust;!il|Duration¦centur4d2hour3m0seconds,week3year3;i0onth2;llisecond1nute1;ay0ecade0;!s;ies,y|FirstName¦aEblair,cCdevBj8k6lashawn,m3nelly,re2sh0;ay,e0iloh;a,lby;g1ne;ar1el,org0;an;ion,lo;as8e0;ls7nyatta,rry;am0ess1;ie,m0;ie;an,on;as0heyenne;ey,sidy;lexis,ndra,ubr0;ey|LastName¦0:35;1:3C;2:3A;3:2Z;4:2F;a3Bb31c2Od2Ee2Bf25g1Zh1Oi1Jj1Dk16l0Ym0Mn0Io0Fp04rXsLtGvEwBxAy7zh5;a5ou,u;ng,o;a5eun2Uoshi1Jun;ma5ng;da,guc1Zmo27sh21zaQ;iao,u;a6eb0il5o3right,u;li3Bs2;gn0lk0ng,tanabe;a5ivaldi;ssilj37zqu1;a8h7i2Go6r5sui,urn0;an,ynisI;lst0Orr1Uth;at1Uomps2;kah0Unaka,ylor;aDchCeBhimizu,iAmi9o8t6u5zabo;ar1lliv2AzuD;a5ein0;l23rm0;sa,u3;rn4th;lva,mmo24ngh;mjon4rrano;midt,neid0ulz;ito,n6sa5to;ki;ch1dKtos,z;amAeag1Zi8o6u5;bio,iz,sC;b5dri1MgHj0Sme24osevelt,sZux;erts,ins2;c5ve0E;ci,hards2;ir1os;aDe9h7ic5ow20;as5hl0;so;a5illips;m,n1T;ders20et7r6t5;e0Nr4;ez,ry;ers;h21rk0t5vl4;el,te0J;baAg0Alivei00r5;t5w1O;ega,iz;a5eils2guy1Rix2owak,ym1E;gy,ka5var1K;ji5muV;ma;aDeBiAo7u5;ll0n5rr0Bssolini,ñ5;oz;lina,oJr5zart;al0Me5r0U;au,no;hhail4ll0;rci0s5y0;si;eVmmad4r5tsu07;in5tin1;!o;aBe7i5op1uo;!n5u;coln,dholm;fe6n0Qr5w0J;oy;bv5v5;re;mmy,rs14u;aAennedy,imu9le0Lo7u6wo5;k,n;mar,znets4;bay5vacs;asY;ra;hn,rl8to,ur,zl4;a9en8ha3imen1o5u3;h5nYu3;an5ns2;ss2;ki0Es0S;cks2nsse0D;glesi8ke7noue,shik6to,vano5;u,v;awa;da;as;aBe8it7o6u5;!a3b0ghNynh;a3ffmann,rvat;chcock,l0;mingw6nde5rM;rs2;ay;ns0ErrPs6y5;asCes;an4hi5;moI;a8il,o7r6u5;o,tierr1;ayli3ub0;m1nzal1;nd5o,rcia;hi;er9is8lor7o6uj5;ita;st0urni0;es;ch0;nand1;d6insteGsposi5vaK;to;is2wards;aBeAi8omin7u5;bo5rand;is;gu1;az,mitr4;ov;lgado,vi;nkula,rw6vi5;es,s;in;aEhAlark9o5;hKl5op0rbyn,x;em6li5;ns;an;!e;an7e6iu,o5ristensFu3we;i,ng,u3w,y;!n,on5u3;!g;mpb6rt0st5;ro;ell;aAe7ha3lanco,oyko,r5yrne;ooks,yant;ng;ck6ethov5nnett;en;er,ham;ch,h7iley,rn5;es,i0;er;k,ng;dCl8nd5;ers5r9;en,on,s2;on;eks6iy7var1;ez;ej5;ev;ams|MaleName¦0:CE;1:BK;2:C2;3:BS;4:B4;5:BZ;6:AT;7:9V;8:BC;9:AW;A:AO;B:8W;aB5bA9c98d88e7Hf6Zg6Hh5Wi5Ij4Lk4Bl3Rm2Pn2Eo28p22qu20r1As0Qt07u06v01wOxavi3yHzC;aCor0;cCh8Jne;hDkC;!a5Z;ar51e5Y;ass2i,oDuC;sEu25;nFsEusC;oCsD;uf;ef;at0g;aKeIiDoCyaAQ;lfgang,odrow;lCn1O;bEey,frBJlC;aA6iC;am,e,s;e8Aur;i,nde7sC;!l6t1;de,lDrr5yC;l1ne;lCt3;a94y;aFern1iC;cDha0nceCrg9Cva0;!nt;ente,t5B;lentin49n8Zughn;lyss4Msm0;aTeOhLiJoFrDyC;!l3ro8s1;av9ReCist0oy,um0;nt9Jv55y;bEd7YmCny;!as,mCoharu;aAYie,y;iBy;mCt9;!my,othy;adDeoCia7EomB;!do7O;!de9;dFrC;en8JrC;an8IeCy;ll,n8H;!dy;dgh,ic9Unn3req,ts46;aScotQeOhKiIoGpenc3tCur1Pylve8Jzym1;anEeCua7D;f0phAGvCwa7C;e59ie;!islaw,l6;lom1nA4uC;leyma8ta;dClBm1;!n6;aEeC;lCrm0;d1t1;h6Une,qu0Vun,wn,y8;aCbasti0k1Yl42rg41th,ymo9J;m9n;!tC;!ie,y;lDmCnti22q4Kul;!mAu4;ik,vato6X;aXeThe94iPoGuDyC;an,ou;b6NdDf9pe6SssC;!elAK;ol2Vy;an,bJcIdHel,geGh0landA4mFnEry,sDyC;!ce;coe,s;!a96nA;an,eo;l3Kr;e4Sg3n6oA5ri6A;co,ky;bAe9V;cCl6;ar5Qc5PhDkCo;!ey,ie,y;a87ie;gDid,ub5x,yCza;ansh,nT;g8XiC;na8Ts;ch60fa4lEmDndCpha4sh6Wul,ymo72;alA0ol2Cy;i9Jon;f,ph;ent2inC;cy,t1;aGeEhilDier64ol,reC;st1;!ip,lip;d9Crcy,tC;ar,e2W;b3Udra6Ht46ul;ctav2Wliv3m97rGsDtCum8Vw5;is,to;aDc8TvC;al54;ma;i,l4BvK;athKeIiEoC;aCel,l0ma0r2Y;h,m;cDg4i3KkC;h6Wola;holBkColB;!olB;al,d,il,ls1vC;il52;anCy;!a4i4;aXeUiLoGuDyC;l22r1;hamDr61staC;fa,p4I;ed,mG;dibo,e,hamEis1YntDsCussa;es,he;e,y;ad,ed,mC;ad,ed;cHgu4kFlEnDtchC;!e7;a7Aik;o04t1;e,olC;aj;ah,hCk6;a4eC;al,l;hDlv2rC;le,ri7v2;di,met;ck,hOlMmPnu4rIs1tEuricDxC;!imilian87we7;e,io;eo,hDiBtC;!eo,hew,ia;eCis;us,w;cEio,k81lDqu6Isha7tCv2;i2Jy;in,on;!el,oLus;achCcolm,ik;ai,y;amCdi,moud;adC;ou;aSeOiNlo2ToJuDyC;le,nd1;cFiEkCth3;aCe;!s;gi,s;as,iaC;no;g0nn6SrenEuCwe7;!iC;e,s;!zo;am,on4;a7Cevi,la4UnEoCst3vi;!nC;!a62el;!ny;mDnCr16ur4Vwr4V;ce,d1;ar,o4P;aJeEhaled,iCrist4Xu4Ay3D;er0p,rC;by,k,ollos;en0iFnCrmit,v2;!dDnCt5E;e10y;a7ri4P;r,th;na69rCthem;im,l;aZeRiPoEuC;an,liCst2;an,o,us;aqu2eKhnJnHrFsC;eDhCi7Due;!ua;!ph;dCge;an,i,on;!aCny;h,s,th4Z;!ath4Yie,nA;!l,sCy;ph;an,e,mC;!mA;d,ffHrEsC;sCus;!e;a5KemDmai8oCry;me,ni0Q;i6Wy;!e07rC;ey,y;cId5kHmGrEsDvi3yC;!d5s1;on,p3;ed,od,rCv4O;e51od;al,es,is1;e,ob,ub;k,ob,quC;es;aObrahNchika,gLkeKlija,nuJrHsEtCv0;ai,sC;uki;aCha0i6Hma4sac;ac,iaC;h,s;a,vinCw2;!g;k,nngu53;!r;nacCor;io;im;in,n;aLeGina4WoEuCyd57;be27gCmber4EsE;h,o;m3ra35sCwa3Z;se2;aFctEitEnDrC;be22m0;ry;or;th;bLlKmza,nJo,rEsDyC;a44d5;an,s0;lFo4FrEuCv6;hi41ki,tC;a,o;is1y;an,ey;k,s;!im;ib;aReNiMlenLoJrFuC;illerDsC;!tavo;mo;aEegCov3;!g,orC;io,y;dy,h58nt;nzaCrd1;lo;!n;lbe4Qno,ovan4S;ne,oErC;aCry;ld,rd4O;ffr6rge;bri4l5rCv2;la20r3Fth,y;aSeOiMlKorr0JrC;anEedCitz;!dAeCri25;ri24;cEkC;!ie,lC;in,yn;esKisC;!co,zek;etch3oC;yd;d4lConn;ip;deriEliDng,rnC;an02;pe,x;co;bi0di;ar00dVfrUit0lOmHnGo2rDsteb0th0uge8vCym5zra;an,ere2W;gi,iDnCrol,v2w2;est3Zie;c08k;och,rique,zo;aHerGiDmC;aGe2Q;lDrC;!h0;!io;s1y;nu4;be0Ad1iFliEmDt1viCwood;n,s;er,o;ot1Us;!as,j44sC;ha;a2en;!dAg32mFuDwC;a26in;arC;do;o0Tu0T;l,nC;est;aZePiMoFrEuDwCyl0;ay8ight;a8dl6nc0st2;ag0ew;minGnEri0ugDyC;le;!lB;!a29nCov0;e7ie,y;go,icC;!k;armuDeCll1on,rk;go;id;anJj0lbeImetri9nGon,rFsEvDwCxt3;ay8ey;en,in;hawn,mo09;ek,ri0G;is,nCv3;is,y;rt;!dC;re;lLmJnIrEvC;e,iC;!d;en,iEne7rCyl;eCin,yl;l2Wn;n,o,us;!e,i4ny;iCon;an,en,on;e,lB;as;a07e05hXiar0lMoHrFuDyrC;il,us;rtC;!is;aCistobal;ig;dy,lFnDrC;ey,neli9y;or,rC;ad;by,e,in,l2t1;aHeEiCyJ;fCnt;fo0Dt1;meDt9velaC;nd;nt;rEuDyC;!t1;de;enC;ce;aGeFrisDuC;ck;!tC;i0oph3;st3;d,rlCs;eCie;s,y;cCdric,s11;il;lFmer1rC;ey,lDro7y;ll;!os,t1;eb,v2;ar03eVilUlaToQrDuCyr1;ddy,rtJ;aKeFiEuDyC;an,ce,on;ce,no;an,ce;nDtC;!t;dDtC;!on;an,on;dDndC;en,on;!foCl6y;rd;bDrCyd;is;!by;i8ke;al,lA;nGrCshoi;at,nDtC;!r11;aCie;rd0M;!edict,iDjam2nA;ie,y;to;n6rCt;eCy;tt;ey;ar0Yb0Od0Kgust2hm0Hid5ja0FlZmXnPputsiOrFsaEuCya0ziz;gust9st2;us;hi;aJchIi4jun,maGnEon,tCy0;hCu07;ur;av,oC;ld;an,nd05;el;ie;ta;aq;dHgel00tC;hoFoC;i8nC;!iXy;ne;ny;reCy;!as,s,w;ir,mCos;ar;an,bePd5eJfGi,lFonEphonIt1vC;aNin;on;so,zo;an,en;onDrC;edK;so;c,jaFksandEssaFxC;!and3;er;ar,er;ndC;ro;rtC;!o;ni;en;ad,eC;d,t;in;aDoCri0vik;lfo;mCn;!a;dGeFraDuC;!bakr,lfazl;hCm;am;!l;allFel,oulaye,ulC;!lDrahm0;an;ah,o;ah;av,on|Verb¦awak9born,cannot,fr8g7h5k3le2m1s0wors9;e8h3;ake sure,sg;ngth6ss6;eep tabs,n0;own;as0e2;!t2;iv1onna;ight0;en|PhrasalVerb¦0:71;1:6P;2:7D;3:73;4:6I;5:7G;6:75;7:6O;8:6B;9:6C;A:5H;B:70;C:6Z;a7Gb62c5Cd59e57f45g3Nh37iron0j33k2Yl2Km2Bn29o27p1Pr1Es09tQuOvacuum 1wGyammerCzD;eroAip EonD;e0k0;by,up;aJeGhFiEorDrit52;d 1k2Q;mp0n49pe0r8s8;eel Bip 7K;aEiD;gh 06rd0;n Br 3C;it 5Jk8lk6rm 0Qsh 73t66v4O;rgeCsD;e 9herA;aRePhNiJoHrFuDype 0N;ckArn D;d2in,o3Fup;ade YiDot0y 32;ckle67p 79;ne66p Ds4C;d2o6Kup;ck FdEe Dgh5Sme0p o0Dre0;aw3ba4d2in,up;e5Jy 1;by,o6U;ink Drow 5U;ba4ov7up;aDe 4Hll4N;m 1r W;ckCke Elk D;ov7u4N;aDba4d2in,o30up;ba4ft7p4Sw3;a0Gc0Fe09h05i02lYmXnWoVpSquare RtJuHwD;earFiD;ngEtch D;aw3ba4o6O; by;ck Dit 1m 1ss0;in,up;aIe0RiHoFrD;aigh1LiD;ke 5Xn2X;p Drm1O;by,in,o6A;n2Yr 1tc3H;c2Xmp0nd Dr6Gve6y 1;ba4d2up;d2o66up;ar2Uell0ill4TlErDurC;ingCuc8;a32it 3T;be4Brt0;ap 4Dow B;ash 4Yoke0;eep EiDow 9;c3Mp 1;in,oD;ff,v7;gn Eng2Yt Dz8;d2o5up;in,o5up;aFoDu4E;ot Dut0w 5W;aw3ba4f36o5Q;c2EdeAk4Rve6;e Hll0nd GtD; Dtl42;d2in,o5upD;!on;aw3ba4d2in,o1Xup;o5to;al4Kout0rap4K;il6v8;at0eKiJoGuD;b 4Dle0n Dstl8;aDba4d2in52o3Ft2Zu3D;c1Ww3;ot EuD;g2Jnd6;a1Wf2Qo5;ng 4Np6;aDel6inAnt0;c4Xd D;o2Su0C;aQePiOlMoKrHsyc29uD;ll Ft D;aDba4d2in,o1Gt33up;p38w3;ap37d2in,o5t31up;attleCess EiGoD;p 1;ah1Gon;iDp 52re3Lur44wer 52;nt0;ay3YuD;gAmp 9;ck 52g0leCn 9p3V;el 46ncilA;c3Oir 2Hn0ss FtEy D;ba4o4Q; d2c1X;aw3ba4o11;pDw3J;e3It B;arrow3Serd0oD;d6te3R;aJeHiGoEuD;ddl8ll36;c16p 1uth6ve D;al3Ad2in,o5up;ss0x 1;asur8lt 9ss D;a19up;ke Dn 9r2Zs1Kx0;do,o3Xup;aOeMiHoDuck0;a16c36g 0AoDse0;k Dse34;aft7ba4d2forw2Ain3Vov7uD;nd7p;e GghtFnEsDv1T;ten 4D;e 1k 1; 1e2Y;ar43d2;av1Ht 2YvelD; o3L;p 1sh DtchCugh6y1U;in3Lo5;eEick6nock D;d2o3H;eDyA;l2Hp D;aw3ba4d2fSin,o05to,up;aFoEuD;ic8mpA;ke2St2W;c31zz 1;aPeKiHoEuD;nker2Ts0U;lDneArse2O;d De 1;ba4d2oZup;de Et D;ba4on,up;aw3o5;aDlp0;d Fr Dt 1;fDof;rom;in,oO;cZm 1nDve it;d Dg 27kerF;d2in,o5;aReLive Jloss1VoFrEunD; f0M;in39ow 23; Dof 0U;aEb17it,oDr35t0Ou12;ff,n,v7;bo5ft7hJw3;aw3ba4d2in,oDup,w3;ff,n,ut;a17ek0t D;aEb11d2oDr2Zup;ff,n,ut,v7;cEhDl1Pr2Xt,w3;ead;ross;d aEnD;g 1;bo5;a08e01iRlNoJrFuD;cDel 1;k 1;eEighten DownCy 1;aw3o2L;eDshe1G; 1z8;lFol D;aDwi19;bo5r2I;d 9;aEeDip0;sh0;g 9ke0mDrD;e 2K;gLlJnHrFsEzzD;le0;h 2H;e Dm 1;aw3ba4up;d0isD;h 1;e Dl 11;aw3fI;ht ba4ure0;eInEsD;s 1;cFd D;fDo1X;or;e B;dQl 1;cHll Drm0t0O;apYbFd2in,oEtD;hrough;ff,ut,v7;a4ehi1S;e E;at0dge0nd Dy8;o1Mup;o09rD;ess 9op D;aw3bNin,o15;aShPlean 9oDross But 0T;me FoEuntD; o1M;k 1l6;aJbIforGin,oFtEuD;nd7;ogeth7;ut,v7;th,wD;ard;a4y;pDr19w3;art;eDipA;ck BeD;r 1;lJncel0rGsFtch EveA; in;o16up;h Bt6;ry EvD;e V;aw3o12;l Dm02;aDba4d2o10up;r0Vw3;a0He08l01oSrHuD;bbleFcklTilZlEndlTrn 05tDy 10zz6;t B;k 9; ov7;anMeaKiDush6;ghHng D;aEba4d2forDin,o5up;th;bo5lDr0Lw3;ong;teD;n 1;k D;d2in,o5up;ch0;arKgJil 9n8oGssFttlEunce Dx B;aw3ba4;e 9; ar0B;k Bt 1;e 1;d2up; d2;d 1;aIeed0oDurt0;cFw D;aw3ba4d2o5up;ck;k D;in,oK;ck0nk0st6; oJaGef 1nd D;d2ov7up;er;up;r0t D;d2in,oDup;ff,ut;ff,nD;to;ck Jil0nFrgEsD;h B;ainCe B;g BkC; on;in,o5; o5;aw3d2o5up;ay;cMdIsk Fuction6; oD;ff;arDo5;ouD;nd;d D;d2oDup;ff,n;own;t D;o5up;ut|Modal¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to;ay,ight,ust;an,o0;uld|Adjective¦0:73;1:7I;2:7O;3:7H;4:7A;5:5A;6:4Q;7:48;8:47;9:7F;A:5Z;B:71;C:6Y;D:6X;E:5V;a6Hb63c5Pd55e4Rf48g40h3Pi34j32k31l2Qm2Fn26o1Qp1Aquack,r10s0Gt09uQvNwFyear5;arp0eJholeIiHoF;man5oFu6A;d6Czy;despr73s5E;!sa7;eGlFste25;co1Hl o4J;!k5;aGiFola4A;b7Rce versa,ol53;ca2gabo61nilla;ltWnJpGrb58su4tterF;!moD; f33b1NpGsFti1G;ca7et,ide dMtairs;er,i3M;aPbeco6Pconvin26deMeLfair,ivers4knKprecedYrIsGwF;iel1Zritt5X;i1UuF;pervis0specti3;eFu5;cognLgul6Fl6F;own;ndi3v5Rxpect0;cid0rF;!grou5MsF;iz0tood;b7ppeaLssu6EuthorF;iz0;i23ra;aJeHhough4NoGrF;i1oubl0;geth6p,rpC;en5OlFm4Yrr2Tst0;li3;boo,lFn;ent0;aXcWeUhTiRmug,nobbi3DoPpOqueami3DtJuFymb62;bHi gener53pFrprisi3;erFre0K;! dup6b,i28;du0seq4S;anda6SeIi0OrFy37;aightFip0; fFfF;or59;adfaDreotyp0;aEec2Fir1IlendCot on; call0le,mb6phist1WrFu0Wvi40;dCry;gnifica2nF;ceEg7;am2Oe6ocki3ut;cFda1em5lfi2Xni1Vpa67re8;o1Fr3U;at56ient27reec56;cr0me,ns serif;aMeIiGoF;buDtt4SuSy4;ghtFv4;!-28fA;ar,bel,condi1du61fres50lHpublic3UsFtard0;is46oF;lu1na2;e1Duc44;bCciF;al,st;aPeNicayu8lacCopuliDrGuF;bl58mp0;eJiGoF;!b09fuBmi30p6;mGor,sFva1;ti8;a4Ue;ciBmF;a0Hi5I;ac20rFti1;fe9ma2Tplexi3v33;rFst;allelHtF;-tiFi4;me;!ed;bQffOkNld fashion0nMpLrg1Hth6utKvF;al,erF;!aHniGt,wF;eiFrouF;ght;ll;do0Ver,g2Lsi45;en,posi1; boa5Fg2Jli8;!ay; gua5DbFli8;eat;eHsF;cFer0Hole1;e8uE;d2Sse;ak0eMiLoFua4O;nJrGtF;ab7;thF;!eF;rn;chala2descri4Zstop;ght5;arby,cessa3Wighbor5xt;aNeLiIoFultip7;bi7derGlFnth5ot,st;dy;a1n;nFx0;iaFor;tuE;di4EnaFre;ci3;cFgenta,in,j03keshift,le,mmoth,ny,sculi8;abEho;aOeJiGoFu13;uti12vi3;mGteraF;l,te;it0;ftIgFth4;al,eGitiF;ma1;nda3C;!-0C;nguCst,tt6;ap1Sind5no0A;agg0uF;niOstifi0veni7;de4gno4Blleg4mSnHpso 1VrF;a1releF;va2; NaMbr0corLdJfluenTiTnIsHtF;a9enBoxF;ic36;a8i2R;a1er,oce2;iGoF;or;re9;deq3Jppr2Y;fFsitu,vitro;ro2;mJpF;arHerfe9oFrop6;li1rtF;a2ed;ti4;eFi0Q;d2QnB;aKelJiHoFumdr3B;neDok0rrFs07ur5;if2S;ghfalut1OspF;an2Q;liZpfA;lInHrF;d05roF;wi3;dy,gi3;f,low0;ainfAener2Jiga22lLoKraHuF;ilFng ho;ty;cGtF;efAis;efA;ne,od;ea2Dob4;aUeOinNlMoHrF;a1TeFoz1K;e2Dq12tfA;oHrF; keeps,eFm6tuna1;g04ign;liF;sh;ag2Zue2;al,i1;dJmGrF;ti7;a7ini8;ne;le; up;bl0i2lBr Fux,vori1;oFreac1F;ff;aOfficie2lNmiMnKre9there4veJxF;a9cess,peHtraGuF;be2Ml0I;!va1E;ct0rt;n,ryday; Fcouragi3tiE;rou1sui1;ne2;abo23dQe18i1;g6sF;t,ygF;oi3;er;aVeNiHoFrea15ue;mina2ne,ubF;le,tfA;dact1Bfficu1OsGvF;erB;creHeas0gruntl0honeDordGtF;a2ress0;er5;et; LadpKfJgene1PliHrang0spe1PtGvoF;ut;ail0ermin0;be1Mca1ghF;tfA;ia2;an;facto;i5magFngeroZs0I;ed,i3;ly;ertaRhief,ivil,oHrF;aFowd0u0H;mp0v02z0;loNmLnGoi3rrFve0P;e9u1I;cre1grIsHtF;emFra0F;po0D;ta2;ue2;mer08pleF;te,x;ni4ss4;in;aPeLizarElJoGrF;and new,isk,okP;gGna fiWttom,urgeoF;is;us;ank,iI;re;autifAhiGlov0nFst,yoG;eVt;nd;ul;ckGnkru0XrrF;en;!wards; priori,b0Nc0Kd0AfraCg05h04lZma06ntiquYpUrOsMttracti07utheLvIwF;aGkF;wa0U;ke,re;ant garGerF;age;de;ntV;leep,tonisF;hi3;ab,bitIroHtiF;fiF;ci4;ga2;raF;ry;pFt;are2etiPrF;oprF;ia1;at0;arIcohGeFiMl,oof;rt;olF;ic;mi3;ead;ainDgressiGoniF;zi3;ve;st;id; MeKuJvF;aGerB;se;nc0;ed;lt;pt,qF;ua1;hoc,infinitF;um;cuGtu4u1;al;ra1;erPlOoMruLsGuF;nda2;e2oGtra9;ct;lu1rbi3;ng;te;pt;aFve;rd;aze,e;ra2;nt|Comparable¦0:41;1:4I;2:45;3:4B;4:3X;5:2Y;a4Ob44c3Od3De35f2Rg2Fh24i1Vj1Uk1Rl1Im1Cn16o14p0Tqu0Rr0IsRtKuIvFw7y6za12;ell27ou3;aBe9hi1Yi7r6;o3y;ck0Mde,l6n1ry,se;d,y;a6i4Mt;k,ry;n1Tr6sI;m,y;a7e6ulgar;nge4rda2xi3;gue,in,st;g0n6pco3Mse4;like0ti1;aAen9hi8i7ough,r6;anqu2Qen1ue;dy,g3Ume0ny,r09;ck,n,rs2R;d42se;ll,me,rt,s6wd47;te4;aVcarUeThRiQkin0GlMmKoHpGqua1HtAu7w6;eet,ift;b7dd15per0Hr6;e,re2J;sta2Ht5;aAe9iff,r7u6;pXr1;a6ict,o3;ig3Hn0W;a1ep,rn;le,rk;e24i3Hright0;ci2Aft,l7o6re,ur;n,thi3;emn,id;a6el0ooth;ll,rt;e8i6ow,y;ck,g37m6;!y;ek,nd3F;ck,l0mp5;a6iUort,rill,y;dy,ll0Zrp;cu0Tve0Txy;ce,ed,y;d,fe,int0l1Xv16;aBe9i8o6ude;mantic,o1Ksy,u6;gh,nd;ch,pe,tzy;a6d,mo0J;dy,l;gg7ndom,p6re,w;id;ed;ai2i6;ck,et;aFhoEi1SlCoBr8u6;ny,r6;e,p5;egna2ic7o6;fou00ud;ey,k0;li06or,te1D;a6easa2;in,nt;ny;in4le;dd,f6i0ld,ranR;fi11;aAe8i7o6;b5isy,rm16sy;ce,mb5;a6w;r,t;ive,rr02;aAe8ild,o7u6;nda1Ate;ist,o1;a6ek,llY;n,s0ty;d,tuR;aCeBi9o6ucky;f0Vn7o1Eu6ve0w18y0U;d,sy;e0g;g1Uke0tt5v6;e0i3;an,wd;me,r6te;ge;e7i6;nd;en;ol0ui1P;cy,ll,n6;sBt6;e6ima8;llege2r6;es7media6;te;ti3;ecu6ta2;re;aEeBiAo8u6;ge,m6ng1R;b5id;ll6me0t;ow;gh,l0;a6f04sita2;dy,v6;en0y;nd1Hppy,r6te4;d,sh;aGenFhDiClBoofy,r6;a9e8is0o6ue1E;o6ss;vy;at,en,y;nd,y;ad,ib,ooI;a2d1;a6o6;st0;t5uiY;u1y;aIeeb5iDlat,oAr8u6;ll,n6r14;!ny;aHe6iend0;e,sh;a7r6ul;get4mG;my;erce8n6rm,t;an6e;ciC;! ;le;ir,ke,n0Fr,st,t,ulA;aAerie,mp9sse7v6xtre0Q;il;nti6;al;ty;r7s6;tern,y;ly,th0;aFeCi9r7u6;ll,mb;u6y;nk;r7vi6;ne;e,ty;a6ep,nD;d6f,r;!ly;mp,pp03rk;aHhDlAo8r7u6;dd0r0te;isp,uel;ar6ld,mmon,ol,st0ward0zy;se;e6ou1;a6vW;n,r;ar8e6il0;ap,e6;sy;mi3;gey,lm8r6;e4i3;ful;!i3;aNiLlIoEr8u6;r0sy;ly;aAi7o6;ad,wn;ef,g7llia2;nt;ht;sh,ve;ld,r7un6;cy;ed,i3;ng;a7o6ue;nd,o1;ck,nd;g,tt6;er;d,ld,w1;dy;bsu9ng8we6;so6;me;ry;rd|Adverb¦a07by 05d01eYfShQinPjustOkinda,mMnJoEpCquite,r9s5t2up1very,w0Bye0;p,s; to,wards5;h1o0wiO;o,t6ward;en,us;everal,o0uch;!me1rt0; of;hXtimes,w07;a1e0;alS;ndomRthN;ar excellDer0oint blank; Mhaps;f3n0;ce0ly;! 0;ag00moU; courHten;ewJo0; longEt 0;onHwithstanding;aybe,eanwhiAore0;!ovB;! aboS;deed,steT;en0;ce;or2u0;l9rther0;!moH; 0ev3;examp0good,suF;le;n mas1v0;er;se;e0irect1; 1finite0;ly;ju7trop;far,n0;ow; CbroBd nauseam,gAl5ny2part,side,t 0w3;be5l0mo5wor5;arge,ea4;mo1w0;ay;re;l 1mo0one,ready,so,ways;st;b1t0;hat;ut;ain;ad;lot,posteriori|Expression¦a02b01dXeVfuck,gShLlImHnGoDpBshAu7voi04w3y0;a1eLu0;ck,p;!a,hoo,y;h1ow,t0;af,f;e0oa;e,w;gh,h0;! 0h,m;huh,oh;eesh,hh,it;ff,hew,l0sst;ease,z;h1o0w,y;h,o,ps;!h;ah,ope;eh,mm;m1ol0;!s;ao,fao;a4e2i,mm,oly1urr0;ah;! mo6;e,ll0y;!o;ha0i;!ha;ah,ee,o0rr;l0odbye;ly;e0h,t cetera,ww;k,p;'oh,a0uh;m0ng;mit,n0;!it;ah,oo,ye; 1h0rgh;!em;la|Preposition¦'o,-,aKbHcGdFexcept,fEinDmidPnotwithstandiQoBpRqua,sAt6u3vi2w0;/o,hereMith0;!in,oQ;a,s-a-vis;n1p0;!on;like,til;h0ill,owards;an,r0;ough0u;!oI;ans,ince,o that;',f0n1ut;!f;!to;or,rom;espite,own,u3;hez,irca;ar1e0oAy;low,sides,tween;ri6;',bo7cross,ft6lo5m3propos,round,s1t0;!op;! long 0;as;id0ong0;!st;ng;er;ut|Conjunction¦aEbAcuz,how8in caDno7o6p4supposing,t1vers5wh0yet;eth8ile;h0o;eref9o0;!uC;l0rovided that;us;r,therwi6; matt1r;!ev0;er;e0ut;cau1f0;ore;se;lthou1nd,s 0;far as,if;gh|Determiner¦aAboth,d8e5few,l3mu7neiCown,plenty,some,th2various,wh0;at0ich0;evB;at,e3is,ose;a,e0;!ast,s;a1i6l0nough,very;!se;ch;e0u;!s;!n0;!o0y;th0;er","conjugations":"t:ake,ook,,,aken|:can,could,can,_|free:_,,,ing|puk:e,,,ing|ar:ise,ose,,,isen|babys:it,at|:be,was,is,am,been|:is,was,is,being|beat:_,,,ing,en|beg:in,an,,inning,un|ban:_,ned,,ning|bet:_,,,,_|bit:e,_,,ing,ten|ble:ed,d,,,d|bre:ed,d|br:ing,ought,,,ought|broadcast:_,_|buil:d,t,,,t|b:uy,ought,,,ought|cho:ose,se,,osing,sen|cost:_,_|deal:_,t,,,t|d:ie,ied,,ying|d:ig,ug,,igging,ug|dr:aw,ew,,,awn|dr:ink,ank,,,unk|dr:ive,ove,,iving,iven|:eat,ate,,eating,eaten|f:all,ell,,,allen|fe:ed,d,,,d|fe:el,lt|f:ight,ought,,,ought|f:ind,ound|fl:y,ew,,,own|bl:ow,ew,,,own|forb:id,ade|edit:_,,,ing|forg:et,ot,,eting,otten|forg:ive,ave,,iving,iven|fr:eeze,oze,,eezing,ozen|g:et,ot|g:ive,ave,,iving,iven|:go,went,goes,,gone|h:ang,ung,,,ung|ha:ve,d,s,ving,d|hear:_,d,,,d|hid:e,_,,,den|h:old,eld,,,eld|hurt:_,_,,,_|la:y,id,,,id|le:ad,d,,,d|le:ave,ft,,,ft|l:ie,ay,,ying|li:ght,t,,,t|los:e,t,,ing|ma:ke,de,,,de|mean:_,t,,,t|me:et,t,,eting,t|pa:y,id,,,id|read:_,_,,,_|r:ing,ang,,,ung|r:ise,ose,,ising,isen|r:un,an,,unning,un|sa:y,id,ys,,id|s:ee,aw,,eeing,een|s:ell,old,,,old|sh:ine,one,,,one|sho:ot,t,,,t|show:_,ed|s:ing,ang,,,ung|s:ink,ank|s:it,at|slid:e,_,,,_|sp:eak,oke,,,oken|sp:in,un,,inning,un|st:and,ood|st:eal,ole|st:ick,uck|st:ing,ung|:stream,,,,|str:ike,uck,,iking|sw:ear,ore|sw:im,am,,imming|sw:ing,ung|t:each,aught,eaches|t:ear,ore|t:ell,old|th:ink,ought|underst:and,ood|w:ake,oke|w:ear,ore|w:in,on,,inning|withdr:aw,ew|wr:ite,ote,,iting,itten|t:ie,ied,,ying|ski:_,ied|:boil,,,,|miss:_,,_|:act,,,,|compet:e,ed,,ing|:being,were,are,are|impl:y,ied,ies|ic:e,ed,,ing|develop:_,ed,,ing|wait:_,ed,,ing|aim:_,ed,,ing|spil:l,t,,,led|drop:_,ped,,ping|log:_,ged,,ging|rub:_,bed,,bing|smash:_,,es|egg:_,ed|suit:_,ed,,ing|age:_,d,s,ing|shed:_,_,s,ding|br:eak,oke|ca:tch,ught|d:o,id,oes|b:ind,ound|spread:_,_|become:_,,,,_|ben:d,,,,t|br:ake,,,,oken|burn:_,,,,ed|burst:_,,,,_|cl:ing,,,,ung|c:ome,ame,,,ome|cre:ep,,,,pt|cut:_,,,,_|dive:_,,,,d|dream:_,,,,t|fle:e,,,eing,d|fl:ing,,,,ung|got:_,,,,ten|grow:_,,,,n|hit:_,,,,_|ke:ep,,,,pt|kne:el,,,,lt|know:_,,,,n|leap:_,,,,t|len:d,,,,t|lo:ose,,,,st|prove:_,,,,n|put:_,,,,_|quit:_,,,,_|rid:e,,,,den|s:eek,,,,ought|sen:d,,,,t|set:_,,,,_|sew:_,,,,n|shake:_,,,,n|shave:_,,,,d|shut:_,,,,_|s:eat,,,,at|sla:y,,,,in|sle:ep,,,,pt|sn:eak,,,,uck|spe:ed,,,,d|spen:d,,,,t|sp:it,,,,at|split:_,,,,_|spr:ing,,,,ung|st:ink,unk,,,unk|strew:_,,,,n|sw:are,,,,orn|swe:ep,,,,pt|thrive:_,,,,d|undergo:_,,,,ne|upset:_,,,,_|w:eave,,,,oven|we:ep,,,,pt|w:ind,,,,ound|wr:ing,,,,ung","plurals":"addend|um|a,alga|e,alumna|e,alumn|us|i,appendi|x|ces,avocado|s,bacill|us|i,barracks|,beau|x,bus|es,cact|us|i,chateau|x,analys|is|es,diagnos|is|es,parenthes|is|es,prognos|is|es,synops|is|es,thes|is|es,child|ren,circus|es,clothes|,corp|us|ora,criteri|on|a,curricul|um|a,database|s,deer|,echo|es,embargo|es,epoch|s,f|oot|eet,gen|us|era,g|oose|eese,halo|s,hippopotam|us|i,ind|ex|ices,larva|e,lea|f|ves,librett|o|i,loa|f|ves,m|an|en,matri|x|ces,memorand|um|a,modul|us|i,mosquito|es,move|s,op|us|era,ov|um|a,ox|en,pe|rson|ople,phenomen|on|a,quiz|zes,radi|us|i,referend|um|a,rodeo|s,sex|es,shoe|s,sombrero|s,stomach|s,syllab|us|i,tableau|x,thie|f|ves,t|ooth|eeth,tornado|s,tuxedo|s,zero|s","patterns":{"Person":["master of #Noun","captain of the #Noun"]},"regex":{"HashTag":["^#[a-z]+"],"Gerund":["^[a-z]+n['’]$"],"PhoneNumber":["^[0-9]{3}-[0-9]{4}$","^[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$"],"Time":["^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$","^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$","^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$","^[PMCE]ST$","^utc ?[+-]?[0-9]+?$","^[a-z0-9]*? o'?clock$"],"Date":["^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$","^[0-9]{1,4}/[0-9]{1,2}/[0-9]{1,4}$"],"Money":["^[-+]?[$€¥£][0-9]+(.[0-9]{1,2})?$","^[-+]?[$€¥£][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$"],"Value":["^[-+]?[$€¥£][0-9]+(.[0-9]{1,2})?$","^[-+]?[$€¥£][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$","^[0-9.]{1,2}[-–][0-9]{1,2}$"],"NumberRange":["^[0-9.]{1,4}(st|nd|rd|th)?[-–][0-9.]{1,4}(st|nd|rd|th)?$","^[0-9.]{1,2}[-–][0-9]{1,2}$"],"NiceNumber":["^[-+]?[0-9.,]{1,3}(,[0-9.,]{3})+(.[0-9]+)?$"],"NumericValue":["^[-+]?[0-9]+(.[0-9]+)?$","^.?[0-9]+([0-9,.]+)?%$"],"Percent":["^.?[0-9]+([0-9,.]+)?%$"],"Cardinal":["^.?[0-9]+([0-9,.]+)?%$"],"Fraction":["^[0-9]{1,4}/[0-9]{1,4}$"],"LastName":["^ma?c'.*","^o'[drlkn].*"]}}`},{}],209:[function(e,t){"use strict";const n=e("../subset/verbs/methods/conjugate/faster.js");t.exports=function(e){return Object.keys(e).forEach((t)=>{this.conjugations[t]=this.conjugations[t]||{},this.words[t]=this.words[t]||"Infinitive",Object.keys(e[t]).forEach((n)=>{let r=e[t][n];this.conjugations[t][n]=r,this.words[r]=this.words[r]||n,this.cache.toInfinitive[e[t][n]]=t});let r=n(t,this);Object.keys(r).forEach((e)=>{let t=r[e];!1===this.words.hasOwnProperty(t)&&(this.words[t]=e)})}),e}},{"../subset/verbs/methods/conjugate/faster.js":79}],210:[function(e,t){t.exports=function(e){return Object.keys(e).forEach((t)=>{this.patterns[t]=e[t]}),e}},{}],211:[function(e,t){"use strict";t.exports=function(e){return Object.keys(e).forEach((t)=>{let n=e[t];this.plurals[t]=n,this.words[n]=this.words[n]||"Plural",this.words[t]=this.words[t]||"Singular",this.cache.toSingular[n]=t}),e}},{}],212:[function(e,t){t.exports=function(e){Object.keys(e).forEach((t)=>{this.regex.push({reg:new RegExp(t,"i"),tag:e[t]})})}},{}],213:[function(e,t){"use strict";const n=e("../tags/addDownward");t.exports=function(e){return Object.keys(e).forEach((t)=>{let n=e[t];n.notA=n.notA||[],n.downward=n.downward||[],this.tags[t]=n}),n(this.tags),e}},{"../tags/addDownward":135}],214:[function(e,t){"use strict";const n=e("../term/methods/normalize/normalize").normalize,r=e("../subset/nouns/methods/pluralize"),a=e("../subset/verbs/methods/conjugate/faster.js"),s=e("../subset/adjectives/methods"),o=/ /,i=function(e){return e=n(e),e=e.replace(/\s+/," "),e=e.replace(/[.\?,;\!]/g,""),e};t.exports=function(e){return Object.keys(e).forEach((t)=>{let n=e[t];if(t=i(t),this.words[t]=n,!0===o.test(t)){let e=t.split(o);this.cache.firstWords[e[0]]=!0}if("Singular"===n){let e=r(t,{});return void(e&&e!==t&&(this.words[e]="Plural"))}if("Infinitive"===n){let e=a(t,this);return void Object.keys(e).forEach((t)=>{this.words[e[t]]=t})}if("PhrasalVerb"===n){let e=t.split(/ /),n=a(e[0],this);return void Object.keys(n).forEach((t)=>{let r=n[t]+" "+e[1];this.words[r]="PhrasalVerb",this.cache.firstWords[n[t]]=!0})}if("Comparable"===n){let e=s.toComparative(t);e&&t!==e&&(this.words[e]="Comparative");let n=s.toSuperlative(t);n&&t!==n&&(this.words[n]="Superlative")}}),e}},{"../subset/adjectives/methods":11,"../subset/nouns/methods/pluralize":44,"../subset/verbs/methods/conjugate/faster.js":79,"../term/methods/normalize/normalize":149}],215:[function(e,t){"use strict";const n=e("../fns");let r=e("./_data"),a=e("./more-data"),s=e("../tags"),o=e("./unpack"),i=e("./addTags"),l=e("./addWords"),d=e("./addRegex"),u=e("./addConjugations"),m=e("./addPatterns"),c=e("./addPlurals"),h=e("./more-data/misc");const p=(e,t)=>{let n=Object.keys(t);for(let r=0;r<n.length;r++)e[n[r]]=t[n[r]];return e};let g=function(){this.words={},this.tags=s,this.regex=[],this.patterns={},this.conjugations={},this.plurals={},this.cache={firstWords:{},toInfinitive:{},toSingular:{}}};g.prototype.addTags=i,g.prototype.addWords=l,g.prototype.addRegex=d,g.prototype.addConjugations=u,g.prototype.addPlurals=c,g.prototype.addPatterns=m,g.prototype.clone=function(){let e=new g;return["words","firstWords","tagset","regex","patterns","conjugations","plurals"].forEach((t)=>{this[t]&&(e[t]=n.copy(this[t]))}),e},g.prototype.plugin=function(e){e=o(e),e.tags&&this.addTags(e.tags),e.regex&&this.addRegex(e.regex),e.patterns&&this.addPatterns(e.patterns),e.conjugations&&this.addConjugations(e.conjugations),e.plurals&&this.addPlurals(e.plurals),e.words&&this.addWords(e.words)};let f=new g;f.plugin(r),f.addWords(h),a.forEach((e)=>{p(f.words,e)}),t.exports={w:f,reBuild:function(){let e=new g;return e.plugin(r),e.addWords(h),a.forEach((t)=>{p(e.words,t)}),e}}},{"../fns":3,"../tags":137,"./_data":208,"./addConjugations":209,"./addPatterns":210,"./addPlurals":211,"./addRegex":212,"./addTags":213,"./addWords":214,"./more-data":217,"./more-data/misc":219,"./unpack":223}],216:[function(e,t){"use strict";let n={Noun:["arc","al","exp","fy","pd","pl","plz","tce","bl","ma","ba","lit","ex","eg","ie","ca","cca","vs","etc","esp","ft","bc","ad","md","corp","col"],Organization:["dept","univ","assn","bros","inc","ltd","co","yahoo","joomla","jeopardy"],Place:["rd","st","dist","mt","ave","blvd","cl","ct","cres","hwy","ariz","cal","calif","colo","conn","fla","fl","ga","ida","ia","kan","kans","minn","neb","nebr","okla","penna","penn","pa","dak","tenn","tex","ut","vt","va","wis","wisc","wy","wyo","usafa","alta","ont","que","sask"],Month:["jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec"],Date:["circa"],Honorific:["adj","adm","adv","asst","atty","bldg","brig","capt","cmdr","comdr","cpl","det","dr","esq","gen","gov","hon","jr","llb","lt","maj","messrs","mister","mlle","mme","mr","mrs","ms","mstr","op","ord","phd","prof","pvt","rep","reps","res","rev","sen","sens","sfc","sgt","sir","sr","supt","surg"],Value:["no"]},r={};const a=Object.keys(n);for(let s=0;s<a.length;s++){const e=n[a[s]];for(let t=0;t<e.length;t++)r[e[t]]=[a[s],"Abbreviation"]}t.exports=r},{}],217:[function(e,t){t.exports=[e("./abbreviations"),e("./irregularAdjectives").lexicon,e("./numbers").lexicon,e("./orgWords")]},{"./abbreviations":216,"./irregularAdjectives":218,"./numbers":220,"./orgWords":221}],218:[function(e,t){"use strict";const n={bad:"badly",best:"best",early:"early",fast:"fast",good:"well",hard:"hard",icy:"icily",idle:"idly",late:"late",latter:"latter",little:"little",long:"long",low:"low",male:"manly",public:"publicly",simple:"simply",single:"singly",special:"especially",straight:"straight",vague:"vaguely",well:"well",whole:"wholly",wrong:"wrong"},r={grey:"greyer",gray:"grayer",green:"greener",yellow:"yellower",red:"redder",good:"better",well:"better",bad:"worse",sad:"sadder",big:"bigger"},a={nice:"nicest",late:"latest",hard:"hardest",inner:"innermost",outer:"outermost",far:"furthest",worse:"worst",bad:"worst",good:"best",big:"biggest",large:"largest"},s=function(e,t,n){let r=Object.keys(t);for(let a=0;a<r.length;a++)e[r[a]]="Comparable",void 0===e[t[r[a]]]&&(e[t[r[a]]]=n);return e};let o=s({},a,"Superlative");o=s(o,r,"Comparative"),o=s(o,n,"Adverb"),t.exports={lexicon:o,toAdverb:n,toComparative:r,toSuperlative:a}},{}],219:[function(e,t){t.exports={"20th century fox":"Organization","3m":"Organization","7 eleven":"Organization","7-eleven":"Organization",g8:"Organization","motel 6":"Organization",vh1:"Organization",q1:"Date",q2:"Date",q3:"Date",q4:"Date",records:"Plural","&":"Conjunction"}},{}],220:[function(e,t){"use strict";const n={ones:{zero:0,one:1,two:2,three:3,four:4,five:5,six:6,seven:7,eight:8,nine:9},teens:{ten:10,eleven:11,twelve:12,thirteen:13,fourteen:14,fifteen:15,sixteen:16,seventeen:17,eighteen:18,nineteen:19},tens:{twenty:20,thirty:30,forty:40,fourty:40,fifty:50,sixty:60,seventy:70,eighty:80,ninety:90},multiples:{hundred:100,thousand:1e3,million:1e6,billion:1e9,trillion:1e12,quadrillion:1e15,quintillion:1e18,sextillion:1e21,septillion:1e24}},r={ones:{zeroth:0,first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9},teens:{tenth:10,eleventh:11,twelfth:12,thirteenth:13,fourteenth:14,fifteenth:15,sixteenth:16,seventeenth:17,eighteenth:18,nineteenth:19},tens:{twentieth:20,thirtieth:30,fortieth:40,fourtieth:40,fiftieth:50,sixtieth:60,seventieth:70,eightieth:80,ninetieth:90},multiples:{hundredth:100,thousandth:1e3,millionth:1e6,billionth:1e9,trillionth:1e12,quadrillionth:1e15,quintillionth:1e18,sextillionth:1e21,septillionth:1e24}};let a={},s={},o={};Object.keys(r).forEach((e)=>{let t=Object.keys(r[e]),l=Object.keys(n[e]);for(let n=0;n<l.length;n++)a[l[n]]=t[n],s[t[n]]=l[n],o[t[n]]=["Ordinal","TextValue"],o[l[n]]=["Cardinal","TextValue"],"multiples"===e&&(o[t[n]].push("Multiple"),o[l[n]].push("Multiple"))}),t.exports={toOrdinal:a,toCardinal:s,cardinal:n,ordinal:r,prefixes:{yotta:1,zetta:1,exa:1,peta:1,tera:1,giga:1,mega:1,kilo:1,hecto:1,deka:1,deci:1,centi:1,milli:1,micro:1,nano:1,pico:1,femto:1,atto:1,zepto:1,yocto:1,square:1,cubic:1,quartic:1},lexicon:o}},{}],221:[function(e,t){t.exports=["administration","agence","agences","agencies","agency","airlines","airways","army","assoc","associates","association","assurance","authority","autorite","aviation","bank","banque","board","boys","brands","brewery","brotherhood","brothers","building society","bureau","cafe","caisse","capital","care","cathedral","center","central bank","centre","chemicals","choir","chronicle","church","circus","clinic","clinique","club","co","coalition","coffee","collective","college","commission","committee","communications","community","company","comprehensive","computers","confederation","conference","conseil","consulting","containers","corporation","corps","corp","council","crew","daily news","data","departement","department","department store","departments","design","development","directorate","division","drilling","education","eglise","electric","electricity","energy","ensemble","enterprise","enterprises","entertainment","estate","etat","evening news","faculty","federation","financial","fm","foundation","fund","gas","gazette","girls","government","group","guild","health authority","herald","holdings","hospital","hotel","hotels","inc","industries","institut","institute","institute of technology","institutes","insurance","international","interstate","investment","investments","investors","journal","laboratory","labs","liberation army","limited","local authority","local health authority","machines","magazine","management","marine","marketing","markets","media","memorial","mercantile exchange","ministere","ministry","military","mobile","motor","motors","musee","museum","news","news service","observatory","office","oil","optical","orchestra","organization","partners","partnership","people's party","petrol","petroleum","pharmacare","pharmaceutical","pharmaceuticals","pizza","plc","police","polytechnic","post","power","press","productions","quartet","radio","regional authority","regional health authority","reserve","resources","restaurant","restaurants","savings","school","securities","service","services","social club","societe","society","sons","standard","state police","state university","stock exchange","subcommittee","syndicat","systems","telecommunications","telegraph","television","times","tribunal","tv","union","university","utilities","workers"].reduce(function(e,t){return e[t]="Noun",e},{})},{}],222:[function(e,t){"use strict";const n=[null,"PastTense","PresentTense","Gerund","Participle"];t.exports=function(e){let t=e.split("|");return t.reduce((e,t)=>{let r=t.split(":"),a=r[0],s=r[1].split(","),o=a+s[0];"_"===s[0]&&(o=a),e[o]={};for(let a=1,i;a<n.length;a++)i=r[0]+s[a],"_"===s[a]&&(i=r[0]),s[a]&&(e[o][n[a]]=i);return e},{})}},{}],223:[function(e,t){"use strict";const n={words:e("efrt-unpack"),plurals:e("./plurals"),conjugations:e("./conjugations"),keyValue:e("./key-value")};t.exports=function(e){let t=e;return"string"==typeof e&&(t=JSON.parse(e)),t.words&&"string"==typeof t.words&&(t.words=n.words(t.words)),t.patterns&&(t.patterns=n.keyValue(t.patterns)),t.regex&&(t.regex=n.keyValue(t.regex)),t.plurals&&"string"==typeof t.plurals&&(t.plurals=n.plurals(t.plurals)),t.conjugations&&"string"==typeof t.conjugations&&(t.conjugations=n.conjugations(t.conjugations)),t}},{"./conjugations":222,"./key-value":224,"./plurals":225,"efrt-unpack":1}],224:[function(e,t){"use strict";t.exports=function(e){let t=Object.keys(e),n=!0;return t[0]&&"string"==typeof e[t[0]]&&(n=!1),t.reduce((t,r)=>{if(!0==n){let n=e[r];n.forEach((e)=>{t[e]?("string"==typeof t[e]&&(t[e]=[t[e]]),t[e].push(r)):t[e]=r})}else t[r]=e[r];return t},{})}},{}],225:[function(e,t){"use strict";t.exports=function(e){return e.split(/,/g).reduce((e,t)=>{let n=t.split(/\|/g);return 3===n.length?e[n[0]+n[1]]=n[0]+n[2]:2===n.length?e[n[0]]=n[0]+n[1]:e[n[0]]=n[0],e},{})}},{}]},{},[4])(4)});

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var Template = require('./template')
var ParseTree = require('./parsetree')
// var Validator = require('./validator')
var Chomsky = require('./chomsky')
var RhsParser = ParseTree.RhsParser
var extend = ParseTree.extend
var nlp = ParseTree.nlp

var Bracery = function (rules, config) {
  this.rules = {}
  if (rules)
    this.addRules (rules)
  if (config) {
    // Several ways of doing text->phoneme conversions:
    // 1) Specify the function directly as config.textToPhonemes. It takes a string as input, and should return an array of phonemes.
    // 2) Pass in a link to RiTa, as config.rita: http://rednoise.org/rita/
    // 3) Pass in a function, config.cmuDict, that returns the CMU Pronunciation Dictionary as a string (function will only get called when needed: avoids the hit of loading the dictionary each time)
    if (config.textToPhonemes)
      this.textToPhonemes = config.textToPhonemes
    else if (config.rita)
      this.textToPhonemes = function (text) {
        return ParseTree.textToWords (text)
          .reduce (function (phonemeArray, word) {
            return phonemeArray.concat (config.rita.getPhonemes(word).split(/-/));
          }, []);
      }
    else if (config.cmuDict) {
      var isWord = new RegExp ('^[a-z]')
      var word2phonemes = null
      function loadDictionary() {
        word2phonemes = {}
        config.cmuDict().toLowerCase()
          .split (/\n/)
          .forEach (function (line) {
            line = line
              .replace (/^\s+/, '')
              .replace (/\s+$/, '')
              .replace(/[^a-z0-9\s]/g,'')  // these are the characters we keep
            if (isWord.exec (line)) {
              var fields = line.split (/\s+/)
              word2phonemes[fields[0]] = fields.slice(1)
                .map (function (phoneme) {
                  return phoneme.replace (/[0-9]/g, '')  // removing numerical digits elides the syllabic emphasis
                })
            }
          })
      }
      function convertToPhonemes (word) {
        if (!word2phonemes)
          loadDictionary()
        for (var i = 0; i < word.length; ++i) {
          var phonemes = word2phonemes[word.substr(i)]
          if (phonemes)
            return (i ? convertToPhonemes (word.substr(0,i)) : []).concat (phonemes)
        }
        return 'xxx'  // dummy placeholder
      }
      this.textToPhonemes = function (text) {
        return ParseTree.textToWords (text)
          .reduce (function (phonemeArray, word) {
            return phonemeArray.concat (convertToPhonemes (word));
          }, []);
      }
    }
  }
  return this
}

Bracery.prototype.textToPhonemes = ParseTree.textToWords

Bracery.prototype.defaultSymbol = ['origin', 'sentence']
Bracery.prototype.rng = Math.random

Bracery.prototype.symbolNames = function() {
  return Object.keys(this.rules).sort()
}

Bracery.prototype.toJSON = function() {
  var bracery = this
  var result = {}
  var names = (arguments.length
               ? Array.prototype.slice.call (arguments, 0)
               : bracery.symbolNames())
  names.forEach (function (name) {
    result[name] = bracery.rules[name].map (function (rhs) {
      return ParseTree.makeRhsText (rhs)
    })
  })
  return result
}

Bracery.prototype.toText = function() {
  var bracery = this
  var names = (arguments.length
               ? Array.prototype.slice.call (arguments, 0)
               : bracery.symbolNames())
  return names.map (function (name) {
    return '>' + name + '\n'
      + bracery.rules[name].map (function (rhs) {
        var text = ParseTree.makeRhsText (rhs)
        text = text.replace(/\n/g, function() { return '\\n' })
        if (!text.match(/\S/))
          text = '[|]'
        else if (text[0] === '>')
          text = '\\' + text
        return text + '\n'
      }).join('') + '\n'
  }).join('')
}

Bracery.prototype.toBracery = function() {
  var bracery = this
  return Object.keys(this.rules).sort()
    .map (function (symbol) {
      var rhsList = bracery.rules[symbol]
      if (typeof(rhsList) === 'function')
        throw new Error ("Can't convert JavaScript function to Bracery")
      return ParseTree.leftSquareBraceChar
        + symbol + '=>'
        + (typeof(rhsList) === 'string'
           ? rhsList
           : rhsList.map (function (rhs) { return ParseTree.makeRhsText(rhs) }).join (ParseTree.pipeChar))
        + ParseTree.rightSquareBraceChar
        + '\n'
    }).join('')
}

Bracery.prototype.varsToBracery = function (vars) {
  var bracery = this
  return Object.keys(vars).sort()
    .map (function (name) {
      return ParseTree.leftSquareBraceChar
        + name + ':'
        + ParseTree.escapeString (vars[name])
        + ParseTree.rightSquareBraceChar
        + '\n'
    }).join('')
}

Bracery.prototype.addRules = function (name, rules) {
  var bracery = this
  // convert addRules({name1:[rhs1a,rhs1b,...],name2:[rhs2a,rhs2b...],...}) to a series of addRules(name,[rhsText,...]) calls
  // this handles Tracery-style JSON
  if (arguments.length === 1 && typeof(arguments[0]) === 'object') {
    var name_rules_map = arguments[0]
    return Object.keys(name_rules_map).reduce (function (all, name) {
      return extend (all, bracery.addRules (name, name_rules_map[name]))
    }, {})
  }
  // convert addRules(name,rhs1,rhs2...) to addRules(name,[rhs1,rhs2...])
  if (arguments.length !== 2 || typeof(rules) === 'string')
    rules = Array.prototype.splice.call (arguments, 1)
  // check types
  name = validateSymbolName (name)
  var oldRules = this.rules.hasOwnProperty(name) ? this.rules[name] : null
  if (typeof(rules) === 'function') {
    if (oldRules)
      throw new Error ('symbols with bound functions cannot have any other rules')
    this.rules[name] = rules
  } else {
    if (oldRules && oldRules.filter (function (oldRule) { return typeof(oldRule) === 'function' }).length)
      throw new Error ('symbols with bound functions cannot have any other rules')
    if (!ParseTree.isArray(rules))
      throw new Error ('rules must be an array')
    if (rules.filter (function (rule) { return typeof(rule) !== 'string' }).length)
      throw new Error ('rules array must contain strings')
    this.rules[name] = (oldRules || []).concat (rules.map (ParseTree.parseRhs))
  }
  var result = {}
  result[name] = this.rules[name]
  return result
}

Bracery.prototype.getRules = function (name) {
  return this.rules[name] || []
}

Bracery.prototype.deleteRules = function (name) {
  var bracery = this
  var result
  if (arguments.length > 1)
    result = Array.prototype.reduce.call (arguments, function (deleted, name) { return extend (deleted, bracery.deleteRules (name)) }, {})
  else if (!arguments.length) {
    result = this.rules
    this.rules = {}
  } else {
    name = validateSymbolName (name)
    result = {}
    result[name] = this.rules[name]
    delete this.rules[name]
  }
  return result
}

Bracery.prototype.setRules = function (name, rules) {
  this.rules[name] = rules
}

Bracery.prototype.addRule = Bracery.prototype.addRules
Bracery.prototype.deleteRule = Bracery.prototype.deleteRules
Bracery.prototype.setRule = Bracery.prototype.setRules

Bracery.prototype._expandRhs = function (config) {
  var result = this.expandParsed (config)
  return config.callback ? result.then(stringifyText) : stringifyText(result)
}

Bracery.prototype._expandSymbol = function (config) {
  if (!config.node.name)
    console.error('Bad expandSymbol node:',JSON.stringify(config.node))
  var symbolName = config.node.name.toLowerCase()
  var rhs
  var rules = this.rules[symbolName]
  if (rules) {
    if (typeof(rules) === 'function') {
      // call dynamically bound function
      rhs = rules.apply (this, [extend ({ random: this.rng }, config)].concat (config.vars[ParseTree.varChar+'0'] || []))
      // if result is a string, forgivingly wrap it as a single-element array
      if (typeof(rhs) === 'string')
        rhs = [rhs]
      else if (rhs && typeof(rhs.then) === 'function') {
        rhs = rhs.then (function (result) {
          return typeof(result) === 'string' ? [result] : result
        })
      }
    } else {
      rhs = ParseTree.sampleParseTree (ParseTree.deepCopy (ParseTree.randomElement (rules, this.rng)), config)
    }
  } else
    rhs = []
  return rhs
}

Bracery.prototype._getSymbol = function (config) {
  var symbolName = config.symbolName || config.node.name
  var result
  symbolName = validateSymbolName (symbolName)
  var rules = this.getRules (symbolName)
  if (typeof(rules) !== 'function') {
    var rulesRhs = rules.map (function (rule) { return ParseTree.makeRhsText (rule) })
    result = (rulesRhs.length
              ? (rulesRhs.length === 1
                 ? rulesRhs
                 : [ParseTree.leftSquareBraceChar + rulesRhs.join (ParseTree.pipeChar) + ParseTree.rightSquareBraceChar])
              : [''])
  }
  return result
}

function stringifyText (expansion) {
  if (expansion)
    expansion.text = ParseTree.makeString (expansion.text)
  return expansion
}

Bracery.prototype.makeConfig = function (config) {
  return extend ({ textToPhonemes: this.textToPhonemes.bind (this),
		   expand: this._expandSymbol.bind (this),
		   get: this._getSymbol.bind (this),
		   set: function() { return [] },
		 },
		 config)
}

function validateSymbolName (name) {
  if (typeof(name) !== 'string')
    throw new Error ('name must be a string')
  if (!name.match(/^[A-Za-z_][A-Za-z0-9_]*$/))
    throw new Error ('name must be a valid variable name (alphanumeric/underscore, first char non-numeric)')
  return name.toLowerCase()
}

Bracery.prototype.getDefaultSymbol = function() {
  var bracery = this
  if (typeof(bracery.defaultSymbol) === 'string' || typeof(bracery.defaultSymbol) === 'undefined')
    return bracery.defaultSymbol
  for (var n = 0; n < bracery.defaultSymbol.length; ++n) {
    var name = bracery.defaultSymbol[n]
    if (bracery.rules[name])
      return name
  }
  return bracery.symbolNames()[0]
}

Bracery.prototype.expandParsed = function (config) {
  var newConfig = this.makeConfig (config)
  if (config.expand === null || newConfig.expand === null)
    newConfig.expand = function (expandConfig) {
      var getResult = newConfig.get (expandConfig)
      function parseAndSample (def) {
	return ParseTree.sampleParseTree (ParseTree.parseRhs (def[0]))
      }
      if (expandConfig.callback)
	return getResult.then (parseAndSample)
      else
	return parseAndSample (getResult)
    }
  if (newConfig.callback) {
    var promise = ParseTree.makeRhsExpansionPromise (newConfig)
    if (typeof(newConfig.callback) === 'function')
      promise = promise.then (newConfig.callback)
    return promise
  }
  return ParseTree.makeRhsExpansionSync (newConfig)
}

Bracery.prototype.expand = function (braceryText, config) {
  if (config && config.rules)
    return new Bracery (config.rules).expand (braceryText, extend ({}, config, {rules:null}))
  var defaultSymbolName = this.getDefaultSymbol()
  if (defaultSymbolName && typeof(braceryText) === 'undefined')
    braceryText = ParseTree.symChar + defaultSymbolName
  if (typeof(braceryText) !== 'string')
    throw new Error ('the text to be expanded must be a string')
  return this._expandRhs (extend ({ vars: {} }, config, { rhsText: braceryText }))
}

Bracery.prototype.expandSymbol = function (symbolName, config) {
  symbolName = symbolName || this.getDefaultSymbol()
  symbolName = validateSymbolName (symbolName)
  return this._expandRhs (extend ({ vars: {} }, config, { rhs: [{ name: symbolName }] }))
}

Bracery.prototype.getSymbol = function (symbolName, config) {
  return this._getSymbol (extend ({}, config, { symbolName: symbolName }))
}

Bracery.prototype.parse = function (text) {
  return ParseTree.makeRoot (ParseTree.parseRhs (text))
}

Bracery.prototype.unparse = function (root) {
  return ParseTree.makeRhsText ([root])
}

Bracery.prototype.normalize = function (text) {
  return this.unparse (this.parse (text))
}

module.exports = { Bracery: Bracery,
                   ParseTree: ParseTree,
                   RhsParser: RhsParser,
//                   Validator: Validator,
		   Chomsky: { makeGrammar: Chomsky.makeGrammar.bind (Chomsky, ParseTree),
		              parseInside: Chomsky.parseInside.bind (Chomsky, ParseTree) },
                   Template: Template,
                   Promise: Promise,
                   nlp: nlp }

},{"./chomsky":2,"./parsetree":3,"./template":6}],2:[function(require,module,exports){
// set config.normal to force max two symbols on RHS of any rule (despite the name, this isn't quite Chomsky normal form, as it includes empty rules, transitions, multi-character terminal strings...)
function makeGrammar (ParseTree, config) {
  var vars = config.vars || {}, root = config.root
  var cfg = {}
  return makeGrammarSymbol (ParseTree, config, cfg, [typeof(root) === 'string' ? ParseTree.parseRhs(root) : root], 'start')
    .then (function (start) {
      if (!start)
        return null
      var toposort = toposortSymbols (cfg, start.name)
      var sortOrder = toposort.sort || Object.keys(cfg).sort()
      var symbolRank = {}
      sortOrder.forEach (function (sym, n) { symbolRank[sym] = n })
      sortOrder.forEach (function (sym) {
        if (cfg[sym].opts)
          cfg[sym].opts.forEach (function (opt) {
            opt.rhs.forEach (function (node) {
              if (node.type === 'nonterm')
                node.rank = symbolRank[node.name]
            })
          })
      })
      return { stateByName: cfg,
               stateByRank: sortOrder.map (function (sym) { return cfg[sym] }),
               rankByName: symbolRank,
	       nameByRank: sortOrder,
	       cyclic: toposort.cyclic,
	       empties: toposort.empties,
	       start: start.name }
    })
}

function makeGrammarRules (ParseTree, config, cfg, name, checkVars, checkSym, expand) {
  var vars = config.vars || {}
  var resolve = config.sync ? ParseTree.syncPromiseResolve : Promise.resolve.bind(Promise)
  var symCheckedPromise
  var opts, symDef, cfgName
  if (checkVars && vars[name]) {
    symDef = vars[name]
    cfgName = expand ? (ParseTree.funcChar + ParseTree.varChar + name) : (ParseTree.varChar + name)
    symCheckedPromise = resolve()
  } else if (checkSym && config.get) {
    symCheckedPromise = resolve (config.get (ParseTree.extend ({}, config, { symbolName: name })))
      .then (function (getResult) {
        if (getResult)
          symDef = getResult.join('')
        cfgName = expand ? (ParseTree.symChar + name) : (ParseTree.funcChar + 'xget' + ParseTree.symChar + ParseTree.name)
      })
  }
  return symCheckedPromise.then (function() {
    if (symDef) {
      if (checkVars && checkSym)
        cfgName = ParseTree.traceryChar + name + ParseTree.traceryChar
      opts = expand ? [ParseTree.parseRhs (symDef)] : [symDef]
    } else
      opts = []
    return makeGrammarSymbol (ParseTree, config, cfg, opts, 'sym', cfgName)
  })
}

function makeGrammarSymbol (ParseTree, config, cfg, rhsList, type, name, weight) {
//  console.warn ('makeGrammarSymbol', type, name, JSON.stringify(rhsList))
  var vars = config.vars || {}
  var resolve = config.sync ? ParseTree.syncPromiseResolve : Promise.resolve.bind(Promise)
  var gotSymbolPromise
  name = name || (Object.keys(cfg).filter(function(name){return name.match(/^[0-9]+$/)}).length + 1).toString()
  if (typeof(cfg[name]) === 'undefined') {
    cfg[name] = true  // placeholder
    gotSymbolPromise = rhsList.reduce (function (optsPromise, rhs, node) {
      return optsPromise.then (function (opts) {
        var revRhs = (typeof(rhs) === 'string' ? [rhs] : rhs).slice(0).reverse()
        return revRhs.reduce (function (gramRhsPromise, node) {
          return gramRhsPromise.then (function (gramRhs) {
	    var cfgNodePromise
	    if (gramRhs) {
	      if (typeof(node) === 'string')
		cfgNodePromise = resolve ({ type: 'term', text: node })
	      else if (node.type === 'term' || node.type === 'nonterm')
		cfgNodePromise = resolve (node)
	      else if (node.type === 'alt')
		cfgNodePromise = makeGrammarSymbol (ParseTree, config, cfg, node.opts, 'alt')
	      else if (node.type === 'sym')
		cfgNodePromise = makeGrammarRules (ParseTree, config, cfg, node.name, false, true, true)
	      else if (node.type === 'lookup')
		cfgNodePromise = makeGrammarRules (ParseTree, config, cfg, node.varname, true, false, false)
	      else if (ParseTree, ParseTree.isTraceryExpr (node))
		cfgNodePromise = makeGrammarRules (ParseTree, config, cfg, node.test[0].varname, true, true, true)
	      else if (ParseTree, ParseTree.isEvalVar (node))
		cfgNodePromise = makeGrammarRules (ParseTree, config, cfg, node.args[0].varname, true, false, true)
	      else {
                var warning = "Can't convert to context-free grammar: " + ParseTree.makeRhsText ([node])
                console.warn (warning)
		throw new Error (warning)
              }
	    }
            return cfgNodePromise.then (function (cfgNode) {
              if (cfgNode) {
                if (config.normal && gramRhs.rhs.length === 2) {
                  return makeGrammarSymbol (ParseTree, config, cfg, [gramRhs.rhs], 'elim')
                    .then (function (elimNode) {
                      return { rhs: [cfgNode, elimNode],
			       weight: gramRhs.weight }
                    })
                } else
                  return { rhs: [cfgNode].concat (gramRhs.rhs),
			   weight: gramRhs.weight }
              }
              return null
            })
          })
	}, resolve ({ rhs: [], weight: 1 / rhsList.length }))
          .then (function (gramRhs) {
            return opts.concat (gramRhs)
          })
      })
    }, resolve([]))
      .then (function (opts) {
        cfg[name] = { type: type, opts: opts }
        return resolve()
      })
  } else
    gotSymbolPromise = resolve()
  return gotSymbolPromise.then (function() {
    return resolve (cfg[name] ? { type: 'nonterm', name: name } : null)
  })
}

function getSymbols (cfg) {
  return Object.keys(cfg).sort()
}

function getSources (cfg) {
  var isSource = {}, symbols = getSymbols (cfg)
  symbols.forEach (function (sym) {
    cfg[sym].opts.forEach (function (rhs) {
      rhs.rhs.forEach (function (node) {
	if (node.type === 'nonterm') {
	  isSource[node.name] = isSource[node.name] || {}
	  isSource[node.name][sym] = true
	}
      })
    })
  })
  var sources = {}
  symbols.forEach (function (sym) {
    sources[sym] = isSource[sym] ? Object.keys(isSource[sym]).sort() : []
  })
  return sources
}

function nodeIsNonempty (cfg, flaggedAsEmpty, node) {
  return (node.type === 'term' ? (node.text.length > 0) : (cfg[node.name] && !flaggedAsEmpty[node.name]))
}

function symIsEmpty (cfg, flaggedAsEmpty, sym) {
  return cfg[sym].opts.reduce (function (foundEmptyRhs, rhs) {
    return foundEmptyRhs || !rhs.rhs.filter (nodeIsNonempty.bind (null, cfg, flaggedAsEmpty)).length
  }, false)
}

function getEmptyFlags (cfg) {
  var sources = getSources (cfg), symbols = getSymbols (cfg)
  var flaggedAsEmpty = {}
  do {
    var foundEmpties = false
    symbols.forEach (function (sym) {
      if (!flaggedAsEmpty[sym] && symIsEmpty(cfg,flaggedAsEmpty,sym)) {
	flaggedAsEmpty[sym] = true
	foundEmpties = true
      }
    })
  } while (foundEmpties)
  return flaggedAsEmpty
}

function getNullTransitions (cfg) {
  var isEmpty = getEmptyFlags (cfg), symbols = getSymbols (cfg)
  var isSource = {}, isSink = {}
  symbols.forEach (function (sym) {
    isSource[sym] = {}
    isSink[sym] = {}
  })
  symbols.forEach (function (source) {
    cfg[source].opts.forEach (function (rhs) {
      rhs.rhs.forEach (function (node) {
	if (node.type === 'nonterm' && !rhs.rhs.filter (function (otherNode) {
	  return otherNode !== node && nodeIsNonempty (cfg, isEmpty, otherNode)
	}).length) {
	var sink = node.name
	  isSink[source][sink] = true
	  isSource[sink][source] = true
	}
      })
    })
  })
  var sinks = {}, sources = {}
  symbols.forEach (function (sym) {
    sinks[sym] = Object.keys (isSink[sym]).sort()
    sources[sym] = Object.keys (isSource[sym]).sort()
  })
  return { empties: Object.keys(isEmpty).sort(), sinks: sinks, sources: sources }
}

function toposortSymbols (cfg, start) {
  var symbols = getSymbols (cfg), trans = getNullTransitions (cfg)
  // Kahn, Arthur B. (1962), "Topological sorting of large networks", Communications of the ACM 5 (11): 558–562, doi:10.1145/368996.369025
  // https://en.wikipedia.org/wiki/Topological_sorting
  var S = [], L = []
  var nParents = [], edges = 0
  symbols.forEach (function (c) {
    nParents[c] = trans.sources[c].length
    edges += nParents[c]
    if (nParents[c] == 0)
      (c === start ? S.unshift : S.push).call (S, c)  // ensure start goes at the beginning
  })
  while (S.length > 0) {
    var n = S.shift()
    L.push (n)
    trans.sinks[n].forEach (function(m) {
      --edges
      if (--nParents[m] == 0)
        S.push (m)
    })
  }

  if (edges > 0) {
    trans.cyclic = true
    // make a good-faith effort at an "approximate" topological sort by doing a breadth-first search from the start state and whatever we've covered already
    var queue = [start].concat (L), visited = {}
    L = []
    while (queue.length) {
      var current = queue.shift()
      if (!visited[current]) {
        L.push (current)
        trans.sinks[current].forEach (function (next) {
          queue.push (next)
        })
        visited[current] = true
      }
    }
    L = L.concat (symbols.filter (function (sym) { return !visited[sym] }).sort())
  }

  trans.sort = L
  return trans
}

// Inside algorithm c.f. Durbin, Eddy, Krogh & Mitchison (1998) "Biological Sequence Analysis"
// or other sources e.g. https://en.wikipedia.org/wiki/Inside%E2%80%93outside_algorithm
function ruleWeight (inside, text, maxSubseqLen, i, j, k, opt) {
  var rhsLen = opt.rhs.length
  if ((rhsLen === 0 && i !== j) || (rhsLen === 1 && k < j))
    return 0
  var w = opt.weight
  for (var pos = 0; w && pos < rhsLen; ++pos) {
    var node = opt.rhs[pos]
    var start = pos ? k : i, len = pos ? (j-k) : (k-i), idx = len
    if (start && len > maxSubseqLen) {
      if (start + len === text.length)
        idx = maxSubseqLen + 1
      else
        return 0
    }
    var insideCell
    w *= (node.type === 'term'
	  ? (node.text.length === len && node.text === text.substr(start,len) ? 1 : 0)
	  : (((insideCell = inside[start][idx]) && insideCell[node.rank]) || 0))
  }
  return w
}

function sampleTrace (config, cfg, text, inside, i, j, lhs, rng) {
  rng = rng || Math.random
  var applications = [], weights = [], totalWeight = 0
  for (var k = i; k <= j; ++k) {
    cfg.stateByRank[lhs].opts.forEach (function (rhs) {
      var w = ruleWeight (inside, text, config.maxSubsequenceLength || text.length, i, j, k, rhs)
      applications.push ({ k: k, rhs: rhs })
      weights.push (w)
      totalWeight += w
    })
  }
  var r = rng() * totalWeight, n
  for (n = 0; n < applications.length - 1; ++n)
    if ((r -= weights[n]) <= 0)
      break
  var app = applications[n], k = app.k, opt = app.rhs
  return [cfg.nameByRank[lhs]].concat (opt.rhs.map (function (node, pos) {
    return (node.type === 'term'
            ? node.text
            : sampleTrace (config, cfg, text, inside, pos ? k : i, pos ? j : k, node.rank, rng))
  }))
}

function transformTrace (ParseTree, config, cfg, trace) {
  return trace.slice(1).reduce (function (t, node) {
    if (typeof(node) === 'string')
      return t.concat ([node])
    var name = node[0], type = cfg.stateByName[name].type, rest = transformTrace (ParseTree, config, cfg, node).slice(1)
    switch (type) {
    case 'sym':
      return t.concat ([[name].concat (rest)])
    case 'alt':
      return t.concat ([['alt'].concat (rest)])
    case 'elim':
      return t.concat (rest)
    default:
      throw new Error ('unknown node type')
      break
    }
  }, [trace[0]])
}

function fillInside (config, cfg, text) {
  if (config.verbose)
    console.warn('fillInside.grammar',JSON.stringify(cfg,null,2))
  var len = text.length, nSym = cfg.nameByRank.length
  var maxSubseqLen = config.maxSubsequenceLength || len
  var isTerm = {}, optsByMaxRhsLen = [[], [], []]
  cfg.stateByRank.forEach (function (state, s) {
    state.opts.forEach (function (opt) {
      var rhs = opt.rhs
      rhs.forEach (function (node) {
        if (node.type === 'term')
          isTerm[node.text] = true
      })
      opt.lhsRank = s
      for (var maxRhsLen = rhs.length; maxRhsLen <= 2; ++maxRhsLen)
        optsByMaxRhsLen[maxRhsLen].push (opt)
    })
  })
  if (config.verbose)
    console.warn('fillInside.optsByMaxRhsLen',JSON.stringify(optsByMaxRhsLen))

  var inside = new Array(len+1).fill(0).map (function (_, i) {
    // if an (i,j) cell is null, it's definitely not in the parse tree and can be skipped
    // if an (i,j) cell is false, then text[i..j] is a terminal, but no cells have yet been filled
    return new Array(i === 0 ? (len+1) : Math.min(maxSubseqLen+2,len+1-i)).fill(null)
  })
  for (var i = len; i >= 0; --i) {
    var jStop = undefined, jStart = undefined
    if (i > 0 && i < len - maxSubseqLen) {
      jStop = i + maxSubseqLen
      jStart = len
    }
    for (var j = i; j <= len; ++j) {
      var kStop = undefined, kStart = undefined
      if (i === 0) {
        if (j < len && j > maxSubseqLen + 1) {
          kStop = 0
          kStart = j - maxSubseqLen
        }
      } else if (j === len) {
        if (i < len - maxSubseqLen - 1) {
          kStop = i + maxSubseqLen
          kStart = j
        }
      }
      var ijIndex = i === 0 ? j : Math.min (j - i, maxSubseqLen + 1)
      var ijText = text.substr (i, j - i)
      var inside_ij = inside[i][ijIndex]
      if (isTerm[ijText])
        inside_ij = inside[i][ijIndex] = false
      for (var k = i; k <= j; ++k) {
        var ikIndex = i === 0 ? k : Math.min (k - i, maxSubseqLen + 1)
        if (inside[i][ikIndex] !== null) {
          var kjIndex = k === 0 ? j : Math.min (j - k, maxSubseqLen + 1)
          var inside_kj = inside[k][kjIndex]
          if (inside_kj !== null || k === j) {  // allow the case where k===j just in case opt.rhs.length === 1 later
            var opts = optsByMaxRhsLen[i === j ? 0 : (inside_kj === null ? 1 : 2)]
            for (var nOpt = opts.length - 1; nOpt >= 0; --nOpt) {
              var opt = opts[nOpt], s = opt.lhsRank
	      var weight = ruleWeight (inside, text, maxSubseqLen, i, j, k, opt)
              if (config.verbose)
                console.warn ('fillInside.rule', 'weight='+weight, 'i='+i, 'j='+j, 'k='+k, 'ij='+text.substr(i,j-i), 'jk='+text.substr(j,k-j), 'lhs='+cfg.nameByRank[s], 'opt='+JSON.stringify(opt))
              if (weight) {
                if (!inside_ij)
                  inside_ij = inside[i][ijIndex] = new Array(nSym).fill(0)
	        inside_ij[s] += weight
              }
            }
            if (k === kStop)
              k = kStart - 1
	  }
        }
      }
      if (j === jStop)
        j = jStart - 1
    }
  }
  return inside
}

function parseInside (ParseTree, config) {
  return makeGrammar (ParseTree, ParseTree.extend ({}, config, { normal: true }))
    .then (function (cfg) {
      var text = config.text, rng = config.rng
      var inside = fillInside (config, cfg, text)
      var startCell = inside[0][text.length], startState = cfg.rankByName[cfg.start]
      if (!(startCell && startCell[startState]))
        return ''
      var trace = sampleTrace (config, cfg, text, inside, 0, text.length, startState, rng)
      return ['root'].concat (transformTrace (ParseTree, ParseTree, cfg, trace).slice(1))
    })
}

module.exports = { makeGrammar: makeGrammar,
		   parseInside: parseInside }

},{}],3:[function(require,module,exports){
var RhsParser = require('./rhs')
var Chomsky = require('./chomsky')

//var nlp = require('compromise')

function isTruthy (x) { return makeString(x).match(/\S/) }
var trueVal = '1'  // truthy value used when a result should be truthy but the default result in this context would otherwise be an empty string e.g. &same{}{} or &not{}
var falseVal = ''  // falsy value
var zeroVal = '0'  // default zero value for arithmetic operators

// General helper functions
function isArray (obj) { return Object.prototype.toString.call(obj) === '[object Array]' }

function extend (dest) {
  dest = dest || {}
  Array.prototype.slice.call (arguments, 1).forEach (function (src) {
    if (src)
      Object.keys(src).forEach (function (key) { dest[key] = src[key] })
  })
  return dest
}

function deepCopy (orig) {
  var result
  if (isArray(orig))
    result = orig.map (deepCopy)
  else if (typeof(orig) === 'object') {
    result = {}
    Object.keys(orig).forEach (function (key) { result[key] = deepCopy (orig[key]) })
  } else
    result = orig
  return result
}

// randomness
function randomIndex (array, rng) {
  rng = rng || Math.random
  return Math.floor (rng() * array.length)
}

function randomElement (array, rng) {
  return array[randomIndex (array, rng)]
}

function nRandomElements (array, n, rng) {
  rng = rng || Math.random
  var result = []
  var index = array.map (function (_dummy, k) { return k })
  for (var i = 0; i < n && i < array.length - 1; ++i) {
    var j = Math.floor (rng() * (array.length - i)) + i
    result.push (array[index[j]])
    index[j] = index[i]
  }
  return result
}

// Parser
var parseCache = {}
function parseRhs (rhsText) {
  var cached
  if (parseCache.hasOwnProperty(rhsText))
    cached = parseCache[rhsText]
  else {
    try {
      cached = RhsParser.parse (rhsText)
    } catch (e) {
      console.warn ('parse error', e)
      cached = [rhsText]
    }
    parseCache[rhsText] = cached
  }
  return deepCopy (cached)
}

function makeRoot (rhs) {
  return { type: 'root',
           rhs: rhs }
}

var newSymbolDefReg = /^>([A-Za-z_]\w*)\s*$/;
var commentReg = /^ *#([^#]*|[^#]* .*)$/;
var commandReg = /^ *## +(\S+)\s?(.*?)\s*$/;
var localSymbolReg = /~[~\*]([A-Za-z0-9_]+)/g;
var localTagInBodyReg = /#[#\*](\S+)/g;
function parseTextDefs (text) {
  var initCommandParam = { PREFIX: '',
                           SUFFIX: '' },
      commandParam = extend ({}, initCommandParam)
  var rules = {}
  try {
    var currentRules, newSymbolDefMatch
    text.split(/\n/).forEach (function (line) {
      if (line.length) {
        if (commandMatch = commandReg.exec (line)) {
	  var param = commandMatch[1], value = commandMatch[2]
	  if (param === 'RESET') {
	    if (value)  // RESET XXX resets the param setting for XXX
	      commandParam[value] = initCommandParam[value]
	    else  // RESET without an argument resets all params
	      commandParam = extend ({}, initCommandParam)
	  } else
	    commandParam[param] = value
        } else if (commentReg.exec (line)) {
          /* comment, do nothing */
        } else if (currentRules) {
          line = line.replace (localSymbolReg, function (_m, sym) {
            var newSym = commandParam['PREFIX'] + sym + commandParam['SUFFIX']
            if (sym.toUpperCase() === sym)
              newSym = newSym.toUpperCase()
            else if (sym[0].toUpperCase() === sym[0])
              newSym = newSym[0].toUpperCase() + newSym.substr(1).toLowerCase()
            else
              newSym = newSym.toLowerCase()
            return "~" + newSym
          })
          line = line.replace (localTagInBodyReg, function (_m, tag) { return commandParam['PREFIX'] + tag + commandParam['SUFFIX'] })
          currentRules.push (line)
        } else if (newSymbolDefMatch = newSymbolDefReg.exec (line))
          rules[commandParam['PREFIX'] + newSymbolDefMatch[1] + commandParam['SUFFIX']] = currentRules = []
        else
          console.warn ("Can't parse symbol definition line: " + line)
      } else {
        // line is empty
        currentRules = undefined
      }
    })
  } catch(e) { console.log(e) }
  return rules
}

// Parse tree constants
var symChar = '~', varChar = '$', funcChar = '&', leftBraceChar = '{', rightBraceChar = '}', leftSquareBraceChar = '[', rightSquareBraceChar = ']', pipeChar = '|', assignChar = '=', traceryChar = '#', defaultMapVar = '_'
var nodeArgKeys = ['rhs','args','unit','value','local','cond','t','f','bind']
var nodeListArgKeys = ['opts']

// Footers
var defaultFooterVarName = 'footer'
function makeFooter (footerVarName) {
  return [ { type: 'func',
             footer: true,
             funcname: 'eval',
             args: [ { type: 'lookup',
                       footer: true,
                       varname: footerVarName || defaultFooterVarName } ] } ]
}

function stripFooter (rhs) {
  return rhs.filter (function (node) { return !node.footer })
}

function addFooter (rhs, footerVarName) {
  var strippedRhs = footerVarName ? rhs : stripFooter(rhs)
  return strippedRhs.concat (makeFooter (footerVarName))
}

// Parse tree manipulations.

// There are two methods for expanding a template into a fully-expanded parse tree.
// The first, synchronous method is sampleParseTree, which expands any constructs (alternations, repetitions)
// whose syntactic expansion can be performed immediately, without reference to the symbol store.
// The second, asynchronous method is makeRhsExpansionPromise, which returns a promise of an expansion,
// once all remote calls to the symbol store have been performed.
// Typically, these methods must both be called, one after the other
// (NB makeRhsExpansionPromise recursively calls itself and sampleParseTree, which recursively calls itself).

// sampleParseTree is the main method for constructing a new, clean parse tree from a template.
// in the process, it samples any alternations or repetitions
function sampleParseTree (rhs, config) {
  var pt = this
  var rng = (config ? config.rng : null) || Math.random
  if (typeof(rhs.map) !== 'function')
    console.error ('sampleParseTree type error: rhs (' + typeof(rhs) + ') = ' + JSON.stringify(rhs))
  return rhs.map (function (node, n) {
    var result, index
    if (typeof(node) === 'string')
      result = node
    else if (config && config.quoteLevel > 0) {
      if (node.type === 'func' && node.funcname === 'unquote')
	result = { type: 'func',
                   funcname: 'unquote',
                   args: pt.sampleParseTree (node.args, extend ({}, config, { quoteLevel: config.quoteLevel - 1 })) }
      else {
        result = extend ({}, node)
        if (node.type === 'func' && node.funcname === 'quote')
          config = extend ({}, config, { quoteLevel: config.quoteLevel + 1 })
        nodeArgKeys.forEach (function (key) {
          if (node[key])
            result[key] = pt.sampleParseTree (node[key], config)
        })
        if (node.opts)
          result.opts = node.opts.map (function (opt) { return pt.sampleParseTree (opt, config) })
      }
    } else {
      switch (node.type) {
      case 'root':
        result = { type: node.type,
                   rhs: pt.sampleParseTree (node.rhs, config) }
        break
      case 'assign':
	result = { type: 'assign',
                   varname: node.varname,
		   value: pt.sampleParseTree (node.value, config),
                   local: node.local ? pt.sampleParseTree (node.local, config) : undefined,
                   visible: node.visible }
        break
      case 'alt':
        index = pt.randomIndex (node.opts, rng)
	result = { type: 'alt_sampled',
                   n: index,
                   rhs: pt.sampleParseTree (node.opts[index], config) }
        break
      case 'alt_sampled':
        result = { type: 'alt_sampled',
                   n: node.n,
                   rhs: pt.sampleParseTree (node.rhs, config) }
        break
      case 'rep':
        var n = Math.min (Math.floor (rng() * (node.max + 1 - node.min)) + node.min,
                          config && config.maxReps ? config.maxReps : pt.maxReps)
	result = { type: 'rep_sampled',
                   n: n,
		   reps: new Array(n).fill().map (function() { return pt.sampleParseTree (node.unit, config) }) }
        break
      case 'rep_sampled':
        result = { type: 'rep_sampled',
                   n: node.n,
                   reps: node.reps.map (function (rep) { return pt.sampleParseTree (rep, config) }) }
        break
      case 'cond':
	result = { type: 'cond',
                   test: node.test,
		   t: pt.sampleParseTree (node.t, config),
                   f: pt.sampleParseTree (node.f, config) }
        break
      case 'func':
	result = { type: 'func',
                   funcname: node.funcname,
		   args: (node.funcname === 'strictquote'
                          ? node.args
                          : (node.funcname === 'quote'
                             ? pt.sampleParseTree (node.args, extend ({}, config, { quoteLevel: (config && config.quoteLevel || 0) + 1 }))
                             : pt.sampleParseTree (node.args, config))) }
        break
      case 'lookup':
	result = node
        break
      default:
      case 'sym':
	result = { type: 'sym' };
        ['name','id','method'].forEach (function (key) {
          if (typeof(node[key]) !== 'undefined')
            result[key] = node[key]
        })
        if (node.bind)
          result.bind = pt.sampleParseTree (node.bind, config)
	break
      }
      if (node.footer)
        result.footer = node.footer
    }
    return result
  })
}

// config = {
//  excludeSubtree (boolean),
//  nodePredicate ([config,node] => foundNode),
//  makeChildConfig ([config,node,nChild] => childConfig)
// }
function findNodes (rhs, config) {
  var pt = this
  config = config || {}
  if (config.excludeSubtree)
    return []
  config.nodePredicate = config.nodePredicate || function (config, node) { return node }
  config.makeChildConfig = config.makeChildConfig || function (config, node, nChild) { return config }
  var nodePredicate = config.nodePredicate, makeChildConfig = config.makeChildConfig
  return rhs.reduce (function (result, node) {
    var foundNode = nodePredicate (config, node)
    var childConfig = function (n) { return makeChildConfig (config, node, n) }
    var r = null
    if (typeof(node) === 'object')
      switch (node.type) {
      case 'lookup':
        break
      case 'assign':
        r = pt.findNodes ((node.value || []).concat (node.local || []), childConfig())
        break
      case 'alt':
        r = node.opts.reduce (function (altResults, opt) {
          return altResults.concat (pt.findNodes (opt, childConfig()))
        }, [])
        break
      case 'rep':
        r = pt.findNodes (node.unit, childConfig())
        break
      case 'func':
	switch (node.funcname) {
	case 'eval':
	  r = pt.findNodes (node.args.concat (node.value || []), childConfig())
	  break
	case 'link':
	  r = pt.findNodes ([node.args[0]], childConfig(0))
	    .concat (pt.findNodes ([node.args[1]], childConfig(1)))
	  break
	case 'strictquote':
	case 'quote':
	case 'unquote':
        default:
	  r = pt.findNodes (node.args, childConfig())
          break
	}
        break
      case 'cond':
        r = pt.findNodes (node.test.concat (node.t, node.f), childConfig())
        break
      case 'root':
      case 'alt_sampled':
        r = pt.findNodes (node.rhs, childConfig())
        break
      case 'rep_sampled':
        r = pt.findNodes (node.reps.reduce (function (all, rep) { return all.concat(rep) }, []), childConfig())
        break
      default:
      case 'sym':
        r = pt.findNodes (node.rhs || node.bind || [], childConfig())
        break
      }
    return result.concat(foundNode ? [foundNode] : []).concat(r || []);
  }, [])
}

// Specialized findNodes for symbol nodes
// Somewhat misnamed, as it does not just return symbol nodes;
// it can also be configured to return &link{source}{target}, &layout&link{src}{targ}, #symbol#, &eval$x, $x, etc.
// In other words it's a general Swiss Army knife for IDEs that do static analysis of Bracery.
function getSymbolNodes (rhs, gsnConfig) {
  gsnConfig = gsnConfig || {}
  return this.findNodes (rhs, {
    nodePredicate: function (nodeConfig, node) {
      function addLinkInfo (foundNode) {
	return (gsnConfig.addParentLinkInfo
                ? extend (foundNode,
                          nodeConfig.inLink
                          ? { inLink: true,
                              linkText: nodeConfig.linkText,
                              link: nodeConfig.link }
                          : { inLink: false })
                : foundNode)
      }
      if (typeof(node) === 'object')
        switch (node.type) {
        case 'cond':
	  if (isTraceryExpr (node)
	      && !gsnConfig.ignoreTracery)
	    return addLinkInfo (node.f[0])
          break
        case 'sym':
          if (!gsnConfig.ignoreSymbols)
	    return addLinkInfo (node)
          break
        case 'lookup':
          if (gsnConfig.reportLookups)
	    return addLinkInfo (node)
          break
        case 'assign':
          if (gsnConfig.reportAssigns)
	    return addLinkInfo (node)
          break
        case 'func':
          if (((isLinkExpr(node) && !(nodeConfig.layoutNode && isLayoutLinkExpr(nodeConfig.layoutNode)))
               || isLayoutLinkExpr(node))
              && gsnConfig.reportLinks) {
            return addLinkInfo (node)
          }
          if (isEvalVar(node) && gsnConfig.reportEvals)
            return addLinkInfo (node)
          break
        default:
          break
        }
      return false
    },
    makeChildConfig: function (nodeConfig, node, nChild) {
      if (typeof(node) === 'object') {
        switch (node.type) {
        case 'func':
          if (node.funcname === 'link')
            return (gsnConfig.ignoreLinkSubtrees && nChild === 1
                    ? { excludeSubtree: true }
                    : extend ({},
                              nodeConfig,
                              { inLink: true,
                                linkText: node.args[0],
                                link: node }))
          else if (node.funcname === 'layout' && gsnConfig.reportLinks)
            return extend ({}, nodeConfig, { layoutNode: node });
          break
        case 'cond':
          if (isTraceryExpr(node))
            return { excludeSubtree: true }
          break
        default:
          break
        }
      }
      return nodeConfig
    }
  })
}

// parseTreeEmpty returns true if a tree contains no nonwhite characters OR unexpanded symbols
// TODO: rewrite using findNodes
function parseTreeEmpty (rhs) {
  var pt = this
  return rhs.reduce (function (result, node) {
    if (result) {
      if (typeof(node) === 'string')
	result = !isTruthy (node)
      else {
        switch (node.type) {
        case 'assign':
          result = pt.parseTreeEmpty (node.value) && (!node.local || pt.parseTreeEmpty (node.local))
          break
        case 'alt':
          result = node.opts.reduce (function (r, opt) {
	    return r && pt.parseTreeEmpty (opt)
          }, true)
          break
        case 'cond':
          result = pt.parseTreeEmpty (node.t) && pt.parseTreeEmpty (node.f)   // this will miss some empty trees, oh well
          break
        case 'func':
          result = pt.parseTreeEmpty (node.args)
          break
        case 'lookup':
          result = false  // we aren't checking variable values, so just assume any referenced variable is nonempty (yes this will miss some empty trees)
          break
        case 'root':
        case 'alt_sampled':
	  if (node.rhs)
	    result = pt.parseTreeEmpty (node.rhs)
	  break
        case 'rep_sampled':
          if (node.reps)
            return node.reps.reduce (function (all, rep) { return all && pt.parseTreeEmpty(rep) }, true)
        default:
        case 'sym':
	  result = node.rhs && pt.parseTreeEmpty (node.rhs)
	  break
        }
      }
    }
    return result
  }, true)
}

function isEvalVar (node) {
  return (typeof(node) === 'object' && node.type === 'func'
          && ((node.funcname === 'eval' && node.args.length === 1)
              || (node.funcname === 'call' && node.args[1].type === 'func' && node.args[1].funcname === 'list' && node.args[1].args.length === 0)
              || (node.funcname === 'apply' && node.args[1].type === 'root' && node.args[1].rhs.length === 0))
          && node.args[0].type === 'lookup')
}

function getEvalVar (node) {
  return node.args[0].varname
}

function makeEvalVar (name) {
  return { type: 'func',
           funcname: 'eval',
           args: [{ type: 'lookup',
                    varname: name }] }
}

function isPlainSymExpr (node) {
  return typeof(node) === 'object' && node.type === 'sym' && !(node.bind && node.bind.length && node.bind[0].args && node.bind[0].args.length)
}

// #x# expands to &if{$x}{&eval{$x}}{~x}
function isTraceryExpr (node, makeSymbolName) {
  makeSymbolName = makeSymbolName || defaultMakeSymbolName
  return typeof(node) === 'object' && node.type === 'cond'
    && node.test.length === 1 && typeof(node.test[0]) === 'object' && node.test[0].type === 'lookup'
    && node.t.length === 1 && isEvalVar (node.t[0])
    && node.f.length === 1 && isPlainSymExpr (node.f[0])
    && node.test[0].varname.toLowerCase() === node.t[0].args[0].varname.toLowerCase()
    && node.test[0].varname.toLowerCase() === makeSymbolName (node.f[0]).toLowerCase()
}

function makeTraceryExpr (name) {
  return { type: 'cond',
           test: [{ type: 'lookup', varname: name }],
           t: [makeEvalVar (name)],
           f: [{ type: 'sym', name: name }] }
}

function traceryVarName (traceryNode) {
  return traceryNode.test[0].varname.toLowerCase()
}

// &prob{p}{x}{y} expands to &if{&lt{&random{1}}{p}}{x}{y}
function isProbExpr (node) {
  return typeof(node) === 'object' && node.type === 'cond'
    && node.test.length === 1 && typeof(node.test[0]) === 'object' && node.test[0].type === 'function' && node.test[0].funcname === 'lt' && node.test[0].args.length === 2
    && typeof(node.test[0].args[0]) === 'object' && node.test[0].args[0].type === 'function' && node.test[0].args[0].funcname === 'random' && node.test[0].args[0].args.length === 1
    && typeof(node.test[0].args[0].args[0]) === 'string' && node.test[0].args[0].args[0] === '1'
}

// &accept{x} expands to $accept=&quote{$x}
// similarly &reject{x}, &status{x}, and &footer{x}
function isQuoteAssignKeywordExpr (node) {
  return isQuoteAssignExpr (node)
    && (node.varname === 'accept' || node.varname === 'reject' || node.varname === 'status' || node.varname === 'footer')
}

function isQuoteAssignExpr (node) {
  return typeof(node) === 'object' && node.type === 'assign' && !node.local
    && node.value.length === 1 && node.value[0].type === 'func' && node.value[0].funcname === 'quote'
}

function getQuoteAssignRhs (node) {
  return node.value[0].args
}

// &tag{x} expands to $tags={$tags x}
function isTagExpr (node) {
  return typeof(node) === 'object' && node.type === 'assign' && !node.local
    && node.varname === 'tags'
    && node.value.length > 2
    && node.value[0].type === 'lookup' && node.value[0].varname === 'tags'
    && node.value[1] === ' '
}

function getTagExprRhs (node) {
  return node.value.slice(2)
}

// &meter{x}{y}    expands to &push$meters&list{&value{x}&strictquote&math{y}
// &meter{x}{y}{z} expands to &push$meters&list{&value{x}&strictquote&math{y}&strictquote{z}}
function isMeterExpr (node) {
  return typeof(node) === 'object' && node.type === 'func' && node.funcname === 'push'
    && node.args[0].args[0].varname === 'meters'
    && typeof(node.args[1]) === 'object' && node.args[1].type === 'func' && node.args[1].funcname === 'list'
    && (node.args[1].args[0].args.length === 2 || node.args[1].args[0].args.length === 3)
    && typeof(node.args[1].args[0].args[1]) === 'object' && node.args[1].args[0].args[1].type === 'func'
    && node.args[1].args[0].args[1].funcname === 'strictquote' && node.args[1].args[0].args[1].args.length === 1
    && typeof(node.args[1].args[0].args[1].args[0]) === 'object' && node.args[1].args[0].args[1].args[0].type === 'func'
    && node.args[1].args[0].args[1].args[0].funcname === 'math'
    && (node.args[1].args[0].args.length === 2
        || (typeof(node.args[1].args[0].args[2]) === 'object' && node.args[1].args[0].args[2].type === 'func'
            && node.args[1].args[0].args[2].funcname === 'strictquote'))
}

function getMeterIcon (node) {
  return node.args[1].args[0].args[0]
}

function getMeterLevel (node) {
  return node.args[1].args[0].args[1].args[0].args
}

function getMeterStatus (node) {
  return node.args[1].args[0].args.length === 3 ? node.args[1].args[0].args[2].args : ''
}

// &layout{x,y}{args}
function isLayoutExpr (node) {
  return typeof(node) === 'object' && node.type === 'func' && node.funcname === 'layout'
}

function getLayoutCoord (node) {
  return node.args[0]
}

function getLayoutContent (node) {
  return (typeof(node.args[1]) === 'object' && node.args[1].type === 'func' && node.args[1].funcname === 'quote'
          ? node.args[1].args
          : [node.args[1]])
}

// &layout{x,y}&link{src}{target}

function isLinkExpr (node) {
    return typeof(node) === 'object' && node.type === 'func' && node.funcname === 'link'
}

function getLinkText (node) {
  return node.args[0]
}

function getLinkTargetRhs (node) {
  return node.args[1].args
}

function isLayoutLinkExpr (node) {
  return isLayoutExpr(node) && getLayoutContent(node).length === 1 && isLinkExpr(getLayoutContent(node)[0])
}

function getLayoutLink (node) {
  return getLayoutContent(node)[0]
}

// $var=&layout{X,Y}{...}
function isLayoutAssign (node) {
  return typeof(node) === 'object' && node.type === 'assign' && !node.local && !node.visible && node.value.length === 1 && isLayoutExpr(node.value[0])
}

function getLayoutExpr (node) {
  return node.value[0]
}

// &placeholder$var{X,Y} or &placeholder~sym{X,Y}
function isPlaceholderExpr (node) {
  return typeof(node) === 'object' && node.type === 'func' && node.funcname === 'placeholder'
}

function getPlaceholderNode (node) {
  return node.args[0].args[0]
}

function getPlaceholderCoord (node) {
  return node.args[1]
}

// Misc text rendering
function makeFuncArgTree (pt, args, makeSymbolName, forceBraces, allowNakedSymbol) {
  var noBraces = !forceBraces && args.length === 1 && (args[0].type === 'func' || args[0].type === 'lookup' || args[0].type === 'alt' || (allowNakedSymbol && isPlainSymExpr(args[0])))
  return [noBraces ? '' : leftBraceChar, pt.makeRhsTree (args, makeSymbolName), noBraces ? '' : rightBraceChar]
}

function escapeString (text) {
  return text.replace(/[\$&\~#\{\}\[\]\|\\]/g,function(m){return'\\'+m})
}

function makeMathExpr (pt, args, op, makeSymbolName) {
  return [makeMathTree (pt, args[0], makeSymbolName), ' ', op, ' ', makeMathTree (pt, args[1], makeSymbolName)]
}
  
function makeMathTree (pt, tok, makeSymbolName) {
  if (typeof(tok) !== 'string' && tok.type === 'func') {
    switch (tok.funcname) {
    case 'add': return makeMathExpr (pt, tok.args, '+', makeSymbolName)
    case 'subtract': return makeMathExpr (pt, tok.args, '-', makeSymbolName)
    case 'multiply': return makeMathExpr (pt, tok.args, '*', makeSymbolName)
    case 'divide': return makeMathExpr (pt, tok.args, '/', makeSymbolName)
    case 'value':
      if (tok.args.length === 1)
        return ['(', makeMathTree (pt, tok.args[0], makeSymbolName), ')']
    default:
      break
    }
  }
  return makeRhsTree.call (pt, [tok], makeSymbolName)
}

function makeRhsText (rhs, makeSymbolName) {
  return makeString (this.makeRhsTree (rhs, makeSymbolName))
}

function makeRhsTree (rhs, makeSymbolName, nextSiblingIsAlpha) {
  var pt = this
  makeSymbolName = makeSymbolName || defaultMakeSymbolName
  return stripFooter(rhs).map (function (tok, n) {
    var result
    if (typeof(tok) === 'string')
      result = escapeString (tok)
    else {
      var nextTok = (n < rhs.length - 1) ? rhs[n+1] : undefined
      var nextIsAlpha = !!(typeof(nextTok) === 'undefined'
                           ? nextSiblingIsAlpha
                           : (typeof(nextTok) === 'string' && nextTok.match(/^[A-Za-z0-9_]/)))
      switch (tok.type) {
      case 'unquote':
        result = tok.text
        break
      case 'root':
        result = pt.makeRhsTree (tok.rhs, makeSymbolName)
        break
      case 'lookup':
        result = (nextIsAlpha
                  ? [varChar, [leftBraceChar, tok.varname, rightBraceChar]]
                  : [varChar, tok.varname])
	break
      case 'assign':
        if (isQuoteAssignKeywordExpr (tok))
          result = [funcChar, tok.varname, [leftBraceChar, pt.makeRhsTree(getQuoteAssignRhs(tok),makeSymbolName), rightBraceChar]]
        else if (isTagExpr (tok))
          result = [funcChar, 'tag', [leftBraceChar, pt.makeRhsTree(getTagExprRhs(tok),makeSymbolName), rightBraceChar]]
	else if (isLayoutExpr (tok))
          result = [funcChar, 'xy', [leftBraceChar, getLayoutCoord(tok), rightBraceChar], [leftBraceChar, pt.makeRhsTree (getLayoutContent(tok), makeSymbolName), rightBraceChar]]
	else if (isLayoutAssign (tok)) {
	  var content = getLayoutContent(getLayoutExpr(tok))
          result = [leftSquareBraceChar, tok.varname, '@', getLayoutCoord(getLayoutExpr(tok)), '=>']
	    .concat (content.length === 1 && typeof(content[0]) === 'object' && content[0].type === 'alt'
		     ? content[0].opts.map (makeOptTree.bind(pt,makeSymbolName,content[0].opts.length))
		     : pt.makeRhsTree(content,makeSymbolName))
	    .concat ([rightSquareBraceChar])
        } else {
          var assign = [varChar, tok.varname, (tok.visible ? ':' : '') + assignChar, [leftBraceChar, pt.makeRhsTree(tok.value,makeSymbolName), rightBraceChar]]
          if (tok.local)
            result = [funcChar, 'let'].concat (assign, [[leftBraceChar, pt.makeRhsTree(tok.local,makeSymbolName), rightBraceChar]])
          else
            result = assign
        }
	break
      case 'alt':
        result = [leftSquareBraceChar,
                  tok.opts.map (makeOptTree.bind(pt,makeSymbolName,tok.opts.length)),
                  rightSquareBraceChar]
	break
      case 'rep':
        result = [funcChar, 'rep', makeFuncArgTree (pt, tok.unit, makeSymbolName), [leftBraceChar, tok.min + (tok.max !== tok.min ? (',' + tok.max) : ''), rightBraceChar]]
	break
      case 'cond':
        var isTracery = isTraceryExpr (tok, makeSymbolName), isProb = isProbExpr (tok)
        result = (isTracery
                  ? [traceryChar, tok.test[0].varname, traceryChar]
                  : [(isProb ? ['prob',tok.test.args[1]] : ['if',tok.test]),
		     [isProb ? '' : 'then',tok.t],
		     [isProb ? '' : 'else',tok.f]].reduce (function (memo, keyword_arg, n) {
                       return memo.concat ([(n ? '' : funcChar) + keyword_arg[0], [leftBraceChar, pt.makeRhsTree (keyword_arg[1], makeSymbolName), rightBraceChar]])
                     }, []))
        break;
      case 'func':
        if (isMeterExpr (tok)) {
          var status = getMeterStatus (tok)
          result = [funcChar, 'meter',
                    [leftBraceChar, pt.makeRhsTree ([getMeterIcon (tok)], makeSymbolName), rightBraceChar],
                    [leftBraceChar, pt.makeRhsTree (getMeterLevel (tok), makeSymbolName), rightBraceChar],
                    status ? [leftBraceChar, pt.makeRhsTree (status, makeSymbolName), rightBraceChar] : ' ']
        } else
          switch (funcType (tok.funcname)) {
          case 'layout':
            result = [funcChar, tok.funcname].concat ([[getLayoutCoord(tok)], getLayoutContent(tok)].map (function (args) { return makeFuncArgTree (pt, args, makeSymbolName, true) }))
            break
          case 'link':
            result = [funcChar, tok.funcname].concat ([[tok.args[0]], tok.args[1].args].map (function (args) { return makeFuncArgTree (pt, args, makeSymbolName, true) }))
            break
          case 'reveal':
            result = [funcChar, tok.funcname].concat (tok.args.map (function (arg) { return makeFuncArgTree (pt, [arg], makeSymbolName, true) }))
            break
          case 'placeholder':
            result = [funcChar, tok.funcname].concat ([tok.args[0].args, [tok.args[1]]].reduce (function (arr, args, n) { return (n || args.length
                                                                                                                                 ? arr.concat ([makeFuncArgTree (pt, args, makeSymbolName, n > 0, n === 0)])
                                                                                                                                  : arr.concat ([[pt.leftBraceChar, pt.rightBraceChar]])) }, []))
            break
          case 'parse':
            result = [funcChar, tok.funcname].concat ([tok.args[0].args, [tok.args[1]]].map (function (args) { return makeFuncArgTree (pt, args, makeSymbolName, nextIsAlpha) }))
            break
          case 'apply':
            result = [funcChar, tok.funcname].concat (tok.args.map (function (arg) { return makeFuncArgTree (pt, [arg], makeSymbolName, nextIsAlpha) }))
            break
          case 'push':
            result = [funcChar, tok.funcname, varChar, tok.args[0].args[0].varname].concat (tok.args.length > 1 ? [makeFuncArgTree (pt, tok.args.slice(1), makeSymbolName, nextIsAlpha)] : (nextIsAlpha ? [' '] : []))
            break
          case 'match':
            result = [funcChar, tok.funcname, '/', tok.args[0], '/', pt.makeRhsTree ([tok.args[1]], makeSymbolName, nextIsAlpha)]
              .concat (tok.args.slice(2).map (function (arg, n) { return makeFuncArgTree (pt, n>0 ? arg.args : [arg], makeSymbolName, nextIsAlpha) }))
            break
          case 'map':
          case 'reduce':
            result = [funcChar, tok.funcname, (tok.args[0].varname === defaultMapVar ? '' : [varChar, tok.args[0].varname, ':']), makeFuncArgTree (pt, tok.args[0].value, makeSymbolName)]
              .concat (tok.funcname === 'reduce'
                       ? [varChar, tok.args[0].local[0].varname, '=', makeFuncArgTree (pt, tok.args[0].local[0].value, makeSymbolName), makeFuncArgTree (pt, tok.args[0].local[0].local[0].args, makeSymbolName, nextIsAlpha)]
                       : [makeFuncArgTree (pt, tok.args[0].local[0].args, makeSymbolName, nextIsAlpha)])
            break
          case 'vars':
            result = [funcChar, tok.funcname]
            break
          case 'call':
            result = [funcChar, tok.funcname, makeFuncArgTree (pt, [tok.args[0]], makeSymbolName)].concat (makeArgList.call (pt, tok.args, 1, makeSymbolName))
            break
          case 'quote':
            result = [funcChar, tok.funcname, makeFuncArgTree (pt, tok.args, makeSymbolName, tok.funcname === 'unquote' || nextIsAlpha)]
            break
          case 'math':
            result = [funcChar, tok.funcname, [leftBraceChar, makeMathTree (pt, tok.args[0], makeSymbolName, nextIsAlpha), rightBraceChar]]
            break
          default:
	    var sugaredName = pt.makeSugaredName (tok, makeSymbolName, nextIsAlpha)
            if (sugaredName) {
	      result = sugaredName
            } else {
              result = [funcChar, tok.funcname, makeFuncArgTree (pt, tok.args, makeSymbolName, nextIsAlpha)]
            }
            break
          }
	break
      case 'alt_sampled':
      case 'rep_sampled':
        break
      default:
      case 'sym':
        if (tok.method === 'get' || tok.method === 'set') {
          result = [funcChar, 'x' + tok.method, [symChar, (nextIsAlpha
                                                           ? [leftBraceChar, makeSymbolName(tok), rightBraceChar]
                                                           : makeSymbolName(tok))]]
        } else {
          var hasArgList = tok.bind && tok.bind.length && tok.bind[0] && tok.bind[0].type === 'func' && tok.bind[0].funcname === 'list'
          var hasNonemptyArgList = hasArgList && tok.bind[0].args.length
          var isApply = tok.bind && !hasArgList
          result = (isApply
                    ? [funcChar + 'xapply' + symChar, makeSymbolName(tok), makeFuncArgTree (pt, tok.bind, nextIsAlpha)]
                    : (nextIsAlpha && !hasNonemptyArgList
                       ? [symChar, [leftBraceChar, makeSymbolName(tok), rightBraceChar]]
                       : (hasNonemptyArgList ? [funcChar] : []).concat ([symChar, makeSymbolName(tok)], [makeArgList.call (pt, tok.bind, 0, makeSymbolName)])))
        }
	break
      }
    }
    return result
  })
}

function makeOptTree (makeSymbolName, nOpts, opt, n) {
  var optTree = this.makeRhsTree (opt, makeSymbolName)
  if (n === 0 && optTree.length && typeof(optTree[0]) === 'string')
    optTree[0] = optTree[0].replace (/(:|=>)/g, function (_m, g) { return '\\' + g })
  return [optTree].concat (n < nOpts - 1 ? [pipeChar] : [])
}

function makeArgList (args, n, makeSymbolName) {
  var pt = this
  return (args && args.length && args[n].args && args[n].args.length
          ? args[n].args.map (function (arg) { return [leftBraceChar].concat (pt.makeRhsTree ([arg], makeSymbolName)).concat ([rightBraceChar]) })
          : [])
}

function makeSugaredName (funcNode, makeSymbolName, nextIsAlpha) {
  var name, sugaredName, prefixChar
  makeSymbolName = makeSymbolName || defaultMakeSymbolName
  if (funcNode.args.length === 1 && typeof(funcNode.args[0]) === 'object') {
    if (funcNode.args[0].type === 'sym') {
      name = makeSymbolName(funcNode.args[0])
      prefixChar = symChar
    } else if (funcNode.args[0].type === 'lookup') {
      name = funcNode.args[0].varname
      prefixChar = varChar
    }
    if (name) {
      name = name.toLowerCase()
      var s
      if (funcNode.funcname === 'cap' && name.match(/[a-z]/))
        s = name.replace(/[a-z]/,function(c){return c.toUpperCase()})
      else if (funcNode.funcname === 'uc' && name.match(/[a-z]/))
        s = name.toUpperCase()
      if (s)
        sugaredName = nextIsAlpha ? [prefixChar, [leftBraceChar, s, rightBraceChar]] : [prefixChar, s]
    }
  }
  return sugaredName
}

var defaultSummaryLen = 64
function summarize (text, summaryLen) {
  summaryLen = summaryLen || defaultSummaryLen
  return text.replace(/^\s*/,'').substr (0, summaryLen)
}
function summarizeExpansion (expansion, summaryLen) {
  return this.summarize (this.makeExpansionText ({ node: expansion }), summaryLen)
}
function summarizeRhs (rhs, makeSymbolName, summaryLen) {
  return this.summarize (this.makeRhsText(rhs,makeSymbolName), summaryLen)
}

function defaultMakeSymbolName (node) {
  return node.name
}

function throwSymbolError (method, config) {
  throw new Error ('unhandled method (' + method + ') for symbol ' + symChar + (config.symbolName || config.node.name))
}

function syncPromiseResolve() {
  // returns a dummy Promise-like (thenable) object that will call the next then'd Promise or function immediately
  var result = Array.prototype.splice.call (arguments, 0)
  if (result.length === 1 && result[0] && typeof(result[0].then) === 'function')  // if we're given one result & it looks like a Promise, return that
    return result[0]
  return { result: result,  // for debugging inspection
           then:
           function (next) {  // next can be a function or another thenable
             if (typeof(next.then) === 'function')  // thenable?
               return next
             // next is a function, so call it
             var nextResult = next.apply (next, result)
             if (nextResult && typeof(nextResult.then) !== 'undefined')  // thenable?
               return nextResult
             // create a Promise-like wrapper for the result
             return syncPromiseResolve (nextResult)
           },
           catch: function (errorCallback) { /* errorCallback will never be called */ } }
}

function makeSyncResolver (config, callback) {
  return function() { return syncPromiseResolve (callback.apply (config, arguments)) }
}

function makeSyncResolverMap (config, obj) {
  var result = {}
  Object.keys(obj).forEach (function (key) { result[key] = makeSyncResolver (config, obj[key]) })
  return result
}

function makeSyncConfig (config) {
  return extend ({},
                 config,
                 { sync: true,
                   before: (config.beforeSync
                            ? makeSyncResolverMap (config, config.beforeSync)
                            : config.before),
                   after: (config.afterSync
                           ? makeSyncResolverMap (config, config.afterSync)
                           : config.after),
                   expand: (config.expandSync
                            ? makeSyncResolver (config, config.expandSync)
                            : (config.expand || throwSymbolError.bind(null,'expand'))),
                   get: (config.getSync
                         ? makeSyncResolver (config, config.getSync)
                         : (config.get || throwSymbolError.bind(null,'get'))),
                   set: (config.setSync
                         ? makeSyncResolver (config, config.setSync)
                         : (config.set || throwSymbolError.bind(null,'set'))) })
}

function makeRhsExpansionSync (config) {
  var result
  this.makeRhsExpansionPromise (makeSyncConfig (config))
    .then (function (expansion) {
      result = expansion
    })
  return result
}

function makeExpansionSync (config) {
  var result
  this.makeExpansionPromise (makeSyncConfig (config))
    .then (function (expansion) {
      result = expansion
    })
  return result
}

function textReducer (expansion, childExpansion) {
  var leftVal = expansion.value, rightVal = childExpansion.value
  var leftText = expansion.text, rightText = childExpansion.text
  var value = (typeof(leftVal) === 'undefined'
               ? (typeof(rightVal) === 'undefined'
                  ? rightText
                  : rightVal)
               : (typeof(leftVal) === 'string'
                  ? (leftVal + (typeof(rightVal) === 'undefined'
                                ? rightText
                                : makeString(rightVal)))
                  : (leftVal.concat ((typeof(rightVal) === 'undefined' || typeof(rightVal) === 'string')
                                     ? [rightText]
                                     : rightVal))))
  return extend (expansion,
                 childExpansion,
                 { text: leftText + rightText,
                   value: value,
                   tree: expansion.tree.concat (childExpansion.tree),
                   nodes: expansion.nodes + childExpansion.nodes })
}

function listReducer (expansion, childExpansion) {
  var leftVal = expansion.value, rightVal = childExpansion.value
  var leftText = expansion.text, rightText = childExpansion.text
  var value = leftVal.concat ((typeof(rightVal) === 'undefined' || typeof(rightVal) === 'string')
                              ? [rightText]
                              : [rightVal])
  return extend (expansion,
                 childExpansion,
                 { text: leftText + rightText,
                   value: value,
                   tree: expansion.tree.concat (childExpansion.tree),
                   nodes: expansion.nodes + childExpansion.nodes })
}

function mapReducer (expansion, childExpansion, config) {
  var pt = this
  var mapRhs = config.mapRhs
  var mapVarName = config.mapVarName

  return makeAssignmentPromise.call (pt,
                                     extend ({},
                                             config,
                                             { reduce: textReducer,
                                               init: {} }),
                                     [[mapVarName, [childExpansion.value || childExpansion.text]]],
                                     pt.sampleParseTree (mapRhs, config))
    .then (function (mappedChildExpansion) {
      return listReducer.call (pt, expansion, mappedChildExpansion, config)
    })
}

function forReducer (expansion, childExpansion, config) {
  var pt = this
  var mapRhs = config.mapRhs
  var mapVarName = config.mapVarName

  return makeAssignmentPromise.call (pt,
                                     extend ({},
                                             config,
                                             { reduce: textReducer,
                                               init: {} }),
                                     [[mapVarName, [childExpansion.value || childExpansion.text]]],
                                     pt.sampleParseTree (mapRhs, config))
    .then (function (mappedChildExpansion) {
      return expansion
    })
}

function filterReducer (expansion, childExpansion, config) {
  var pt = this
  var mapRhs = config.mapRhs
  var mapVarName = config.mapVarName

  return makeAssignmentPromise.call (pt,
                                     extend ({},
                                             config,
                                             { reduce: textReducer,
                                               init: {} }),
                                     [[mapVarName, [childExpansion.value || childExpansion.text]]],
                                     pt.sampleParseTree (mapRhs, config))
    .then (function (mappedChildExpansion) {
      return isTruthy (mappedChildExpansion.text) ? listReducer.call (pt, expansion, childExpansion, config) : expansion
    })
}

function reduceReducer (expansion, childExpansion, config) {
  var pt = this
  var mapVarName = config.mapVarName
  var resultVarName = config.resultVarName
  var resultRhs = config.resultRhs

  return makeAssignmentPromise.call (pt,
                                     extend ({},
                                             config,
                                             { reduce: textReducer,
                                               init: {} }),
                                     [[mapVarName, [childExpansion.value || childExpansion.text]],
                                      [resultVarName, [expansion.value || expansion.text]]],
                                     pt.sampleParseTree (resultRhs, config))
}

// makeRhsExpansionPromise is the main method for asynchronously expanding a template
// that may already have been partially expanded using sampleParseTree.
function makeRhsExpansionPromise (config) {
  var pt = this
  var rhs = config.rhs || this.sampleParseTree (config.parsedRhsText || parseRhs (config.rhsText), config)
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  var maxLength = config.maxLength || pt.maxLength
  var maxNodes = config.maxNodes || pt.maxNodes
  var reduce = config.reduce || textReducer
  var makeExpansionPromise = config.makeExpansionPromise || pt.makeExpansionPromise
  var init = extend ({ text: '',
                       vars: config.vars,
                       tree: [],
                       nodes: 0 },
                     config.init)
  return rhs.reduce (function (promise, child) {
    return promise.then (function (expansion) {
      if ((expansion.text && expansion.text.length >= maxLength)
          || (expansion.nodes && expansion.nodes >= maxNodes)) {
        return expansion
      }
      return makeExpansionPromise.call (pt,
                                        extend ({},
                                                config,
                                                { node: child,
                                                  vars: expansion.vars }))
        .then (function (childExpansion) {
          return reduce.call (pt, expansion, childExpansion, config)
        })
    })
  }, resolve (init))
}

function makeRhsExpansionPromiseForConfig (config, resolve, rhs, contextKey) {
  var pt = this, atLimit = false
  var newConfig = extend ({},
                          config,
                          { rhs: rhs,
                            depth: extend ({},
                                           config.depth || {}) })

  var totalDepth = newConfig.totalDepth || 0
  var maxTotalDepth = Math.min (config.maxDepth || pt.maxDepth)
  if (totalDepth >= maxTotalDepth) {
    atLimit = true
  }
  newConfig.totalDepth = totalDepth + 1

  if (contextKey && !atLimit) {
    var recursionDepth = newConfig.depth[contextKey] || 0
    var maxRecursionDepth = Math.min (config.maxRecursion || pt.maxRecursion)
    if (recursionDepth >= maxRecursionDepth)
      atLimit = true
    newConfig.depth[contextKey] = recursionDepth + 1
  }

  if (atLimit) {
    return resolve ({ text: '',
                      tree: [],
                      vars: config.vars,
                      nodes: 0 })
  }

  return this.makeRhsExpansionPromise (newConfig)
}

function handlerPromise (args, resolvedPromise, handler) {
  var pt = this
  var types = Array.prototype.slice.call (arguments, 3)
  var promise = resolvedPromise
  if (handler)
    types.forEach (function (type) {
      if (handler[type]) {
        promise = promise.then (handler[type].apply (pt, args))
      }
    })
  return promise
}

function nlpWrap (text) {
  text = text.replace (/^[ \t]*\./, '0.')  // ugh, nlp doesn't recognize '.5' as '0.5'
  return nlp(text)
}

function toNumber (text) {
  return nlpWrap(text).values().numbers()[0] || 0
}

function cloneItem (item) {
  return (typeof(item) === 'undefined'
          ? undefined
          : (typeof(item) === 'string'
             ? item
             : (isArray(item)
                ? item.map(cloneItem)
                : (typeof(item) === 'object'
                   ? Object.keys(item).sort().map (function (key) { return [key,cloneItem(item[key])] })
                   : item.toString()))))
}

function makeArray (item) {
  return (item
          ? (typeof(item) === 'string'
             ? [item]
             : cloneItem(item))
          : [])
}

function makeString (item) {
  return (item
          ? (typeof(item) === 'string'
             ? item
             : (isArray(item)
                ? item
                : item.rhs)
             .map(makeString).join(''))
          : '')
}

function makeQuoted (item, prev) {
  var result
  if (typeof(item) === 'string')
    result = (typeof(prev) === 'string' ? (funcChar + ',') : '') + escapeString(item)
  else if (item) {
    var prevChild
    result = (funcChar + leftBraceChar
              + item.map (function (child, n) {
                var childQuoted = makeQuoted (child, prevChild)
                prevChild = child
                return childQuoted
              }).join('') + rightBraceChar)
  } else
    result = ''
  return result
}

function shuffleArray (a, rng) {
  for (var n = 0; n < a.length - 1; ++n) {
    var m = n + Math.floor (rng() * (a.length - n))
    var tmp = a[n]
    a[n] = a[m]
    a[m] = tmp
  }
  return a
}

// pseudoRotateArray moves first item to somewhere in the back half
function pseudoRotateArray (a, rng) {
  var halfLen = a.length / 2, insertAfter = Math.ceil(halfLen) + Math.floor (rng() * Math.floor(halfLen))
  var result = a.slice(1)
  result.splice (insertAfter, 0, a[0])
  return result
}

function makeAlternation (item) {
  return (item
          ? (typeof(item) === 'string'
             ? item
             : (item.length > 1
                ? (leftSquareBraceChar + item.map(makeAlternation).join(pipeChar) + rightSquareBraceChar)
                : (item.length ? makeAlternation(item[0]) : '')))
          : '')
}

function valuesEqual (a, b) {
  if (typeof(a) !== typeof(b))
    return false
  if (typeof(a) === 'string')
    return a === b
  if (a.length !== b.length)
    return false
  return a.reduce (function (equal, a_item, n) {
    return equal && valuesEqual (a_item, b[n])
  }, true)
}

function makeGroupVarName (n) { return varChar + n }

var varFunction = {
  push: function (name, varVal, l, r, lv, rv, config) {
    varVal[name] = makeArray(lv).concat (makeArray(rv))
  },
  pop: function (name, varVal, l, lv, config) {
    var a = makeArray(lv)
    varVal[name] = a
    return a.pop()
  },
  unshift: function (name, varVal, l, r, lv, rv, config) {
    varVal[name] = makeArray(rv).concat (makeArray(lv))
  },
  shift: function (name, varVal, l, lv, config) {
    var a = makeArray (lv)
    varVal[name] = a
    return a.shift()
  },
  inc: function (name, varVal, l) {
    varVal[name] = binaryFunction.add (l, '1')
  },
  dec: function (name, varVal, l) {
    varVal[name] = binaryFunction.subtract (l, '1')
  }
}

var regexFunction = {
  match: function (regex, text, expr, config) {
    var pt = this
    var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
    var expansion = { text: '', vars: config.vars, nodes: 1, tree: [], value: [] }
    var promise = resolve (expansion)
    var match
    while (match = regex.exec (text)) {
      promise = (function (match) {
	return promise.then (function (expansion) {
          var sampledExprTree = pt.sampleParseTree (expr, config)
          return makeAssignmentPromise.call (pt, config, match.map (function (group, n) { return [makeGroupVarName(n), [group]] }), sampledExprTree)
            .then (function (exprExpansion) {
              return listReducer (expansion, exprExpansion, config)
            })
	})
      }) (match)
      if (!regex.global)
        break
    }
    return promise
  },
  replace: function (regex, text, expr, config) {
    var pt = this
    var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
    var expansion = { text: '', vars: config.vars, nodes: 1, tree: [] }
    var promise = resolve (expansion)
    var match, nextIndex = 0, endText = text
    while (match = regex.exec (text)) {
      promise = (function (match) {
	var skippedText = text.substr (nextIndex, match.index - nextIndex)
	nextIndex = match.index + match[0].length
	endText = text.substr (nextIndex)
	return promise.then (function (expansion) {
          var sampledExprTree = pt.sampleParseTree (expr, config)
          return makeAssignmentPromise.call (pt, config, match.map (function (group, n) { return [makeGroupVarName(n), [group]] }), sampledExprTree)
            .then (function (exprExpansion) {
              return textReducer (textReducer (expansion, { text: skippedText, nodes: 0 }), exprExpansion)
            })
	})
      }) (match)
      if (!regex.global)
        break
    }
    return promise.then (function() {
      return textReducer (expansion, { text: endText, nodes: 0 })
    })
  },
  split: function (regex, text, _expr, config) {
    var pt = this
    var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
    var split = text.split (regex)
    var expansion = { text: makeString (split), vars: config.vars, nodes: 1, value: split }
    return resolve (expansion)
  },
  grep: function (regex, list, _expr, config) {
    var pt = this
    var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
    var grepped = list.filter (regex.test.bind (regex))
    var expansion = { text: makeString (grepped), vars: config.vars, nodes: 1, value: grepped }
    return resolve (expansion)
  }
}

var lazyBinaryPredicate = {
  // if these return a defined value, the corresponding binaryFunction will return that value after expanding the first argument
  and: function (value) { return isTruthy(value) ? undefined : falseVal },
  or: function (value) { return isTruthy(value) ? value : undefined },
};

var binaryFunction = {
  same: function (l, r, lv, rv) {
    return valuesEqual (lv, rv) ? (isTruthy(l) ? lv : trueVal) : falseVal
  },
  and: function (l, r) {
    return isTruthy(l) && isTruthy(r) ? (l + r) : falseVal
  },
  or: function (l, r) {
    return isTruthy(l) ? l : r
  },
  add: function (l, r) {
    var lVals = nlpWrap(l).values()
    return binaryFunction.or (lVals.length ? lVals.add(toNumber(r)).out() : r, zeroVal)
  },
  subtract: function (l, r) {
    var lVals = nlpWrap(l).values()
    return binaryFunction.or (lVals.length ? lVals.subtract(toNumber(r)).out() : r, zeroVal)
  },
  multiply: function (l, r) {
    return (toNumber(l) * toNumber(r)).toString()
  },
  divide: function (l, r) {
    return (toNumber(l) / toNumber(r)).toString()
  },
  pow: function (l, r) {
    return Math.pow (toNumber(l), toNumber(r)).toString()
  },
  gt: function (l, r) {
    return nlpWrap(l).values().greaterThan(toNumber(r)).out()
  },
  lt: function (l, r) {
    return nlpWrap(l).values().lessThan(toNumber(r)).out()
  },
  eq: function (l, r) {
    return toNumber(l) === toNumber(r) ? binaryFunction.or (binaryFunction.or (l, r), 'eq') : falseVal
  },
  neq: function (l, r) {
    return toNumber(l) === toNumber(r) ? falseVal : binaryFunction.or (binaryFunction.or (l, r), 'neq')
  },
  leq: function (l, r) {
    return binaryFunction.or (binaryFunction.eq(l,r), binaryFunction.lt(l,r))
  },
  geq: function (l, r) {
    return binaryFunction.or (binaryFunction.eq(l,r), binaryFunction.gt(l,r))
  },
  min: function (l, r, lv, rv) {
    return isTruthy (binaryFunction.leq(l,r)) ? lv : rv
  },
  max: function (l, r, lv, rv) {
    return isTruthy (binaryFunction.geq(l,r)) ? lv : rv
  },
  cat: function (l, r, lv, rv) {
    return makeArray(lv).concat (makeArray(rv))
  },
  prepend: function (l, r, lv, rv) {
    return [cloneItem(lv)].concat (makeArray(rv))
  },
  append: function (l, r, lv, rv) {
    return makeArray(lv).concat ([cloneItem(rv)])
  },
  join: function (l, r, lv, rv) {
    return makeArray(lv).join (r)
  },
  nth: function (l, r, lv, rv) {
    var i = Math.floor (toNumber(l)), a = makeArray(rv)
    return (i < 0 || i >= a.length) ? '' : a[i]
  },
  parse: function (l, r, lv, rv, config) {
    if (!unableToParse (this, config, r)) {
      try {
        return Chomsky.parseInside (this, extend ({}, config, { root: l,
                                                                text: r,
                                                                maxSubsequenceLength: config.maxSubsequenceLength || this.maxSubsequenceLength }))
          .then (function (parse) {
            return parse ? makeArray(parse) : ''
          })
      } catch (e) {
        if (config.verbose > 1 || true)
          console.warn (e)
        else
          console.warn ('(error during parse)')
      }
    }
    var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
    return resolve('')
  },
  assonance: function (l, r, lv, rv, config) {
    var textToPhonemes = config.textToPhonemes || textToWords
    var lPhones = textToPhonemes (l), rPhones = textToPhonemes (r)
    var lWords = lPhones.length, rWords = rPhones.length
    var match = 0
    while (match < lWords && match < rWords && lPhones[lWords-match-1] === rPhones[rWords-match-1])
      ++match;
    return (match === lWords && match === rWords ? '' : match) + ''
  },
  layout: function (l, r, lv, rv) {
    return rv
  },
  placeholder: function (l, r, lv, rv) {
    return []
  },
}

// funcType(funcname) returns the function that is the canonical example of how funcname's arguments are rendered
function funcType (funcname) {
  if (funcname === 'reduce' || funcname === 'vars' || funcname === 'math' || funcname === 'parse' || funcname === 'placeholder' || funcname === 'reveal' || funcname === 'layout')
    return funcname
  if (funcname === 'link')
    return 'link'
  if (funcname === 'call' || funcname === 'xcall')
    return 'call'
  if (binaryFunction[funcname] || funcname === 'apply' || funcname === 'xapply')
    return 'apply'
  if (varFunction[funcname])
    return 'push'
  if (regexFunction[funcname])
    return 'match'
  if (funcname === 'map' || funcname === 'filter' || funcname === 'numsort' || funcname === 'lexsort')
    return 'map'
  if (funcname === 'strictquote' || funcname === 'quote' || funcname === 'unquote')
    return 'quote'
  return 'list'
}

function unableToParse (pt, config, text) {
  return !(config.enableParse || pt.enableParse) || text.length > (config.maxParseLength || pt.maxParseLength)
}

function makeRhsExpansionReducer (pt, config, reduce, init) {
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  return makeRhsExpansionPromiseForConfig.bind (pt,
                                                extend ({},
                                                        config,
                                                        { reduce: reduce,
                                                          init: init }),
                                                resolve)
}

function reduceQuasiquote (pt, config, rhs) {
  return makeRhsExpansionReducer (pt,
                                  extend ({},
                                          config,
                                          { makeExpansionPromise: makeQuasiquoteExpansionPromise }),
                                  quasiquoteReducer,
                                  []) (rhs)
}

function quasiquoteReducer (expansion, childExpansion, config, resolve) {
  return extend (expansion,
                 childExpansion,
                 { tree: expansion.tree.concat (childExpansion.tree),
                   nodes: expansion.nodes + childExpansion.nodes })
}

function makeQuasiquoteExpansionPromise (config) {
  var pt = this
  var node = config.node
  var varVal = config.vars || {}
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  var expansion = { text: '', vars: varVal, nodes: 1 }
  function addExpansionNodes (x) { x.nodes += expansion.nodes; return extend (expansion, x) }
  if (node) {
    if (typeof(node) === 'string') {
      expansion.text = node
      expansion.tree = [node]
      return resolve (expansion)
    } else if (node.type === 'func' && node.funcname === 'quote') {
      config = extend ({}, config, { quoteLevel: config.quoteLevel + 1 })
    } else if (node.type === 'func' && node.funcname === 'unquote') {
      config = extend ({}, config, { quoteLevel: config.quoteLevel - 1 })
      if (config.quoteLevel <= 0)
        return makeRhsExpansionReducer (pt, extend (config, { makeExpansionPromise: null }), textReducer, {}) (node.args)
        .then (function (unquoteExpansion) {
          unquoteExpansion.tree = [{ type: 'unquote', text: unquoteExpansion.text }]
          return addExpansionNodes (unquoteExpansion)
        })
    }
  }
  var nodeCopy = extend ({}, node)
  return nodeArgKeys.reduce (function (promise, rhsKey) {
    var rhsVal = node[rhsKey]
    return (rhsVal
            ? promise.then (function() {
              return reduceQuasiquote (pt, config, rhsVal)
                .then (function (rhsCopy) {
                  nodeCopy[rhsKey] = rhsCopy.tree
                  expansion.nodes += rhsCopy.nodes
                })
            })
            : promise)
  }, resolve()).then (function() {
    return nodeListArgKeys.reduce (function (promise, optsKey) {
      var optsVal = node[optsKey]
      nodeCopy[optsKey] = []
      if (optsVal)
        optsVal.forEach (function (rhs) {
          promise = promise.then (function() {
            return reduceQuasiquote (pt, config, rhs)
              .then (function (rhsCopy) {
                nodeCopy[optsKey].push (rhsCopy.tree)
                expansion.nodes += rhsCopy.nodes
              })
          })
        })
      return promise
    }, resolve())
  }).then (function() {
    expansion.tree = [nodeCopy]
    return expansion
  })
}

function makeEvalPromise (config, makeSymbolName, evalNode, evalText, argsNodeRhs) {
  var pt = this
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  var makeRhsExpansionPromiseFor = makeRhsExpansionReducer (pt, config, textReducer, {})
  if (typeof(evalNode.evaltext) === 'undefined') {
    evalNode.evaltext = evalText
    evalNode.evaltree = parseRhs (evalText)
    evalNode.value = pt.sampleParseTree (evalNode.evaltree, config)
  } else if (config.validateEvalText) {
    var storedEvalText = pt.makeRhsText (evalNode.evaltree, makeSymbolName)
    if (storedEvalText !== evalText) {
      if (config.invalidEvalTextCallback)
	config.invalidEvalTextCallback (evalNode, storedEvalText, evalText)
      else
        throw new Error ('evaltext mismatch')
    }
  }
  return (argsNodeRhs
          ? (makeRhsExpansionPromiseFor (argsNodeRhs)
             .then (function (argsExpansion) {
               return argsExpansion.value
             }))
          : resolve ([]))
    .then (function (args) {
      args = makeArray (args || [])
      return makeAssignmentPromise.call (pt,
                                         config,
                                         [[makeGroupVarName(0), null, args]]
                                         .concat (args.map (function (arg, n) {
                                           return [makeGroupVarName(n+1), null, arg]
                                         })),
                                         evalNode.value)
    })
}

function makeAssignmentPromise (config, nameValueList, local, visible) {
  var pt = this
  var varVal = config.vars || {}, oldVarVal = {}
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  var expansion = { text: '', vars: varVal, nodes: 1 }
  var promise = resolve()
  nameValueList.forEach (function (nameValue) {
    var name = nameValue[0].toLowerCase(), value = nameValue[1], valueExpansion = nameValue[2]
    oldVarVal[name] = varVal[name]
    promise = promise.then (function() {
      return (typeof(valueExpansion) !== 'undefined'
              ? resolve ({ nodes: 0, value: valueExpansion })
              : makeRhsExpansionReducer (pt, config, textReducer, {}) (value))
    }).then (function (valExpansion) {
      extend (expansion.vars, valExpansion.vars)
      var newValue = valExpansion.value || valExpansion.text
      expansion.vars[name] = newValue
      expansion.nodes += valExpansion.nodes
      if (visible) {
        expansion.value = newValue
        expansion.text = makeString (newValue)
      }
    })
  })
  return promise.then (function() {
    if (local) {
      var localConfig = extend ({}, config, { vars: expansion.vars })
      return (typeof(local) === 'function'
              ? resolve (local (localConfig))
              : (makeRhsExpansionPromiseForConfig.call (pt, localConfig, resolve, local)
                 .then (function (localExpansion) {
                   extend (expansion.vars, localExpansion.vars, oldVarVal)
                   expansion.value = localExpansion.value
                   expansion.text = localExpansion.text
                   expansion.nodes += localExpansion.nodes
                   return expansion
                 }))).then (function (result) {
	           Object.keys(oldVarVal).forEach (function (name) {
	             if (typeof(oldVarVal[name]) === 'undefined')
	               delete expansion.vars[name]
	           })
                   return result
                 })
    } else
      return expansion
  })
}

function makeExpansionPromise (config) {
  var pt = this
  var node = config.node
  var varVal = config.vars || {}
  var depth = config.depth || {}
  var makeSymbolName = config.makeSymbolName || defaultMakeSymbolName
  var rng = config && config.rng ? config.rng : Math.random
  var resolve = config.sync ? syncPromiseResolve : Promise.resolve.bind(Promise)
  return handlerPromise ([node, varVal, depth], resolve(), config.before, node.type, 'all')
    .then (function() {
      var expansion = { text: '', vars: varVal, nodes: 1 }
      var expansionPromise = resolve (expansion), promise = expansionPromise
      var makeRhsExpansionPromiseFor = makeRhsExpansionReducer (pt, config, textReducer, {})
      var makeListExpansionPromiseFor = makeRhsExpansionReducer (pt, config, listReducer, { value: [] })
      function addExpansionNodes (x) { x.nodes += expansion.nodes; return extend (expansion, x) }
      if (node) {
        if (typeof(node) === 'string') {
          expansion.text = node
        } else {
          switch (node.type) {
          case 'assign':
            promise = makeAssignmentPromise.call (pt, config, [[node.varname, node.value]], node.local, node.visible)
            break

          case 'lookup':
            var name = node.varname.toLowerCase()
            expansion.value = varVal[name] || ''
            expansion.text = makeString (expansion.value)
            node.value = expansion.value  // used by makeParseTree
            break

          case 'cond':
            promise = makeRhsExpansionPromiseFor (node.test)
              .then (function (testExpansion) {
                var testValue = isTruthy (testExpansion.text) ? true : false
                var testResult = testValue ? node.t : node.f
                node.value = testValue  // used by makeParseTree
                node.result = testResult  // used by makeParseTree
                expansion.nodes += testExpansion.nodes
                return makeRhsExpansionPromiseFor (testResult).then (addExpansionNodes)
              })
            break

          case 'func':
            // ensure expansion is reproducible by stashing/retrieving random numbers in node
            var nodeRng = node.rng ? node.rng.shift.bind(node.rng) : rng
            var rngCache = node.rng
            delete node.rng
            config.rngNode = node
            function rngSaver() { var r = nodeRng(); var node = config.rngNode; if (!node.rng) node.rng = []; node.rng.push(r); return r }
            config = extend ({}, config, { rng: rngSaver })
            // dispatch by funcname
	    if (node.funcname === 'strictquote') {
              // quote
              expansion.text = pt.makeRhsText (node.args, makeSymbolName)
            } else if (node.funcname === 'quote') {
              // quasiquote
              promise = reduceQuasiquote (pt, extend ({}, config, { quoteLevel: 1 }), node.args)
                .then (function (quasiquoteExpansion) {
                  addExpansionNodes (quasiquoteExpansion)
                  expansion.text = pt.makeRhsText (quasiquoteExpansion.tree, makeSymbolName)
                  delete expansion.value
                  return expansionPromise
                })
            } else if (node.funcname === 'list') {
              // list
              promise = makeListExpansionPromiseFor (node.args)
                .then (function (listExpansion) {
                  expansion.value = listExpansion.value
                  expansion.text = makeString (expansion.value)
                  return expansionPromise
                })
            } else if (node.funcname === 'json') {
              // json
              promise = makeListExpansionPromiseFor (node.args)
                .then (function (listExpansion) {
                  expansion.text = JSON.stringify (listExpansion.value)
                  return expansionPromise
                })
            } else if (node.funcname === 'map' || node.funcname === 'for') {
              // map/for. first arg is &let$VAR:LIST{&strictquote{EXPR}}
              promise = makeRhsExpansionPromiseFor (node.args[0].value)
                .then (function (listExpansion) {
                  return makeRhsExpansionReducer (pt,
                                                  extend ({},
                                                          config,
                                                          { mapVarName: node.args[0].varname,
                                                            mapRhs: node.args[0].local[0].args }),
                                                  node.funcname === 'map' ? mapReducer : forReducer,
                                                  { value: [] }) (makeArray (listExpansion.value))
                })
            } else if (node.funcname === 'numsort' || node.funcname === 'lexsort') {
              // numsort/lexsort. first arg is &let$VAR:LIST{&strictquote{EXPR}}
              promise = makeRhsExpansionPromiseFor (node.args[0].value)
                .then (function (listExpansion) {
                  var list = makeArray (listExpansion.value)
                  return makeRhsExpansionReducer (pt,
                                                  extend ({},
                                                          config,
                                                          { mapVarName: node.args[0].varname,
                                                            mapRhs: node.args[0].local[0].args }),
                                                  mapReducer,
                                                  { value: [] }) (list)
                    .then (function (weightListExpansion) {
                      var weights = makeArray (weightListExpansion.value).map (node.funcname === 'numsort' ? toNumber : makeString)
                      var indices = list.map (function (_val, n) { return n })
                      var sortedIndices = indices.sort (node.funcname === 'numsort'
                                                        ? function (a, b) { return weights[a] - weights[b] }
                                                        : function (a, b) { return String.prototype.localeCompare.call (weights[a], weights[b]) })
                      extend (expansion.vars, weightListExpansion.vars)
                      expansion.nodes += listExpansion.nodes + weightListExpansion.nodes
                      expansion.value = sortedIndices.map (function (index) { return list[index] })
                      expansion.text = makeString (expansion.value)
                      return expansion
                    })
                })
            } else if (node.funcname === 'filter') {
              // filter. first arg is &let$VAR:LIST{&strictquote{TEST}}
              promise = makeRhsExpansionPromiseFor (node.args[0].value)
                .then (function (listExpansion) {
                  return makeRhsExpansionReducer (pt,
                                                  extend ({},
                                                          config,
                                                          { mapVarName: node.args[0].varname,
                                                            mapRhs: node.args[0].local[0].args }),
                                                  filterReducer,
                                                  { value: [] }) (makeArray (listExpansion.value))
                })
            } else if (node.funcname === 'reduce') {
              // reduce. first arg is &let$VAR:LIST{&let$RESULT:INITIAL{&strictquote{REDUCE}}}
              promise = makeRhsExpansionPromiseFor (node.args[0].value)
                .then (function (listExpansion) {
                  return makeRhsExpansionPromiseFor (node.args[0].local[0].value)
                    .then (function (initExpansion) {
                      return makeRhsExpansionReducer (pt,
                                                      extend ({},
                                                              config,
                                                              { mapVarName: node.args[0].varname,
                                                                resultVarName: node.args[0].local[0].varname,
                                                                resultRhs: node.args[0].local[0].local[0].args }),
                                                      reduceReducer,
                                                      { value: initExpansion.value }) (makeArray (listExpansion.value))
                    })
                })
            } else if (regexFunction[node.funcname]) {
              // regex functions. arguments are (regex, flags, text, expression_to_evaluate)
              promise = makeRhsExpansionPromiseFor ([node.args[0]])
                .then (function (regexArg) {
                  return makeRhsExpansionPromiseFor ([node.args[1]])
                    .then (function (flagsArg) {
                      return makeRhsExpansionPromiseFor ([node.args[2]])
                        .then (function (textArg) {
                          expansion.nodes += regexArg.nodes + flagsArg.nodes + textArg.nodes
                          var arg = node.funcname === 'grep' ? textArg.value : textArg.text
                          return regexFunction[node.funcname].call (pt, new RegExp (regexArg.text, flagsArg.text), arg, node.args.length > 3 ? node.args[3].args : null, config)
                            .then (addExpansionNodes)
                        })
                    })
                })
            } else if (varFunction[node.funcname]) {
              // variable-modifying functions. first argument is &strictquote{$VAR}
              var name = node.args[0].args[0].varname, func = varFunction[node.funcname]
              var isUnary = node.args.length === 1
              var argPromise = (isUnary
                                ? syncPromiseResolve()
                                : makeRhsExpansionPromiseFor ([node.args[1]]))
              promise = argPromise
                .then (function (argExpansion) {
                  return makeRhsExpansionPromiseFor ([node.args[0].args[0]])
                    .then (function (varExpansion) {
                      expansion.nodes += varExpansion.nodes
                      if (isUnary)
                        return func.call (pt, name, varVal, varExpansion.text, varExpansion.value, config)
                      expansion.nodes += argExpansion.nodes
                      return func.call (pt, name, varVal, varExpansion.text, argExpansion.text, varExpansion.value, argExpansion.value, config)
                    })
                }).then (function (funcResult) {
                  if (typeof(funcResult) !== 'undefined') {
                    expansion.value = funcResult
                    expansion.text = makeString (funcResult)
                  }
                  return expansion
                })
            } else if (binaryFunction[node.funcname]) {
              // binary functions
	      var lazyPred = lazyBinaryPredicate[node.funcname]
              promise = makeRhsExpansionPromiseFor ([node.args[0]])
                .then (function (leftArg) {
		  var lazyResult = lazyPred && lazyPred (leftArg.value)
		  if (typeof(lazyResult) !== 'undefined') {
		    expansion.value = lazyResult
		    expansion.text = makeString (lazyResult)
		    return expansionPromise
		  }
                  return makeRhsExpansionPromiseFor ([node.args[1]])
                    .then (function (rightArg) {
                      expansion.nodes += leftArg.nodes + rightArg.nodes
                      return resolve (binaryFunction[node.funcname].call (pt, leftArg.text, rightArg.text, leftArg.value, rightArg.value, config))
                        .then (function (binaryResult) {
                          expansion.value = binaryResult
                          expansion.text = makeString (binaryResult)
                          return expansionPromise
                        })
                    })
                })
            } else if (node.funcname === 'link' || node.funcname === 'reveal') {
              promise = makeRhsExpansionPromiseFor ([node.args[0]])
                .then (function (textArg) {
                  return makeRhsExpansionPromiseFor ([node.args[1]])
                    .then (function (linkArg) {
                      expansion.nodes += textArg.nodes + linkArg.nodes
                      expansion.text = (config.makeLink
                                        ? config.makeLink (textArg, linkArg, node.funcname)
                                        : (funcChar + node.funcname
                                           + leftBraceChar + textArg.text + rightBraceChar
                                           + leftBraceChar + linkArg.text + rightBraceChar))
                      expansion.value = expansion.text
                      return expansionPromise
                    })
                })
	    } else {
              // unary functions
              if (node.funcname === 'call' || node.funcname === 'apply')
                promise = makeRhsExpansionPromiseFor ([node.args[0]])
                .then (function (evalExpansion) {
                  return makeEvalPromise.call (pt, config, makeSymbolName, node, evalExpansion.text, [node.args[1]])
                    .then (addExpansionNodes)
                })
              else
                promise = makeRhsExpansionPromiseFor (node.args)
                .then (function (argExpansion) {
                  var arg = argExpansion.text
                  expansion.nodes += argExpansion.nodes
                  switch (node.funcname) {

                    // eval
                  case 'eval':
                    return makeEvalPromise.call (pt, config, makeSymbolName, node, argExpansion.text, null)
                      .then (addExpansionNodes)
                    break

                    // tree
                  case 'tree':
                    expansion.value = ['root'].concat (makeParseTree (argExpansion.tree))
                    expansion.text = makeString (expansion.value)
                    break

                    // grammar
                  case 'grammar':
                    return Chomsky.makeGrammar (pt, extend ({}, config, { root: arg, normal: true }))
                      .then (function (cfg) {
                        function stateName (state, rank) { return '_' + (state.type === 'start' ? 'start' : rank) }
                        expansion.value = cfg.stateByRank.map (function (state, rank) {
                          return [leftSquareBraceChar,
                                  stateName (state, rank),
                                  '=>',
                                  state.opts.map (function (opt, n) {
                                    return makeOptTree.call (pt, makeSymbolName, state.opts.length, opt.rhs.map (function (node) {
                                      return (node.type === 'term'
                                              ? node.text
                                              : makeTraceryExpr (stateName (cfg.stateByName[node.name], node.rank)))
                                    }), n)
                                  }),
                                  rightSquareBraceChar]
                        })
                          expansion.text = makeString (expansion.value)
                        return expansion
                      }).catch (function (e) {
                        if (config.verbose > 1)
                          console.warn (e)
                        else
                          console.warn ('(error during syntactic analysis)')
                      })
                    break

                    // syntax
                  case 'syntax':
                    node.evaltree = parseRhs (arg)
                    expansion.value = pt.makeRhsTree (node.evaltree, makeSymbolName)
                    expansion.text = makeString (expansion.value)
                    break

                    // parse JSON
                  case 'parsejson':
                    try {
                      expansion.value = cloneItem (JSON.parse (arg))
                      expansion.text = makeString (expansion.value)
                    } catch (e) {
                      // do nothing, bad JSON not our problem, but maybe gripe a little
                      console.warn(e)
                    }
                    break
                    
                    // escape
                  case 'escape':
                    expansion.text = escapeString (arg)
                    break

                    // vars
                  case 'vars':
                    expansion.value = Object.keys (varVal).sort()
                    expansion.text = makeString (expansion.value)
                    break

                    // quotify
                  case 'quotify':
                    expansion.text = makeQuoted (argExpansion.value || argExpansion.text)
                    break

                    // alt
                  case 'alt':
                    expansion.text = makeAlternation (argExpansion.value || argExpansion.text)
                    break

                    // charclass
                  case 'charclass':
                    var range = arg.split('\\-').map (function (c) {
                      return c.replace(/(.)\-(.)/g,function(_m,l,r){
                        var cl = l.charCodeAt(0), cr = r.charCodeAt(0)
                        return [].concat.apply ([], new Array(cr+1-cl)).map (function(_c,n) {
                          return String.fromCharCode (cl + n)
                        }).join('')
                      })
                    }).join('-')
                      .split('')
                      .map (function (c) { return [c] })
                    expansion.text = pt.makeRhsText ([{ type: 'alt',
                                                        opts: range }],
                                                     makeSymbolName)
                    break
                    
                    // strlen, length, reverse, revstr
                  case 'strlen':
                    expansion.text = '' + argExpansion.text.length
                    break

                  case 'length':
                    expansion.text = '' + makeArray (argExpansion.value).length
                    break

                  case 'revstr':
                    expansion.text = argExpansion.text.split('').reverse().join('')
                    break

                  case 'reverse':
                    expansion.value = makeArray (argExpansion.value).reverse()
                    expansion.text = makeString (expansion.value)
                    break

                    // shuffle
                  case 'shuffle':
                    expansion.value = shuffleArray (makeArray (argExpansion.value), rngSaver)
                    expansion.text = makeString (expansion.value)
                    break

                    // bump (pseudo-rotate)
                  case 'bump':
                    expansion.value = pseudoRotateArray (makeArray (argExpansion.value), rngSaver)
                    expansion.text = makeString (expansion.value)
                    break

                    // value, unquote, math: identity functions
                  case 'value':
                  case 'unquote':
                  case 'math':
                    expansion.value = argExpansion.value
                    expansion.text = arg
                    break

                    // not
                  case 'not':
                    expansion.text = isTruthy (arg) ? falseVal : trueVal
                    break

                    // list functions
                  case 'islist':
                    expansion.text = isArray(argExpansion.value) ? JSON.stringify(argExpansion.value) : ''
                    break

                  case 'first':
                    expansion.text = makeString (makeArray (argExpansion.value)[0] || '')
                    break

                  case 'last':
                    var a = makeArray (argExpansion.value)
                    expansion.text = makeString (a[a.length-1] || '')
                    break

                  case 'notfirst':
                    var a = makeArray(argExpansion.value)
                    a.shift()
                    expansion.value = a
                    expansion.text = makeString(a)
                    break

                  case 'notlast':
                    var a = makeArray(argExpansion.value)
                    a.pop()
                    expansion.value = a
                    expansion.text = makeString(a)
                    break

                  case 'iota':
                    var n = toNumber(argExpansion.text)
                    expansion.value = new Array(n).fill(0).map (function (_item, i) { return i.toString() })
                    expansion.text = makeString(expansion.value)
                    break

                  case 'sample':
                    var weights = makeArray (argExpansion.value).map (toNumber)
                    var totalWeight = weights.reduce (function (total, w) { return total + w }, 0)
                    var w = totalWeight * rngSaver(), i = 0
                    while (i + 1 < weights.length && (w -= weights[i]) > 0)
                      ++i;
                    expansion.text = i.toString()
                    break

                    // basic text functions
                  case 'cap':
                    expansion.text = capitalize (arg)
                    break
                  case 'uc':
                    expansion.text = arg.toUpperCase()
                    break
                  case 'lc':
                    expansion.text = arg.toLowerCase()
                    break
                  case 'plural':
                    expansion.text = pluralForm(arg)
                    break
                  case 'a':
                    expansion.text = indefiniteArticle (arg)
                    break

                    // nlp: nouns
                  case 'nlp_plural':  // alternative to built-in plural
                    expansion.text = nlp(arg).nouns(0).toPlural().text()
                    break
                  case 'singular':
                    expansion.text = nlp(arg).nouns(0).toSingular().text()
                    break
                  case 'topic':
                    var nlpArg = nlp(arg)
                    expansion.text = nlpArg.topics(0).text() || nlpArg.nouns(0).text()
                    break
                  case 'person':
                    var nlpArg = nlp(arg)
                    expansion.text = nlp(arg).people(0).text() || nlpArg.nouns(0).text()
                    break
                  case 'place':
                    var nlpArg = nlp(arg)
                    expansion.text = nlp(arg).places(0).text() || nlpArg.nouns(0).text()
                    break

                    // nlp: verbs
                  case 'past':
                    expansion.text = nlp(arg).verbs(0).toPastTense().text()
                    break
                  case 'present':
                    expansion.text = nlp(arg).verbs(0).toPresentTense().text()
                    break
                  case 'future':
                    expansion.text = nlp(arg).verbs(0).toFutureTense().text()
                    break
                  case 'infinitive':
                    expansion.text = nlp(arg).verbs(0).toInfinitive().text()
                    break
                  case 'gerund':
                    expansion.text = nlp(arg).verbs(0).toGerund().text()
                    break
                  case 'adjective':
                    expansion.text = nlp(arg).verbs(0).asAdjective()[0] || ''
                    break
                  case 'negative':
                    expansion.text = nlp(arg).verbs(0).toNegative().text()
                    break
                  case 'positive':
                    expansion.text = nlp(arg).verbs(0).toPositive().text()
                    break

                    // nlp: numbers
                  case 'random':
                    expansion.text = (rngSaver() * toNumber(arg)) + ''
                    break

                  case 'floor':
                    expansion.text = Math.floor (toNumber(arg)) + ''
                    break

                  case 'ceil':
                    expansion.text = Math.ceil (toNumber(arg)) + ''
                    break

                  case 'round':
                    expansion.text = Math.round (toNumber(arg)) + ''
                    break

                  case 'abs':
                    expansion.text = Math.abs (toNumber(arg))
                    break

                  case 'percent':
                    expansion.text = Math.round (100 * toNumber(arg)) + '%'
                    break

                  case 'wordnum':
                    expansion.text = nlp(arg).values().toText().out()
                    break

                  case 'dignum':
                    expansion.text = nlp(arg).values().toNumber().out()
                    break

                  case 'ordinal':
                    expansion.text = nlp(arg).values().toOrdinal().out()
                    break

                  case 'cardinal':
                    expansion.text = nlp(arg).values().toCardinal().out()
                    break

                    // comment
                  case 'comment':
                    break
                    
                    // default
                  default:
                    expansion.text = arg
                    break
                  }
                }).then (function() {
                  return expansion
                })
            }
            break
          case 'sym':
            var symbolExpansionPromise
            var expr = symChar + (node.name || node.id)
            var method = node.method || 'expand'
            if (!node.rhs && config[method])
              symbolExpansionPromise = handlerPromise ([node, varVal, depth], resolve(), config.before, method)
              .then (function() {
                return (node.bind
                        ? (makeRhsExpansionPromiseFor (node.bind)
                           .then (function (bindExpansion) {
                             expansion.nodes += bindExpansion.nodes
                             return makeArray (bindExpansion.value || bindExpansion.text)
                           }))
                        : resolve([]))
                  .then (function (args) {
                    return makeAssignmentPromise
                      .call (pt,
                             extend ({}, config, { vars: varVal }),
                             args.map (function (arg, n) { return [makeGroupVarName (n + 1), null, arg] })
                             .concat ([[makeGroupVarName(0),
                                        [{ type: 'func',
                                           funcname: 'list',
                                           args: args.map (function (_arg, n) { return { type: 'lookup', varname: makeGroupVarName (n + 1) } }) }]]]),
                             function (localConfig) {
                               // these callbacks should return rhs's, i.e. arrays
                               // config.expand should return the sampled tree, calling sampleParseTree() if necessary
                               // config.get should return a single-element list
                               // config.set should return an empty list
                               return config[method] (extend ({},
                                                              localConfig,
                                                              { node: node }))
                             })
                      .then (function (rhs) {
                        return (node.bind
                                ? args.reduce (function (result, arg, n) {
                                  return [{ type: 'assign',
                                            varname: makeGroupVarName (n + 1),
                                            value: [arg],
                                            local: result }]
                                }, [{ type: 'assign',
                                      varname: makeGroupVarName (0),
                                      value: args,
                                      local: rhs }])
                                : rhs)
                      })
                  })
              }).then (function (rhs) {
                node.rhs = rhs
                return handlerPromise ([node, varVal, depth, rhs], resolve(), config.after, method)
              })
            else
              symbolExpansionPromise = resolve()
            promise = symbolExpansionPromise.then (function() {
              return makeRhsExpansionPromiseFor (node.rhs || [], expr)
                .then (addExpansionNodes)
            })
            break
          case 'root':
          case 'alt_sampled':
            promise = makeRhsExpansionPromiseFor (node.rhs || [])
              .then (addExpansionNodes)
            break
          case 'rep_sampled':
            promise = makeRhsExpansionPromiseFor ((node.reps || []).reduce (function (all, rep) { return all.concat(rep) }, []))
              .then (addExpansionNodes)
            break
          default:
            break
          }
        }
      }
      return promise
    }).then (function (expansion) {
      // clean up vars
      Object.keys(expansion.vars).forEach (function (name) {
	if (!expansion.vars[name])
	  delete expansion.vars[name]
      })
      // call post-expansion handler
      return handlerPromise ([node, varVal, depth, expansion], resolve(), config.after, 'all', node.type)
        .then (function() { return extend (expansion, { tree: node }) })
    })
}

function makeRhsExpansionText (config) {
  return this.makeRhsExpansionSync (config).text
}

function makeExpansionText (config) {
  return this.makeExpansionSync (config).text
}

function finalVarVal (config) {
  var node = config.node, initVarVal = config.initVarVal
  var varVal = {}
  if (initVarVal)
    extend (varVal, initVarVal)
  this.makeExpansionText ({ node: node,
                            vars: varVal,
                            DEBUG_vars: varVal,  // DEBUG
			    makeSymbolName: config.makeSymbolName })
  return varVal
}

function makeParseTree (rhs) {
  return rhs.reduce (function (tree, node) {
    if (typeof(node) === 'string')
      tree.push (node)
    else if (isTraceryExpr (node))
      tree.push ([traceryChar + traceryVarName(node) + traceryChar].concat (makeParseTree (node.value ? node.result[0].value : node.result[0].rhs)))
    else if (node.type === 'func' && node.funcname === 'eval' && node.args.length === 1 && node.args[0].type === 'lookup')
      tree.push ([funcChar + varChar + node.args[0].varname].concat (makeParseTree (node.value)))
    else if (node.type === 'sym')
      tree.push ([(node.method === 'get' ? (funcChar + 'xget') : '') + symChar + node.name].concat (makeParseTree (node.rhs)))
    else if (node.type === 'lookup')
      tree.push ([varChar + node.varname, makeString (node.value)])
    else if (node.type === 'alt_sampled')
      tree.push ([pipeChar].concat (makeParseTree (node.rhs)))
    else if (typeof(node) === 'string')
      tree.push (node)
    else if (node.expansion && node.expansion.text)
      tree.push (node.expansion.text)
    else
      console.error ("Can't handle node in makeParseTree", node)
    return tree
  }, [])
}

// English grammar helper functions

// Verb conjugation
// person can be 's1', 's2', 's3', 'p1', 'p2', 'p3'
//  for singular/plural and 1st/2nd/3rd person
// gender can be 'm' (Male), 'f' (Female), 'n' (Neuter), 'i' (Inanimate)
//  if 'n', will use 'They' form; if 'i' (or blank), will use 'It' form
var representativePronoun = { s1: 'i', s2: 'you', s3n: 'they', s3: 'it', p1: 'we', p2: 'you', p3: 'they' }
function makeRepresentativePronoun (person, gender) {
  return representativePronoun[person + (gender || '')] || representativePronoun[person]
}

function conjugate (infinitive, person, gender) {
  var form
  var rp = makeRepresentativePronoun (person, gender)
  switch (infinitive) {
  case 'have': form = (rp === 'it') ? 'has' : 'have'; break
  case 'be': form = (rp === 'i') ? 'am' : (rp === 'it' ? 'is' : 'are'); break
  case 'do': form = (rp === 'it') ? 'does' : 'do'; break
  case 'go': form = (rp === 'it') ? 'goes' : 'go'; break
  default: form = (rp === 'it') ? infinitive.replace (/.\b/i, function(c){return c + (c === 's' ? 'es' : 's')}) : infinitive; break
  }
  return form
}

function was (person, gender) {
  var rp = makeRepresentativePronoun (person, gender)
  return (rp === 'i' || rp === 'it') ? 'was' : 'were'
}

var irregularPastParticiple = { arise: "arisen", babysit: "babysat", be: "been", beat: "beaten", become: "become", bend: "bent", begin: "begun", bet: "bet", bind: "bound", bite: "bitten", bleed: "bled", blow: "blown", break: "broken", breed: "bred", bring: "brought", broadcast: "broadcast", build: "built", buy: "bought", catch: "caught", choose: "chosen", come: "come", cost: "cost", cut: "cut", deal: "dealt", dig: "dug", do: "done", draw: "drawn", drink: "drunk", drive: "driven", eat: "eaten", fall: "fallen", feed: "fed", feel: "felt", fight: "fought", find: "found", fly: "flown", forbid: "forbidden", forget: "forgotten", forgive: "forgiven", freeze: "frozen", get: "gotten", give: "given", go: "gone", grow: "grown", hang: "hung", have: "had", hear: "heard", hide: "hidden", hit: "hit", hold: "held", hurt: "hurt", keep: "kept", know: "known", lay: "laid", lead: "led", leave: "left", lend: "lent", let: "let", lie: "lain", light: "lit", lose: "lost", make: "made", mean: "meant", meet: "met", pay: "paid", put: "put", quit: "quit", read: "read", ride: "ridden", ring: "rung", rise: "risen", run: "run", say: "said", see: "seen", sell: "sold", send: "sent", set: "set", shake: "shaken", shine: "shone", shoot: "shot", show: "shown", shut: "shut", sing: "sung", sink: "sunk", sit: "sat", sleep: "slept", slide: "slid", speak: "spoken", spend: "spent", spin: "spun", spread: "spread", stand: "stood", steal: "stolen", stick: "stuck", sting: "stung", strike: "struck", swear: "sworn", sweep: "swept", swim: "swum", swing: "swung", take: "taken", teach: "taught", tear: "torn", tell: "told", think: "thought", throw: "thrown", understand: "understood", wake: "woken", wear: "worn", win: "won", withdraw: "withdrawn", write: "written" }
function pastParticiple (infinitive) {
  return irregularPastParticiple[infinitive] || infinitive.replace (/.\b/i, function(c){return c + (c === 'e' ? 'd' : 'ed')})
}

var irregularPastSimple = { arise: "arose", babysit: "babysat", be: "was", beat: "beat", become: "became", bend: "bent", begin: "began", bet: "bet", bind: "bound", bite: "bit", bleed: "bled", blow: "blew", break: "broke", breed: "bred", bring: "brought", broadcast: "broadcast", build: "built", buy: "bought", catch: "caught", choose: "chose", come: "came", cost: "cost", cut: "cut", deal: "dealt", dig: "dug", do: "did", draw: "drew", drink: "drank", drive: "drove", eat: "ate", fall: "fell", feed: "fed", feel: "felt", fight: "fought", find: "found", fly: "flew", forbid: "forbade", forget: "forgot", forgive: "forgave", freeze: "froze", get: "got", give: "gave", go: "went", grow: "grew", hang: "hung", have: "had", hear: "heard", hide: "hid", hit: "hit", hold: "held", hurt: "hurt", keep: "kept", know: "knew", lay: "laid", lead: "led", leave: "left", lend: "lent", let: "let", lie: "lay", light: "lit", lose: "lost", make: "made", mean: "meant", meet: "met", pay: "paid", put: "put", quit: "quit", read: "read", ride: "rode", ring: "rang", rise: "rose", run: "ran", say: "said", see: "saw", sell: "sold", send: "sent", set: "set", shake: "shook", shine: "shone", shoot: "shot", show: "showed", shut: "shut", sing: "sang", sink: "sank", sit: "sat", sleep: "slept", slide: "slid", speak: "spoke", spend: "spent", spin: "spun", spread: "spread", stand: "stood", steal: "stole", stick: "stuck", sting: "stung", strike: "struck", swear: "swore", sweep: "swept", swim: "swam", swing: "swung", take: "took", teach: "taught", tear: "tore", tell: "told", think: "thought", throw: "threw", understand: "understood", wake: "woke", wear: "wore", win: "won", withdraw: "withdrew", write: "wrote" }
function pastSimple (infinitive) {
  return irregularPastParticiple[infinitive] || infinitive.replace (/.\b/i, function(c){return c + (c === 'e' ? 'd' : 'ed')})
}

// Pronouns
var genderedNominative = { s1: 'i', s2: 'you', s3m: 'he', s3f: 'she', s3n: 'they', s3i: 'it', p1: 'we', p2: 'you', p3: 'they' },
    genderedOblique = { s1: 'me', s2: 'you', s3m: 'him', s3f: 'her', s3n: 'them', s3i: 'it', p1: 'us', p2: 'you', p3: 'them' },
    genderedPossessiveDeterminer = { s1: 'my', s2: 'your', s3m: 'his', s3f: 'her', s3n: 'their', s3i: 'its', p1: 'our', p2: 'your', p3: 'their' },
    genderedPossessivePronoun = { s1: 'mine', s2: 'yours', s3m: 'his', s3f: 'hers', s3n: 'theirs', s3i: 'its', p1: 'ours', p2: 'yours', p3: 'theirs' },
    genderedReflexive = { s1: 'myself', s2: 'yourself', s3m: 'himself', s3f: 'herself', s3n: 'themself', s3i: 'itself', p1: 'ourselves', p2: 'yourselves', p3: 'themselves' }

function getPronoun (table, person, gender) { return table[person + (gender || 'n')] || table[person] }

function nominative (person, gender) { return getPronoun (genderedNominative, person, gender) }
function oblique (person, gender) { return getPronoun (genderedOblique, person, gender) }
function possessiveDeterminer (person, gender) { return getPronoun (genderedPossessiveDeterminer, person, gender) }
function possessivePronoun (person, gender) { return getPronoun (genderedPossessivePronoun, person, gender) }
function reflexive (person, gender) { return getPronoun (genderedReflexive, person, gender) }

var possessivePronoun = { i: 'my', you: 'your', he: 'his', she: 'her', they: 'their', it: 'its', we: 'our' }
function possessiveApostrophe(noun) {
  var lc = noun.toLowerCase()
  return possessivePronoun[lc] ? possessivePronoun[lc] : (noun + (looksLikePlural(noun) ? "'" : "'s"))
}

// Articles
function indefiniteArticle (nounPhrase) {
  var article = nounPhrase.match(/^[^A-Za-z]*[aeiou]/i) ? 'an' : 'a'
  return article + ' ' + nounPhrase
}

// Misc.
function looksLikePlural(noun) {
  return noun.match(/[b-hj-np-rtv-z][s]$/i)
}

function lessOrFewer(noun) {
  return (looksLikePlural(noun) ? 'fewer' : 'less') + ' ' + noun
}

function guessPerson(noun) {
  return looksLikePlural(noun) ? 'p3' : 's3'
}

function nPlurals(num,singular) {
  if (num === 1)
    return '1 ' + singular
  return num + ' ' + this.pluralForm (singular)
}

// this list needs beefing up...
var irregularPlural = {
  addendum: 'addenda', alga: 'algae', alumnus: 'alumni', amoeba: 'amoebae', antenna: 'antennae', bacterium: 'bacteria', cactus: 'cacti', curriculum: 'curricula', datum: 'data', fungus: 'fungi', genus: 'genera', larva: 'larvae', memorandum: 'memoranda', stimulus: 'stimuli', syllabus: 'syllabi', vertebra: 'vertebrae',
  echo: 'echoes', embargo: 'embargoes', hero: 'heroes', potato: 'potatoes', tomato: 'tomatoes', torpedo: 'torpedoes', veto: 'vetoes', volcano: 'volcanoes',
  child: 'children', dormouse: 'dormice', foot: 'feet', goose: 'geese', louse: 'lice', man: 'men', mouse: 'mice', ox: 'oxen', tooth: 'teeth', woman: 'women',
  axis: 'axes', analysis: 'analyses', basis: 'bases', crisis: 'crises', diagnosis: 'diagnoses', ellipsis: 'ellipses', emphasis: 'emphases', hypothesis: 'hypotheses', neurosis: 'neuroses', oasis: 'oases', paralysis: 'paralyses', parenthesis: 'parentheses', thesis: 'theses',
  appendix: 'appendices', index: 'indices', matrix: 'matrices',
  barracks: 'barracks', deer: 'deer', fish: 'fish', gallows: 'gallows', means: 'means', offspring: 'offspring', series: 'series', sheep: 'sheep', species: 'species'
}

function pluralForm (singular) {
  var wm = this
  var match
  if ((match = singular.match(/^([\s\S]*)\b(\w+)(\s*)$/)) && irregularPlural[match[2]])
    return match[1] + matchCase (match[2], irregularPlural[match[2]]) + match[3]
  else if (singular.match(/(ch|sh|s|x|z)\s*$/i))
    return singular.replace(/(ch|sh|s|x|z)(\s*)$/i, function (match, ending, spacer) { return ending + matchCase(ending,'es') + spacer })
  else if (singular.match(/[aeiou]y\s*$/i))
    return singular.replace (/(y)(\s*)$/i, function (match, y, spacer) { return matchCase(y,'ys') + spacer })
  else if (singular.match(/y\s*$/i))
    return singular.replace (/(y)(\s*)$/i, function (match, y, spacer) { return matchCase(y,'ies') + spacer })
  else if (singular.match(/fe?\s*$/i))
    return singular.replace (/(fe?)(\s*)$/i, function (match, fe, spacer) { return matchCase(fe,'ves') + spacer })
  else if (singular.match(/o\s*$/i))
    return singular.replace (/(o)(\s*)$/i, function (match, o, spacer) { return matchCase(o,'os') + spacer })
  else if (singular.match(/[a-zA-Z]\s*$/i))
    return singular.replace (/([a-zA-Z])(\s*)$/i, function (match, c, spacer) { return c + matchCase(c,'s') + spacer })
  return singular
}

function matchCase (model, text) {
  return model.match(/[A-Z]/) ? text.toUpperCase() : text
}

// from http://stackoverflow.com/a/8843915
function countSyllables(word) {
  word = word.toLowerCase()
  if (word.length <= 3) return 1
  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/i, '')
  word = word.replace(/^y/i, '')
  return word.match(/[aeiouy]{1,2}/gi).length
}

var irregularComparative = { good: 'better', well: 'better', bad: 'worse', far: 'farther', little: 'less', many: 'more' }
function makeComparativeAdjective(adj) {
  if (adj.match(/^[a-z]+\b./i)) return 'more ' + adj  // hyphenated or multiple words
  var lc = adj.toLowerCase()
  if (irregularComparative[lc]) return irregularComparative[lc]
  switch (countSyllables(adj)) {
  case 1: return (adj.match(/e$/) ? (adj+'r') : (adj.match(/ed$/) ? ('more '+adj) : (adj+((adj.match(/[b-df-hj-np-tv-z][aeiou][b-df-hj-np-tv-z]$/) ? adj.charAt(adj.length-1) : '') + 'er'))))
  case 2: return adj.match(/y$/) ? adj.replace(/y$/,'ier') : (adj.match(/le$/) ? (adj+'r') : (adj.match(/(er|ow)$/) ? (adj+'er') : ('more '+adj)))
  default: return 'more '+adj
  }
}

// Adjective -> Adverb
var adj2adv = { 'public': 'publicly' }
var adjectivesWithSameAdverb = ['early','fast','hard','high','late','near','straight','wrong','well']
adjectivesWithSameAdverb.forEach (function (adj) { adj2adv[adj] = adj })
function makeAdverb (adjective) {
  if (adj2adv[adjective]) return adj2adv[adjective]
  else if (adjective.match(/ic$/i)) return adjective + 'ally'
  else if (adjective.match(/le$/i)) return adjective.replace(/e$/i,'y')
  else if (adjective.match(/y$/i)) return adjective.replace(/y$/i,'ily')
  return adjective + 'ly'
}

function makeComparativeAdverb (adverb) {
  if (adj2adv[adverb] === adverb)
    return adverb + 'er'
  return 'more ' + adverb
}

// Capitalization of first letters in sentences
function capitalize (text) {
  return text
    .replace (/^([^A-Za-z]*)([a-z])/, function (m, g1, g2) { return g1 + g2.toUpperCase() })
    .replace (/([\.\!\?]\s*)([a-z])/g, function (m, g1, g2) { return g1 + g2.toUpperCase() })
}

// ordinal suffices http://stackoverflow.com/a/13627586
function ordinal(i) {
  var j = i % 10,
      k = i % 100;
  if (j == 1 && k != 11) {
    return i + "st";
  }
  if (j == 2 && k != 12) {
    return i + "nd";
  }
  if (j == 3 && k != 13) {
    return i + "rd";
  }
  return i + "th";
}

// Text to words
function textToWords (text) {
  return text.toLowerCase()
    .replace(/[^a-z\s]/g,'')  // these are the phoneme characters we keep
    .replace(/\s+/g,' ').replace(/^ /,'').replace(/ $/,'')  // collapse all runs of space & remove start/end space
    .split(' ');
}

// Externally exposed functions
module.exports = {
  // config
  maxDepth: 100,
  maxRecursion: 3,
  maxReps: 10,
  maxNodes: 1000,
  maxLength: 1000,

  enableParse: false,
  maxParseLength: undefined,
  maxSubsequenceLength: 100,

  // parsing
  RhsParser: RhsParser,
  parseRhs: parseRhs,
  parseTextDefs: parseTextDefs,
  makeRoot: makeRoot,

  // compromise
  nlp: nlp,
  
  // footers
  makeFooter: makeFooter,
  stripFooter: stripFooter,
  addFooter: addFooter,
  
  // parse tree constants
  symChar: symChar,
  varChar: varChar,
  funcChar: funcChar,
  leftBraceChar: leftBraceChar,
  rightBraceChar: rightBraceChar,
  leftSquareBraceChar: leftSquareBraceChar,
  rightSquareBraceChar: rightSquareBraceChar,
  pipeChar: pipeChar,
  assignChar: assignChar,
  traceryChar: traceryChar,
  defaultMapVar: defaultMapVar,
  
  // parse tree manipulations
  sampleParseTree: sampleParseTree,
  findNodes: findNodes,
  getSymbolNodes: getSymbolNodes,
  parseTreeEmpty: parseTreeEmpty,
  isPlainSymExpr: isPlainSymExpr,
  isTraceryExpr: isTraceryExpr,
  traceryVarName: traceryVarName,
  isProbExpr: isProbExpr,
  isQuoteAssignKeywordExpr: isQuoteAssignKeywordExpr,
  isQuoteAssignExpr: isQuoteAssignExpr,
  getQuoteAssignRhs: getQuoteAssignRhs,
  isTagExpr: isTagExpr,
  getTagExprRhs: getTagExprRhs,
  isMeterExpr: isMeterExpr,
  getMeterIcon: getMeterIcon,
  getMeterLevel: getMeterLevel,
  getMeterStatus: getMeterStatus,
  isLayoutExpr: isLayoutExpr,
  getLayoutCoord: getLayoutCoord,
  getLayoutContent: getLayoutContent,
  isLayoutAssign: isLayoutAssign,
  getLayoutExpr: getLayoutExpr,
  isLinkExpr: isLinkExpr,
  getLinkText: getLinkText,
  getLinkTargetRhs: getLinkTargetRhs,
  isLayoutLinkExpr: isLayoutLinkExpr,
  getLayoutLink: getLayoutLink,
  isPlaceholderExpr: isPlaceholderExpr,
  getPlaceholderNode: getPlaceholderNode,
  getPlaceholderCoord: getPlaceholderCoord,
  isEvalVar: isEvalVar,
  getEvalVar: getEvalVar,
  funcType: funcType,
  
  makeSugaredName: makeSugaredName,
  makeRhsText: makeRhsText,
  makeRhsTree: makeRhsTree,
  makeMathTree: makeMathTree,
  makeExpansionText: makeExpansionText,
  makeRhsExpansionText: makeRhsExpansionText,

  makeExpansionPromise: makeExpansionPromise,
  makeRhsExpansionPromise: makeRhsExpansionPromise,
  makeExpansionSync: makeExpansionSync,
  makeRhsExpansionSync: makeRhsExpansionSync,

  summarize: summarize,
  summarizeRhs: summarizeRhs,
  summarizeExpansion: summarizeExpansion,
  finalVarVal: finalVarVal,

  isTruthy: isTruthy,
  makeString: makeString,
  makeArray: makeArray,
  makeQuoted: makeQuoted,
  escapeString: escapeString,
  toNumber: toNumber,
  
  // English grammar
  conjugate: conjugate,
  was: was,
  pastParticiple: pastParticiple,
  pastSimple: pastSimple,
  possessiveApostrophe: possessiveApostrophe,
  indefiniteArticle: indefiniteArticle,
  lessOrFewer: lessOrFewer,
  makeComparativeAdjective: makeComparativeAdjective,
  makeComparativeAdverb: makeComparativeAdverb,
  makeAdverb: makeAdverb,
  capitalize: capitalize,
  countSyllables: countSyllables,
  pluralForm: pluralForm,
  textToWords: textToWords,
  // general numerics
  ordinal: ordinal,
  nPlurals: nPlurals,
  // general utility
  deepCopy: deepCopy,
  extend: extend,
  isArray: isArray,
  randomIndex: randomIndex,
  randomElement: randomElement,
  nRandomElements: nRandomElements,
  syncPromiseResolve: syncPromiseResolve
}

},{"./chomsky":2,"./rhs":4}],4:[function(require,module,exports){
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { RHS: peg$parseRHS },
      peg$startRuleFunction  = peg$parseRHS,

      peg$c0 = "\\n",
      peg$c1 = peg$literalExpectation("\\n", false),
      peg$c2 = function() { return "\n" },
      peg$c3 = "\\t",
      peg$c4 = peg$literalExpectation("\\t", false),
      peg$c5 = function() { return "\t" },
      peg$c6 = "\\",
      peg$c7 = peg$literalExpectation("\\", false),
      peg$c8 = peg$anyExpectation(),
      peg$c9 = function(escaped) { return escaped },
      peg$c10 = function(args) { return wrapNodes (args) },
      peg$c11 = /^[@~#&$+\-]/,
      peg$c12 = peg$classExpectation(["@", "~", "#", "&", "$", "+", "-"], false, false),
      peg$c13 = function(char) { return char },
      peg$c14 = function(nl) { return addLocation(nl) },
      peg$c15 = "&,",
      peg$c16 = peg$literalExpectation("&,", false),
      peg$c17 = function(tail) { return concatNodes (makeValue([]), tail) },
      peg$c18 = function(head, tail) { return concatNodes (makeValue([head]), tail.length ? tail : [makeValue([])]) },
      peg$c19 = function(head, tail) { return concatNodes (head, tail) },
      peg$c20 = function(head) { return [head] },
      peg$c21 = "",
      peg$c22 = function() { return [] },
      peg$c23 = "&let",
      peg$c24 = peg$literalExpectation("&let", false),
      peg$c25 = function(assigns, scope) { return makeLocalAssignChain (assigns, scope) },
      peg$c26 = "#",
      peg$c27 = peg$literalExpectation("#", false),
      peg$c28 = function(assigns, sym, mods) { return makeLocalAssignChain (assigns, [makeTraceryExpr (sym, mods)]) },
      peg$c29 = "&rep",
      peg$c30 = peg$literalExpectation("&rep", false),
      peg$c31 = "{",
      peg$c32 = peg$literalExpectation("{", false),
      peg$c33 = ",",
      peg$c34 = peg$literalExpectation(",", false),
      peg$c35 = "}",
      peg$c36 = peg$literalExpectation("}", false),
      peg$c37 = function(unit, min, max) { return validRange (min, max) ? makeRep (unit, min, max) : text() },
      peg$c38 = function(unit, min) { return makeRep (unit, min, min) },
      peg$c39 = "&if",
      peg$c40 = peg$literalExpectation("&if", false),
      peg$c41 = "then",
      peg$c42 = peg$literalExpectation("then", false),
      peg$c43 = "else",
      peg$c44 = peg$literalExpectation("else", false),
      peg$c45 = function(testArg, trueArg, falseArg) { return makeConditional (testArg, trueArg, falseArg) },
      peg$c46 = function(testArg, trueArg) { return makeConditional (testArg, trueArg, []) },
      peg$c47 = "&prob",
      peg$c48 = peg$literalExpectation("&prob", false),
      peg$c49 = function(probArg, trueArg, falseArg) { return makeProbExpr (probArg, trueArg, falseArg) },
      peg$c50 = function(sym, args) { return makeSugaredSymbol (sym, makeArgList (args)) },
      peg$c51 = function(sym, args) { return makeSugaredSymbol (sym, args) },
      peg$c52 = function(sym, mods) { return makeTraceryExpr (sym, mods) },
      peg$c53 = function(sym) { return makeGetSymbol (sym) },
      peg$c54 = function(sym, args) { return makeSetSymbol (sym, args) },
      peg$c55 = function(sym) { return makeSugaredSymbol (sym, makeArgList ([])) },
      peg$c56 = "&xcall",
      peg$c57 = peg$literalExpectation("&xcall", false),
      peg$c58 = function(sym) { return sym },
      peg$c59 = "&",
      peg$c60 = peg$literalExpectation("&", false),
      peg$c61 = "&xapply",
      peg$c62 = peg$literalExpectation("&xapply", false),
      peg$c63 = "&xget",
      peg$c64 = peg$literalExpectation("&xget", false),
      peg$c65 = "&xset",
      peg$c66 = peg$literalExpectation("&xset", false),
      peg$c67 = "~",
      peg$c68 = peg$literalExpectation("~", false),
      peg$c69 = "~{",
      peg$c70 = peg$literalExpectation("~{", false),
      peg$c71 = function(mod, mods) { return [mod].concat (mods) },
      peg$c72 = ".capitalizeAll",
      peg$c73 = peg$literalExpectation(".capitalizeAll", false),
      peg$c74 = function() { return "uc" },
      peg$c75 = ".capitalize",
      peg$c76 = peg$literalExpectation(".capitalize", false),
      peg$c77 = function() { return "cap" },
      peg$c78 = ".a",
      peg$c79 = peg$literalExpectation(".a", false),
      peg$c80 = function() { return "a" },
      peg$c81 = ".ed",
      peg$c82 = peg$literalExpectation(".ed", false),
      peg$c83 = function() { return "past" },
      peg$c84 = ".s",
      peg$c85 = peg$literalExpectation(".s", false),
      peg$c86 = function() { return "plural" },
      peg$c87 = function(name, varname, list, func) { return makeListFunction (name, varname, list, func) },
      peg$c88 = function(name, list, func) { return makeListFunction (name, defaultListVarName, list, func) },
      peg$c89 = function(name, list) { return makeListFunction (name, defaultListVarName, list, [makeQuote ([makeLookup (defaultListVarName)])]) },
      peg$c90 = "&reduce",
      peg$c91 = peg$literalExpectation("&reduce", false),
      peg$c92 = "=",
      peg$c93 = peg$literalExpectation("=", false),
      peg$c94 = function(varname, list, result, init, func) { return makeReduceFunction (varname, list, result, init, func) },
      peg$c95 = "map",
      peg$c96 = peg$literalExpectation("map", false),
      peg$c97 = "for",
      peg$c98 = peg$literalExpectation("for", false),
      peg$c99 = "filter",
      peg$c100 = peg$literalExpectation("filter", false),
      peg$c101 = "numsort",
      peg$c102 = peg$literalExpectation("numsort", false),
      peg$c103 = "lexsort",
      peg$c104 = peg$literalExpectation("lexsort", false),
      peg$c105 = ":",
      peg$c106 = peg$literalExpectation(":", false),
      peg$c107 = function(name) { return name },
      peg$c108 = function(name, pattern, text, expr) { return makeRegexFunction (name, pattern, text, expr) },
      peg$c109 = function(name, pattern, text) { return makeRegexFunction (name, pattern, text) },
      peg$c110 = "&split",
      peg$c111 = peg$literalExpectation("&split", false),
      peg$c112 = function(text) { return makeRegexFunction ('split', { body: [defaultSplitPattern], flags: [] }, text) },
      peg$c113 = "match",
      peg$c114 = peg$literalExpectation("match", false),
      peg$c115 = "replace",
      peg$c116 = peg$literalExpectation("replace", false),
      peg$c117 = "grep",
      peg$c118 = peg$literalExpectation("grep", false),
      peg$c119 = "split",
      peg$c120 = peg$literalExpectation("split", false),
      peg$c121 = "&unquote",
      peg$c122 = peg$literalExpectation("&unquote", false),
      peg$c123 = function(args) { return makeFunction ('unquote', args) },
      peg$c124 = "&call",
      peg$c125 = peg$literalExpectation("&call", false),
      peg$c126 = function(expr, args) { return makeFunction ('call', [wrapNodes (expr), makeFunction ('list', args.map (wrapNodes))]) },
      peg$c127 = function(lookup, args) { return makeFunction ('call', [lookup, makeFunction ('list', args.map (wrapNodes))]) },
      peg$c128 = "&function",
      peg$c129 = peg$literalExpectation("&function", false),
      peg$c130 = function(args, expr) { return makeDefineFunction (args, expr) },
      peg$c131 = "&function{}",
      peg$c132 = peg$literalExpectation("&function{}", false),
      peg$c133 = function(expr) { return makeDefineFunction ([], expr) },
      peg$c134 = function(head, tail) { return [head].concat (tail) },
      peg$c135 = function(func, left, right) { return makeFunction (func, [wrapNodes (left), wrapNodes (right)]) },
      peg$c136 = "&join",
      peg$c137 = peg$literalExpectation("&join", false),
      peg$c138 = function(left) { return makeFunction ('join', [wrapNodes (left), defaultJoinText]) },
      peg$c139 = function(func, args) { return makeFunction (func, args) },
      peg$c140 = "&rotate",
      peg$c141 = peg$literalExpectation("&rotate", false),
      peg$c142 = function(arg) { return makeRotate (arg) },
      peg$c143 = function(func) { return makeFunction (func, []) },
      peg$c144 = function(func, v, right) { return makeFunction (func, [wrapNodes (v), wrapNodes (right)]) },
      peg$c145 = function(func, right) { return makeFunction (func, [makeStrictQuote ([makeLookup (defaultListVarName)]), wrapNodes (right)]) },
      peg$c146 = function(func, v) { return makeFunction (func, v) },
      peg$c147 = function(func) { return makeFunction (func, [makeStrictQuote ([makeLookup (defaultListVarName)])] ) },
      peg$c148 = "++",
      peg$c149 = peg$literalExpectation("++", false),
      peg$c150 = function(v) { return wrapNodes ([makeFunction ('inc', v)].concat (v[0].args)) },
      peg$c151 = "--",
      peg$c152 = peg$literalExpectation("--", false),
      peg$c153 = function(v) { return wrapNodes ([makeFunction ('dec', v)].concat (v[0].args)) },
      peg$c154 = function(v) { return wrapNodes (v[0].args.concat ([makeFunction ('inc', v)])) },
      peg$c155 = function(v) { return wrapNodes (v[0].args.concat ([makeFunction ('dec', v)])) },
      peg$c156 = "&meter",
      peg$c157 = peg$literalExpectation("&meter", false),
      peg$c158 = function(icon, expr, status) { return makeMeter (icon, expr, status) },
      peg$c159 = function(icon, expr) { return makeMeter (icon, expr) },
      peg$c160 = "&cycle",
      peg$c161 = peg$literalExpectation("&cycle", false),
      peg$c162 = function(v, list) { return makeCycle (v, list, false) },
      peg$c163 = "&playlist",
      peg$c164 = peg$literalExpectation("&playlist", false),
      peg$c165 = function(v, list) { return makeCycle (v, list, true) },
      peg$c166 = "&queue",
      peg$c167 = peg$literalExpectation("&queue", false),
      peg$c168 = function(v, list) { return makeQueue (v, list) },
      peg$c169 = "&imp{",
      peg$c170 = peg$literalExpectation("&imp{", false),
      peg$c171 = "}{",
      peg$c172 = peg$literalExpectation("}{", false),
      peg$c173 = function(num, expr, template) { return makeImportanceSampler (num, expr, template) },
      peg$c174 = "&preserve",
      peg$c175 = peg$literalExpectation("&preserve", false),
      peg$c176 = function(arg) { return makePreserve (arg) },
      peg$c177 = "&rhyme{",
      peg$c178 = peg$literalExpectation("&rhyme{", false),
      peg$c179 = function(num, a, b) { return makeRhyme (a, b, num) },
      peg$c180 = "&rhyme",
      peg$c181 = peg$literalExpectation("&rhyme", false),
      peg$c182 = function(a, b) { return makeRhyme (a, b) },
      peg$c183 = "&math{",
      peg$c184 = peg$literalExpectation("&math{", false),
      peg$c185 = function(math) { return makeFunction ('math', [math]) },
      peg$c186 = "&math{}",
      peg$c187 = peg$literalExpectation("&math{}", false),
      peg$c188 = function() { return makeFunction ('math', []) },
      peg$c189 = "&link",
      peg$c190 = peg$literalExpectation("&link", false),
      peg$c191 = function(text, link) { return makeFunction ('link', [wrapNodes(text), pseudoQuote(link)]) },
      peg$c192 = "&link@",
      peg$c193 = peg$literalExpectation("&link@", false),
      peg$c194 = function(coord, text, link) { return makeLayoutNoQuote (coord, makeFunction ('link', [wrapNodes(text), pseudoQuote(link)])) },
      peg$c195 = "&reveal",
      peg$c196 = peg$literalExpectation("&reveal", false),
      peg$c197 = function(text, link) { return makeFunction ('reveal', [wrapNodes(text), wrapNodes(link)]) },
      peg$c198 = "[[",
      peg$c199 = peg$literalExpectation("[[", false),
      peg$c200 = "]]",
      peg$c201 = peg$literalExpectation("]]", false),
      peg$c202 = function(text) { return makeLinkShortcut (text) },
      peg$c203 = "[",
      peg$c204 = peg$literalExpectation("[", false),
      peg$c205 = "]@",
      peg$c206 = peg$literalExpectation("]@", false),
      peg$c207 = function(text, coord, link) { return makeLayoutNoQuote (coord, makeFunction ('link', [wrapNodes(text), pseudoQuote(link)])) },
      peg$c208 = "]",
      peg$c209 = peg$literalExpectation("]", false),
      peg$c210 = "&layout",
      peg$c211 = peg$literalExpectation("&layout", false),
      peg$c212 = function(coord, arg) { return makeLayoutNoQuote (coord, wrapNodes(arg)) },
      peg$c213 = "&placeholder",
      peg$c214 = peg$literalExpectation("&placeholder", false),
      peg$c215 = function(arg, coord) { return makePlaceholder (arg, coord) },
      peg$c216 = "@",
      peg$c217 = peg$literalExpectation("@", false),
      peg$c218 = function(coord, arg) { return makePlaceholder (arg, coord) },
      peg$c219 = function(r) { return addLocation(r) },
      peg$c220 = function(v) { return [v] },
      peg$c221 = function(s) { return [s] },
      peg$c222 = "{}",
      peg$c223 = peg$literalExpectation("{}", false),
      peg$c224 = ":START",
      peg$c225 = peg$literalExpectation(":START", false),
      peg$c226 = function(coord) { return coord },
      peg$c227 = function(x, comma, y) { return x + comma + y },
      peg$c228 = "&parse",
      peg$c229 = peg$literalExpectation("&parse", false),
      peg$c230 = function(grammar, text) { return makeFunction ('parse', [wrapNodes(grammar), wrapNodes(text)]) },
      peg$c231 = "&grammar",
      peg$c232 = peg$literalExpectation("&grammar", false),
      peg$c233 = function(grammar) { return makeFunction ('grammar', grammar) },
      peg$c234 = "&{",
      peg$c235 = peg$literalExpectation("&{", false),
      peg$c236 = function(args) { return makeFunction ('list', args) },
      peg$c237 = "&makelist",
      peg$c238 = peg$literalExpectation("&makelist", false),
      peg$c239 = function(args) { return makeFunction ('list', args.map (makeValue)) },
      peg$c240 = "&quotelist",
      peg$c241 = peg$literalExpectation("&quotelist", false),
      peg$c242 = function(args) { return makeFunction ('list', args.map (makeStrictQuote)) },
      peg$c243 = "add",
      peg$c244 = peg$literalExpectation("add", false),
      peg$c245 = "subtract",
      peg$c246 = peg$literalExpectation("subtract", false),
      peg$c247 = "multiply",
      peg$c248 = peg$literalExpectation("multiply", false),
      peg$c249 = "divide",
      peg$c250 = peg$literalExpectation("divide", false),
      peg$c251 = "pow",
      peg$c252 = peg$literalExpectation("pow", false),
      peg$c253 = "gt",
      peg$c254 = peg$literalExpectation("gt", false),
      peg$c255 = "geq",
      peg$c256 = peg$literalExpectation("geq", false),
      peg$c257 = "lt",
      peg$c258 = peg$literalExpectation("lt", false),
      peg$c259 = "leq",
      peg$c260 = peg$literalExpectation("leq", false),
      peg$c261 = "eq",
      peg$c262 = peg$literalExpectation("eq", false),
      peg$c263 = "neq",
      peg$c264 = peg$literalExpectation("neq", false),
      peg$c265 = "min",
      peg$c266 = peg$literalExpectation("min", false),
      peg$c267 = "max",
      peg$c268 = peg$literalExpectation("max", false),
      peg$c269 = "same",
      peg$c270 = peg$literalExpectation("same", false),
      peg$c271 = "and",
      peg$c272 = peg$literalExpectation("and", false),
      peg$c273 = "or",
      peg$c274 = peg$literalExpectation("or", false),
      peg$c275 = "cat",
      peg$c276 = peg$literalExpectation("cat", false),
      peg$c277 = "prepend",
      peg$c278 = peg$literalExpectation("prepend", false),
      peg$c279 = "append",
      peg$c280 = peg$literalExpectation("append", false),
      peg$c281 = "join",
      peg$c282 = peg$literalExpectation("join", false),
      peg$c283 = "nth",
      peg$c284 = peg$literalExpectation("nth", false),
      peg$c285 = "apply",
      peg$c286 = peg$literalExpectation("apply", false),
      peg$c287 = "xapply",
      peg$c288 = peg$literalExpectation("xapply", false),
      peg$c289 = "assonance",
      peg$c290 = peg$literalExpectation("assonance", false),
      peg$c291 = "eval",
      peg$c292 = peg$literalExpectation("eval", false),
      peg$c293 = "syntax",
      peg$c294 = peg$literalExpectation("syntax", false),
      peg$c295 = "tree",
      peg$c296 = peg$literalExpectation("tree", false),
      peg$c297 = "jparse",
      peg$c298 = peg$literalExpectation("jparse", false),
      peg$c299 = "escape",
      peg$c300 = peg$literalExpectation("escape", false),
      peg$c301 = "quotify",
      peg$c302 = peg$literalExpectation("quotify", false),
      peg$c303 = "random",
      peg$c304 = peg$literalExpectation("random", false),
      peg$c305 = "floor",
      peg$c306 = peg$literalExpectation("floor", false),
      peg$c307 = "ceil",
      peg$c308 = peg$literalExpectation("ceil", false),
      peg$c309 = "round",
      peg$c310 = peg$literalExpectation("round", false),
      peg$c311 = "abs",
      peg$c312 = peg$literalExpectation("abs", false),
      peg$c313 = "percent",
      peg$c314 = peg$literalExpectation("percent", false),
      peg$c315 = "wordnum",
      peg$c316 = peg$literalExpectation("wordnum", false),
      peg$c317 = "dignum",
      peg$c318 = peg$literalExpectation("dignum", false),
      peg$c319 = "ordinal",
      peg$c320 = peg$literalExpectation("ordinal", false),
      peg$c321 = "cardinal",
      peg$c322 = peg$literalExpectation("cardinal", false),
      peg$c323 = "plural",
      peg$c324 = peg$literalExpectation("plural", false),
      peg$c325 = "singular",
      peg$c326 = peg$literalExpectation("singular", false),
      peg$c327 = "nlp_plural",
      peg$c328 = peg$literalExpectation("nlp_plural", false),
      peg$c329 = "topic",
      peg$c330 = peg$literalExpectation("topic", false),
      peg$c331 = "person",
      peg$c332 = peg$literalExpectation("person", false),
      peg$c333 = "place",
      peg$c334 = peg$literalExpectation("place", false),
      peg$c335 = "past",
      peg$c336 = peg$literalExpectation("past", false),
      peg$c337 = "present",
      peg$c338 = peg$literalExpectation("present", false),
      peg$c339 = "future",
      peg$c340 = peg$literalExpectation("future", false),
      peg$c341 = "infinitive",
      peg$c342 = peg$literalExpectation("infinitive", false),
      peg$c343 = "json",
      peg$c344 = peg$literalExpectation("json", false),
      peg$c345 = "parsejson",
      peg$c346 = peg$literalExpectation("parsejson", false),
      peg$c347 = "list",
      peg$c348 = peg$literalExpectation("list", false),
      peg$c349 = "value",
      peg$c350 = peg$literalExpectation("value", false),
      peg$c351 = "islist",
      peg$c352 = peg$literalExpectation("islist", false),
      peg$c353 = "first",
      peg$c354 = peg$literalExpectation("first", false),
      peg$c355 = "last",
      peg$c356 = peg$literalExpectation("last", false),
      peg$c357 = "notfirst",
      peg$c358 = peg$literalExpectation("notfirst", false),
      peg$c359 = "notlast",
      peg$c360 = peg$literalExpectation("notlast", false),
      peg$c361 = "iota",
      peg$c362 = peg$literalExpectation("iota", false),
      peg$c363 = "sample",
      peg$c364 = peg$literalExpectation("sample", false),
      peg$c365 = "strlen",
      peg$c366 = peg$literalExpectation("strlen", false),
      peg$c367 = "length",
      peg$c368 = peg$literalExpectation("length", false),
      peg$c369 = "shuffle",
      peg$c370 = peg$literalExpectation("shuffle", false),
      peg$c371 = "bump",
      peg$c372 = peg$literalExpectation("bump", false),
      peg$c373 = "reverse",
      peg$c374 = peg$literalExpectation("reverse", false),
      peg$c375 = "revstr",
      peg$c376 = peg$literalExpectation("revstr", false),
      peg$c377 = "not",
      peg$c378 = peg$literalExpectation("not", false),
      peg$c379 = "comment",
      peg$c380 = peg$literalExpectation("comment", false),
      peg$c381 = "charclass",
      peg$c382 = peg$literalExpectation("charclass", false),
      peg$c383 = "alt",
      peg$c384 = peg$literalExpectation("alt", false),
      peg$c385 = "gerund",
      peg$c386 = peg$literalExpectation("gerund", false),
      peg$c387 = "adjective",
      peg$c388 = peg$literalExpectation("adjective", false),
      peg$c389 = "negative",
      peg$c390 = peg$literalExpectation("negative", false),
      peg$c391 = "positive",
      peg$c392 = peg$literalExpectation("positive", false),
      peg$c393 = "uc",
      peg$c394 = peg$literalExpectation("uc", false),
      peg$c395 = "lc",
      peg$c396 = peg$literalExpectation("lc", false),
      peg$c397 = "cap",
      peg$c398 = peg$literalExpectation("cap", false),
      peg$c399 = "a",
      peg$c400 = peg$literalExpectation("a", false),
      peg$c401 = "q",
      peg$c402 = peg$literalExpectation("q", false),
      peg$c403 = "vars",
      peg$c404 = peg$literalExpectation("vars", false),
      peg$c405 = "push",
      peg$c406 = peg$literalExpectation("push", false),
      peg$c407 = "unshift",
      peg$c408 = peg$literalExpectation("unshift", false),
      peg$c409 = "shift",
      peg$c410 = peg$literalExpectation("shift", false),
      peg$c411 = "pop",
      peg$c412 = peg$literalExpectation("pop", false),
      peg$c413 = "inc",
      peg$c414 = peg$literalExpectation("inc", false),
      peg$c415 = "dec",
      peg$c416 = peg$literalExpectation("dec", false),
      peg$c417 = "strictquote",
      peg$c418 = peg$literalExpectation("strictquote", false),
      peg$c419 = "'",
      peg$c420 = peg$literalExpectation("'", false),
      peg$c421 = function() { return 'strictquote' },
      peg$c422 = "quote",
      peg$c423 = peg$literalExpectation("quote", false),
      peg$c424 = "`",
      peg$c425 = peg$literalExpectation("`", false),
      peg$c426 = function() { return 'quote' },
      peg$c427 = "unquote",
      peg$c428 = peg$literalExpectation("unquote", false),
      peg$c429 = function() { return 'unquote' },
      peg$c430 = function(func) { return [makeQuote (func)] },
      peg$c431 = function(func) { return [makeStrictQuote (func)] },
      peg$c432 = function(lookup) { return [makeStrictQuote ([lookup])] },
      peg$c433 = function(a) { return addLocation(a) },
      peg$c434 = function(loc) { return [loc] },
      peg$c435 = function(rep) { return [rep] },
      peg$c436 = function(cond) { return [cond] },
      peg$c437 = function(func) { return [func] },
      peg$c438 = function(assign) { return [assign] },
      peg$c439 = function(lookup) { return [lookup] },
      peg$c440 = function(alt) { return [alt] },
      peg$c441 = function(args) { return args },
      peg$c442 = function(args) { return concatReduce (['['].concat(args).concat(']')) },
      peg$c443 = function(args) { return concatReduce (['{'].concat(args).concat('}')) },
      peg$c444 = function(head, tail) { return [head].concat(tail) },
      peg$c445 = "&set$",
      peg$c446 = peg$literalExpectation("&set$", false),
      peg$c447 = function(varname, args) { return makeAssign (varname, args) },
      peg$c448 = "&set{",
      peg$c449 = peg$literalExpectation("&set{", false),
      peg$c450 = "$",
      peg$c451 = peg$literalExpectation("$", false),
      peg$c452 = "=>",
      peg$c453 = peg$literalExpectation("=>", false),
      peg$c454 = function(varname, opts) { return makeAssign (varname, arrayWithPos (pseudoQuote (makeAltAssignRhs(opts)))) },
      peg$c455 = function(varname, coord, opts) { return makeAssign (varname, arrayWithPos (makeLayout (coord, makeAltAssignRhs(opts)))) },
      peg$c456 = "@(",
      peg$c457 = peg$literalExpectation("@(", false),
      peg$c458 = ")=>",
      peg$c459 = peg$literalExpectation(")=>", false),
      peg$c460 = function(varname, target) { return makeAssign (varname, target) },
      peg$c461 = ":=",
      peg$c462 = peg$literalExpectation(":=", false),
      peg$c463 = function(varname, target) { return makeAssign (varname, target, true) },
      peg$c464 = "+=",
      peg$c465 = peg$literalExpectation("+=", false),
      peg$c466 = function(varname, delta) { return makeModify (varname, 'add', delta) },
      peg$c467 = "-=",
      peg$c468 = peg$literalExpectation("-=", false),
      peg$c469 = function(varname, delta) { return makeModify (varname, 'subtract', delta) },
      peg$c470 = "*=",
      peg$c471 = peg$literalExpectation("*=", false),
      peg$c472 = function(varname, scale) { return makeModify (varname, 'multiply', scale) },
      peg$c473 = "/=",
      peg$c474 = peg$literalExpectation("/=", false),
      peg$c475 = function(varname, scale) { return makeModify (varname, 'divide', scale) },
      peg$c476 = ".=",
      peg$c477 = peg$literalExpectation(".=", false),
      peg$c478 = function(varname, suffix) { return makeModifyConcat (varname, suffix) },
      peg$c479 = "&tag",
      peg$c480 = peg$literalExpectation("&tag", false),
      peg$c481 = function(tag) { return makeModifyConcat ('tags', [' '].concat (tag)) },
      peg$c482 = function(varname, arg) { return makeAssign (varname, arg) },
      peg$c483 = "accept",
      peg$c484 = peg$literalExpectation("accept", false),
      peg$c485 = "reject",
      peg$c486 = peg$literalExpectation("reject", false),
      peg$c487 = "status",
      peg$c488 = peg$literalExpectation("status", false),
      peg$c489 = "footer",
      peg$c490 = peg$literalExpectation("footer", false),
      peg$c491 = function(func) { return func },
      peg$c492 = /^[^ \t\n\r=~#&${}[\]|\\]/,
      peg$c493 = peg$classExpectation([" ", "\t", "\n", "\r", "=", "~", "#", "&", "$", "{", "}", "[", "]", "|", "\\"], true, false),
      peg$c494 = function(chars) { return [chars.join("")] },
      peg$c495 = "$$",
      peg$c496 = peg$literalExpectation("$$", false),
      peg$c497 = function(num) { return makeLookup (makeGroupVarName (num)) },
      peg$c498 = "$${",
      peg$c499 = peg$literalExpectation("$${", false),
      peg$c500 = function(varname) { return makeSugaredLookup (varname) },
      peg$c501 = function(varname) { return makeLookup (varname) },
      peg$c502 = function(varname) { return varname },
      peg$c503 = "${",
      peg$c504 = peg$literalExpectation("${", false),
      peg$c505 = "|",
      peg$c506 = peg$literalExpectation("|", false),
      peg$c507 = function(head, tail) { return makeAlternation ([head].concat(tail)) },
      peg$c508 = function(head, tail) { return addLocation ([head].concat(tail)) },
      peg$c509 = function(head) { return addLocation ([head]) },
      peg$c510 = /^[A-Z]/,
      peg$c511 = peg$classExpectation([["A", "Z"]], false, false),
      peg$c512 = /^[A-Za-z_0-9]/,
      peg$c513 = peg$classExpectation([["A", "Z"], ["a", "z"], "_", ["0", "9"]], false, false),
      peg$c514 = /^[a-z]/,
      peg$c515 = peg$classExpectation([["a", "z"]], false, false),
      peg$c516 = function(firstChar, mid, lc, rest) { return firstChar + mid.join("") + lc + rest.join("") },
      peg$c517 = /^[A-Z_0-9]/,
      peg$c518 = peg$classExpectation([["A", "Z"], "_", ["0", "9"]], false, false),
      peg$c519 = function(firstChar, rest) { return firstChar + rest.join("") },
      peg$c520 = /^[^@~#&$+\-{}[\]|\\]/,
      peg$c521 = peg$classExpectation(["@", "~", "#", "&", "$", "+", "-", "{", "}", "[", "]", "|", "\\"], true, false),
      peg$c522 = function(chars) { return chars.join("") },
      peg$c523 = /^[0-9]/,
      peg$c524 = peg$classExpectation([["0", "9"]], false, false),
      peg$c525 = function(num) { return parseInt (num.join('')) },
      peg$c526 = ".",
      peg$c527 = peg$literalExpectation(".", false),
      peg$c528 = function(left, right) { return parseFloat(left.join("") + "." +   right.join("")) },
      peg$c529 = "+",
      peg$c530 = peg$literalExpectation("+", false),
      peg$c531 = function(n) { return n },
      peg$c532 = "-",
      peg$c533 = peg$literalExpectation("-", false),
      peg$c534 = function(n) { return -n },
      peg$c535 = /^[A-Za-z_]/,
      peg$c536 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false),
      peg$c537 = peg$otherExpectation("whitespace"),
      peg$c538 = /^[ \t\n\r]/,
      peg$c539 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
      peg$c540 = function(first, rest) {
          return rest.reduce (function (left, next) {
            var op = next[1], right = next[3]
            return makeFunction (op === '+' ? 'add' : 'subtract', [left, right])
          }, first)
        },
      peg$c541 = "*",
      peg$c542 = peg$literalExpectation("*", false),
      peg$c543 = "/",
      peg$c544 = peg$literalExpectation("/", false),
      peg$c545 = function(first, rest) {
          return rest.reduce (function (left, next) {
            var op = next[1], right = next[3]
            return makeFunction (op === '*' ? 'multiply' : 'divide', [left, right])
          }, first)
        },
      peg$c546 = "^",
      peg$c547 = peg$literalExpectation("^", false),
      peg$c548 = "**",
      peg$c549 = peg$literalExpectation("**", false),
      peg$c550 = function(base, exp) { return makeFunction ('pow', [base, exp]) },
      peg$c551 = "e",
      peg$c552 = peg$literalExpectation("e", false),
      peg$c553 = "exp",
      peg$c554 = peg$literalExpectation("exp", false),
      peg$c555 = function(exp) { return makeFunction ('pow', [Math.exp(1).toString(), exp]) },
      peg$c556 = "(",
      peg$c557 = peg$literalExpectation("(", false),
      peg$c558 = ")",
      peg$c559 = peg$literalExpectation(")", false),
      peg$c560 = function(f) { return f.toString() },
      peg$c561 = function(n) { return n.toString() },
      peg$c562 = function(arg) { return wrapNodes (arg) },
      peg$c563 = function(additive) { return makeFunction ('value', [additive]) },
      peg$c564 = function(body, flags) { return { body: body, flags: flags } },
      peg$c565 = "//",
      peg$c566 = peg$literalExpectation("//", false),
      peg$c567 = function(flags) { return { body: [], flags: flags } },
      peg$c568 = function(c, chars) { return concatReduce ([c].concat (chars)) },
      peg$c569 = function(chars) { return chars },
      peg$c570 = /^[*\\\/[]/,
      peg$c571 = peg$classExpectation(["*", "\\", "/", "["], false, false),
      peg$c572 = function(c) { return c },
      peg$c573 = /^[\\\/[]/,
      peg$c574 = peg$classExpectation(["\\", "/", "["], false, false),
      peg$c575 = function(c) { return "\\" + c },
      peg$c576 = function(chars) { return wrapNodes (concatReduce (['['].concat(chars[0] || '').concat(']'))) },
      peg$c577 = function(chars) { return concatReduce (chars) },
      peg$c578 = /^[\]\\]/,
      peg$c579 = peg$classExpectation(["]", "\\"], false, false),
      peg$c580 = /^[gimuy]/,
      peg$c581 = peg$classExpectation(["g", "i", "m", "u", "y"], false, false),
      peg$c582 = function(parts) { return parts },
      peg$c583 = /^[\n\r\u2028\u2029]/,
      peg$c584 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseRHS() {
    var s0;

    s0 = peg$parseOuterNodeList();

    return s0;
  }

  function peg$parseNode() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c2();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s1 = peg$c3;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c6;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s1 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseText();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLocalAssignment();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRepetition();
              if (s0 === peg$FAILED) {
                s0 = peg$parseConditional();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseFunction();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseVarAssignment();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseVarLookup();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseAlternation();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseLinkShortcut();
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseDummyBrackets();
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c10(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (peg$c11.test(input.charAt(peg$currPos))) {
                                s1 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c13(s1);
                              }
                              s0 = s1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNodeList() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseRawNodeList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRawNodeList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNodeList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNode();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNodeList();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNode();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNodeList();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNode();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$c21;
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseOuterNode() {
    var s0, s1;

    s0 = peg$parseNode();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOuterNodeList() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseOuterNode();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOuterNodeList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c19(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseOuterNode();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$c21;
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseLocalAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVarAssignmentList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseFunctionArg();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c26;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVarAssignmentList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIdentifier();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTraceryModifiers();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s7 = peg$c26;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c27); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c28(s3, s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseRepetition() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c31;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNumber();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c33;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseNumber();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c35;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c37(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseNumber();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c35;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c38(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseConditional() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c41) {
          s3 = peg$c41;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$c21;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionArg();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c43) {
              s5 = peg$c43;
              peg$currPos += 4;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$c21;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseFunctionArg();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c45(s2, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c41) {
            s3 = peg$c41;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c21;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFunctionArg();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c46(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c47) {
          s1 = peg$c47;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionArg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFunctionArg();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFunctionArg();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c49(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseFunction() {
    var s0;

    s0 = peg$parseSymbolFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBinaryVarFunction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnaryVarFunction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBinaryFunction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnaryFunction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNullaryFunction();
              if (s0 === peg$FAILED) {
                s0 = peg$parseMapFunction();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRegexFunction();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCallFunction();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseDefineFunction();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseMathFunction();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseMeterFunction();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseScheduleFunction();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseImportanceSamplingFunction();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseLinkFunction();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseLayoutFunction();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseParseFunction();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseListConstructor();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseShortUnaryFunction();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSymbolFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsePlainSymbol();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCallSymbol();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseArgList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseApplySymbol();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionArg();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c26;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseTraceryModifiers();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                  s4 = peg$c26;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c52(s2, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseGetSymbol();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c53(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseSetSymbol();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseFunctionArg();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c54(s1, s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePlainSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePrefixedSymIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c55(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCallSymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSymIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrefixedSymIdentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseApplySymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c61) {
      s1 = peg$c61;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSymIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGetSymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSymIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetSymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c65) {
      s1 = peg$c65;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSymIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSymIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$parsePrefixedSymIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrefixedSymIdentifier();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c31;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c35;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c58(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsePrefixedSymIdentifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c67;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c58(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c35;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c58(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTraceryModifiers() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTraceryModifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTraceryModifiers();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c71(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c21;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTraceryModifier() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c74();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c75) {
        s1 = peg$c75;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c77();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c78) {
          s1 = peg$c78;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c79); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c80();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 3) === peg$c81) {
            s1 = peg$c81;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c83();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c84) {
              s1 = peg$c84;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c86();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMapFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseMapFunctionName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseMapVarIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionArg();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseStrictQuotedFunctionArg();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseMapFunctionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionArg();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseStrictQuotedFunctionArg();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c88(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c59;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDefaultableMapFunctionName();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFunctionArg();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c89(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c90) {
            s1 = peg$c90;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseMapVarIdentifier();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFunctionArg();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseVarIdentifier();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s5 = peg$c92;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                  }
                  if (s5 === peg$FAILED) {
                    s5 = peg$c21;
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseFunctionArg();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parseStrictQuotedFunctionArg();
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c94(s2, s3, s4, s6, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMapFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c95) {
      s0 = peg$c95;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c97) {
        s0 = peg$c97;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseDefaultableMapFunctionName();
      }
    }

    return s0;
  }

  function peg$parseDefaultableMapFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c99) {
      s0 = peg$c99;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c101) {
        s0 = peg$c101;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c103) {
          s0 = peg$c103;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
      }
    }

    return s0;
  }

  function peg$parseMapVarIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseVarIdentifier();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c105;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c21;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c107(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVarIdentifier();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c107(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseRegexFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBinaryRegexFunctionName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRegularExpressionLiteral();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionArg();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseStrictQuotedFunctionArg();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c108(s2, s3, s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryRegexFunctionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRegularExpressionLiteral();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFunctionArg();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c109(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c110) {
          s1 = peg$c110;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionArg();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c112(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseBinaryRegexFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c113) {
      s0 = peg$c113;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
    }

    return s0;
  }

  function peg$parseUnaryRegexFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c117) {
      s0 = peg$c117;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c119) {
        s0 = peg$c119;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
    }

    return s0;
  }

  function peg$parseRegexUnquote() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c121) {
      s1 = peg$c121;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCallFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c124) {
      s1 = peg$c124;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c125); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseArgList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c126(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVarLookup();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgList();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c127(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDefineFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c128) {
      s1 = peg$c128;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseArgIdentifierList();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c130(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgIdentifierList();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c35;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFunctionArg();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c130(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c131) {
          s1 = peg$c131;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionArg();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c133(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseArgIdentifierList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseArgIdentifier();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c33;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$c21;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseArgIdentifierList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c134(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseArgIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseArgIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$parseVarIdentifier();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVarIdentifier();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c107(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBinaryFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBinaryFunctionName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionArg();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c135(s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c136) {
        s1 = peg$c136;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c138(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnaryFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnaryFunctionName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c139(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c140) {
        s1 = peg$c140;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c142(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseShortUnaryFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseShortUnaryFunctionName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c139(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNullaryFunction() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNullaryFunctionName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c143(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBinaryVarFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePushOrUnshift();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVarFunctionArg();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseFunctionArg();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c144(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePushOrUnshift();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionArg();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c145(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnaryVarFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseShiftOrPop();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVarFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c146(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseShiftOrPop();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c147(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c59;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIncOrDec();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseVarFunctionArg();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c146(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c148) {
            s1 = peg$c148;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseVarFunctionArg();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c150(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c151) {
              s1 = peg$c151;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c152); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseVarFunctionArg();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c153(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVarFunctionArg();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c148) {
                  s2 = peg$c148;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c149); }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c154(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseVarFunctionArg();
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c151) {
                    s2 = peg$c151;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c152); }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c155(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMeterFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c156) {
      s1 = peg$c156;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c157); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAdditiveExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStrictQuotedFunctionArg();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c158(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c156) {
        s1 = peg$c156;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAdditiveExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c159(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseScheduleFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c160) {
      s1 = peg$c160;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c161); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVarFunctionArg();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c162(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c163) {
        s1 = peg$c163;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVarFunctionArg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionArg();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c165(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c166) {
          s1 = peg$c166;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseVarFunctionArg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFunctionArg();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c168(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseImportanceSamplingFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c169) {
      s1 = peg$c169;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c171) {
          s3 = peg$c171;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c172); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAdditiveExpr();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c35;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseStrictQuotedFunctionArg();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c173(s2, s5, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c174) {
        s1 = peg$c174;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionArg();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c176(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c177) {
          s1 = peg$c177;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c178); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNumber();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c35;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseFunctionArg();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseFunctionArg();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c179(s2, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6) === peg$c180) {
            s1 = peg$c180;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c181); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseFunctionArg();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseFunctionArg();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c182(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMathFunction() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c183) {
      s1 = peg$c183;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAdditiveExpr();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c185(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c186) {
        s1 = peg$c186;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c187); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c188();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseLinkFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c189) {
      s1 = peg$c189;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFunctionArg();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c191(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c192) {
        s1 = peg$c192;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseXYCoord();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionArg();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseFunctionArg();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c194(s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c195) {
          s1 = peg$c195;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c196); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionArg();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseFunctionArg();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c197(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseLinkShortcut() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c198) {
      s1 = peg$c198;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseText();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c200) {
          s3 = peg$c200;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c201); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c202(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c203;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNodeList();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c205) {
            s3 = peg$c205;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseXYCoord();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDelimitedNodeList();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c207(s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c203;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseNodeList();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c208;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c209); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseDelimitedNodeList();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c191(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseLayoutFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c210) {
      s1 = peg$c210;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c211); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDelimitedXYCoord();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c212(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12) === peg$c213) {
        s1 = peg$c213;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePlaceholderArg();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDelimitedXYCoord();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c215(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c216;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c217); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseXYCoord();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsePlaceholderArg();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c218(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsePlaceholderArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseRawPlaceholderArg();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c219(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRawPlaceholderArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePlainVarLookup();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c220(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsePlainSymbol();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c221(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c222) {
          s1 = peg$c222;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c224) {
            s1 = peg$c224;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c225); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseDelimitedXYCoord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseXYCoord();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c226(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseXYCoord() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSignedNumber();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c33;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedNumber();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c227(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParseFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c228) {
      s1 = peg$c228;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c229); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStrictQuotedFunctionArg();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c230(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c231) {
        s1 = peg$c231;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseStrictQuotedFunctionArg();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c233(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseListConstructor() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c234) {
      s1 = peg$c234;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c235); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNodeList();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c236(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c237) {
        s1 = peg$c237;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseArgList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c239(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c240) {
          s1 = peg$c240;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c241); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseArgList();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c242(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseBinaryFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c243) {
      s0 = peg$c243;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c245) {
        s0 = peg$c245;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c246); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c247) {
          s0 = peg$c247;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c248); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c249) {
            s0 = peg$c249;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c250); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c251) {
              s0 = peg$c251;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c252); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c253) {
                s0 = peg$c253;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c254); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c255) {
                  s0 = peg$c255;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c256); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c257) {
                    s0 = peg$c257;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c258); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c259) {
                      s0 = peg$c259;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c260); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c261) {
                        s0 = peg$c261;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c262); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c263) {
                          s0 = peg$c263;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c264); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c265) {
                            s0 = peg$c265;
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c266); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c267) {
                              s0 = peg$c267;
                              peg$currPos += 3;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c268); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c269) {
                                s0 = peg$c269;
                                peg$currPos += 4;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c270); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c271) {
                                  s0 = peg$c271;
                                  peg$currPos += 3;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c272); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c273) {
                                    s0 = peg$c273;
                                    peg$currPos += 2;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c274); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c275) {
                                      s0 = peg$c275;
                                      peg$currPos += 3;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c276); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c277) {
                                        s0 = peg$c277;
                                        peg$currPos += 7;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c278); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c279) {
                                          s0 = peg$c279;
                                          peg$currPos += 6;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c280); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 4) === peg$c281) {
                                            s0 = peg$c281;
                                            peg$currPos += 4;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c282); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c283) {
                                              s0 = peg$c283;
                                              peg$currPos += 3;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c284); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 5) === peg$c285) {
                                                s0 = peg$c285;
                                                peg$currPos += 5;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c286); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 6) === peg$c287) {
                                                  s0 = peg$c287;
                                                  peg$currPos += 6;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c288); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 9) === peg$c289) {
                                                    s0 = peg$c289;
                                                    peg$currPos += 9;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c290); }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUnaryFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c291) {
      s0 = peg$c291;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c292); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c293) {
        s0 = peg$c293;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c295) {
          s0 = peg$c295;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c296); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c297) {
            s0 = peg$c297;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c299) {
              s0 = peg$c299;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c300); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c301) {
                s0 = peg$c301;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c302); }
              }
              if (s0 === peg$FAILED) {
                s0 = peg$parseStrictQuote();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseQuote();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseUnquote();
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c303) {
                        s0 = peg$c303;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c304); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c305) {
                          s0 = peg$c305;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c306); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c307) {
                            s0 = peg$c307;
                            peg$currPos += 4;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c308); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c309) {
                              s0 = peg$c309;
                              peg$currPos += 5;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c310); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c311) {
                                s0 = peg$c311;
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c312); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c313) {
                                  s0 = peg$c313;
                                  peg$currPos += 7;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c314); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 7) === peg$c315) {
                                    s0 = peg$c315;
                                    peg$currPos += 7;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c316); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c317) {
                                      s0 = peg$c317;
                                      peg$currPos += 6;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c318); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c319) {
                                        s0 = peg$c319;
                                        peg$currPos += 7;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c320); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c321) {
                                          s0 = peg$c321;
                                          peg$currPos += 8;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c322); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 6) === peg$c323) {
                                            s0 = peg$c323;
                                            peg$currPos += 6;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c324); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 8) === peg$c325) {
                                              s0 = peg$c325;
                                              peg$currPos += 8;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c326); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 10) === peg$c327) {
                                                s0 = peg$c327;
                                                peg$currPos += 10;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c328); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c329) {
                                                  s0 = peg$c329;
                                                  peg$currPos += 5;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c330); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 6) === peg$c331) {
                                                    s0 = peg$c331;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c332); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c333) {
                                                      s0 = peg$c333;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c334); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c335) {
                                                        s0 = peg$c335;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c336); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 7) === peg$c337) {
                                                          s0 = peg$c337;
                                                          peg$currPos += 7;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c338); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 6) === peg$c339) {
                                                            s0 = peg$c339;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c340); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 10) === peg$c341) {
                                                              s0 = peg$c341;
                                                              peg$currPos += 10;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c342); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c343) {
                                                                s0 = peg$c343;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c344); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 9) === peg$c345) {
                                                                  s0 = peg$c345;
                                                                  peg$currPos += 9;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 4) === peg$c347) {
                                                                    s0 = peg$c347;
                                                                    peg$currPos += 4;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c348); }
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 5) === peg$c349) {
                                                                      s0 = peg$c349;
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s0 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c350); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 6) === peg$c351) {
                                                                        s0 = peg$c351;
                                                                        peg$currPos += 6;
                                                                      } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c352); }
                                                                      }
                                                                      if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 5) === peg$c353) {
                                                                          s0 = peg$c353;
                                                                          peg$currPos += 5;
                                                                        } else {
                                                                          s0 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c354); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 4) === peg$c355) {
                                                                            s0 = peg$c355;
                                                                            peg$currPos += 4;
                                                                          } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c356); }
                                                                          }
                                                                          if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 8) === peg$c357) {
                                                                              s0 = peg$c357;
                                                                              peg$currPos += 8;
                                                                            } else {
                                                                              s0 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c358); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 7) === peg$c359) {
                                                                                s0 = peg$c359;
                                                                                peg$currPos += 7;
                                                                              } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c360); }
                                                                              }
                                                                              if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 4) === peg$c361) {
                                                                                  s0 = peg$c361;
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s0 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c362); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 6) === peg$c363) {
                                                                                    s0 = peg$c363;
                                                                                    peg$currPos += 6;
                                                                                  } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c364); }
                                                                                  }
                                                                                  if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 6) === peg$c365) {
                                                                                      s0 = peg$c365;
                                                                                      peg$currPos += 6;
                                                                                    } else {
                                                                                      s0 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c366); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 6) === peg$c367) {
                                                                                        s0 = peg$c367;
                                                                                        peg$currPos += 6;
                                                                                      } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c368); }
                                                                                      }
                                                                                      if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 7) === peg$c369) {
                                                                                          s0 = peg$c369;
                                                                                          peg$currPos += 7;
                                                                                        } else {
                                                                                          s0 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c370); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 4) === peg$c371) {
                                                                                            s0 = peg$c371;
                                                                                            peg$currPos += 4;
                                                                                          } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c372); }
                                                                                          }
                                                                                          if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 7) === peg$c373) {
                                                                                              s0 = peg$c373;
                                                                                              peg$currPos += 7;
                                                                                            } else {
                                                                                              s0 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c374); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 6) === peg$c375) {
                                                                                                s0 = peg$c375;
                                                                                                peg$currPos += 6;
                                                                                              } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c376); }
                                                                                              }
                                                                                              if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 3) === peg$c377) {
                                                                                                  s0 = peg$c377;
                                                                                                  peg$currPos += 3;
                                                                                                } else {
                                                                                                  s0 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c378); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 7) === peg$c379) {
                                                                                                    s0 = peg$c379;
                                                                                                    peg$currPos += 7;
                                                                                                  } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c380); }
                                                                                                  }
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 9) === peg$c381) {
                                                                                                      s0 = peg$c381;
                                                                                                      peg$currPos += 9;
                                                                                                    } else {
                                                                                                      s0 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c382); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 3) === peg$c383) {
                                                                                                        s0 = peg$c383;
                                                                                                        peg$currPos += 3;
                                                                                                      } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c384); }
                                                                                                      }
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 6) === peg$c385) {
                                                                                                          s0 = peg$c385;
                                                                                                          peg$currPos += 6;
                                                                                                        } else {
                                                                                                          s0 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c386); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 9) === peg$c387) {
                                                                                                            s0 = peg$c387;
                                                                                                            peg$currPos += 9;
                                                                                                          } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c388); }
                                                                                                          }
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 8) === peg$c389) {
                                                                                                              s0 = peg$c389;
                                                                                                              peg$currPos += 8;
                                                                                                            } else {
                                                                                                              s0 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c390); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 8) === peg$c391) {
                                                                                                                s0 = peg$c391;
                                                                                                                peg$currPos += 8;
                                                                                                              } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c392); }
                                                                                                              }
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 2) === peg$c393) {
                                                                                                                  s0 = peg$c393;
                                                                                                                  peg$currPos += 2;
                                                                                                                } else {
                                                                                                                  s0 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c394); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 2) === peg$c395) {
                                                                                                                    s0 = peg$c395;
                                                                                                                    peg$currPos += 2;
                                                                                                                  } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c396); }
                                                                                                                  }
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 3) === peg$c397) {
                                                                                                                      s0 = peg$c397;
                                                                                                                      peg$currPos += 3;
                                                                                                                    } else {
                                                                                                                      s0 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c398); }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseShortUnaryFunctionName() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 97) {
      s0 = peg$c399;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c400); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 113) {
        s0 = peg$c401;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
    }

    return s0;
  }

  function peg$parseNullaryFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c403) {
      s0 = peg$c403;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c404); }
    }

    return s0;
  }

  function peg$parsePushOrUnshift() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c405) {
      s0 = peg$c405;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c406); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c407) {
        s0 = peg$c407;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c408); }
      }
    }

    return s0;
  }

  function peg$parseShiftOrPop() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c409) {
      s0 = peg$c409;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c410); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c411) {
        s0 = peg$c411;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c412); }
      }
    }

    return s0;
  }

  function peg$parseIncOrDec() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c413) {
      s0 = peg$c413;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c414); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c415) {
        s0 = peg$c415;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c416); }
      }
    }

    return s0;
  }

  function peg$parseStrictQuote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c417) {
      s1 = peg$c417;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c418); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c419;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c421();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQuote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c422) {
      s1 = peg$c422;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c423); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c424;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c426();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnquote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c427) {
      s1 = peg$c427;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c428); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c429();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseQuotedFunctionArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFunctionArg();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c430(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStrictQuotedFunctionArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseFunctionArg();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c431(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVarFunctionArg() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePlainVarLookup();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c432(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePlainVarLookup();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c432(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFunctionArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseRawFunctionArg();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c433(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRawFunctionArg() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseLocalAssignment();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c434(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRepetition();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c435(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseConditional();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c436(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseFunction();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c437(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseVarAssignment();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c438(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseVarLookup();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c439(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseAlternation();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c440(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDelimitedNodeList();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c441(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDummyBrackets() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c203;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNodeList();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c208;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c442(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNodeList();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c443(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDelimitedNodeList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNodeList();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c441(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArgList() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDelimitedNodeList();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseArgList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c21;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c22();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseVarAssignmentList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseVarAssignment();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseVarAssignmentList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c444(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVarAssignment();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseVarAssignment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c445) {
      s1 = peg$c445;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c446); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionArg();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c447(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c448) {
        s1 = peg$c448;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c449); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s2 = peg$c450;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c451); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c21;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s4 = peg$c35;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFunctionArg();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c447(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c203;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c105;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c106); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseNodeList();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c208;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c209); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c447(s2, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c203;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c204); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c452) {
                s3 = peg$c452;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c453); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseAltList();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c208;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c209); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c454(s2, s4);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c203;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c204); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseIdentifier();
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 64) {
                  s3 = peg$c216;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c217); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseXYCoord();
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c452) {
                      s5 = peg$c452;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c453); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseAltList();
                      if (s6 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s7 = peg$c208;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c209); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parse_();
                          if (s8 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c455(s2, s4, s6);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c203;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c204); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseIdentifier();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c456) {
                    s3 = peg$c456;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c457); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseXYCoord();
                    if (s4 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c458) {
                        s5 = peg$c458;
                        peg$currPos += 3;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c459); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseAltList();
                        if (s6 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s7 = peg$c208;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c209); }
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parse_();
                            if (s8 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c455(s2, s4, s6);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 36) {
                  s1 = peg$c450;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c451); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s3 = peg$c92;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c93); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseVarAssignmentTarget();
                      if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c460(s2, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 36) {
                    s1 = peg$c450;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c451); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseIdentifier();
                    if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c461) {
                        s3 = peg$c461;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c462); }
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseVarAssignmentTarget();
                        if (s4 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c463(s2, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 36) {
                      s1 = peg$c450;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c451); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseIdentifier();
                      if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c464) {
                          s3 = peg$c464;
                          peg$currPos += 2;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c465); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parseVarAssignmentTarget();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c466(s2, s4);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 36) {
                        s1 = peg$c450;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c451); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseIdentifier();
                        if (s2 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c467) {
                            s3 = peg$c467;
                            peg$currPos += 2;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c468); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parseVarAssignmentTarget();
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c469(s2, s4);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 36) {
                          s1 = peg$c450;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c451); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseIdentifier();
                          if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c470) {
                              s3 = peg$c470;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c471); }
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parseVarAssignmentTarget();
                              if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c472(s2, s4);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 36) {
                            s1 = peg$c450;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c451); }
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseIdentifier();
                            if (s2 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c473) {
                                s3 = peg$c473;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c474); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parseVarAssignmentTarget();
                                if (s4 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c475(s2, s4);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 36) {
                              s1 = peg$c450;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c451); }
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseIdentifier();
                              if (s2 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c476) {
                                  s3 = peg$c476;
                                  peg$currPos += 2;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c477); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parseVarAssignmentTarget();
                                  if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c478(s2, s4);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c479) {
                                s1 = peg$c479;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c480); }
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseFunctionArg();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parse_();
                                  if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c481(s2);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 38) {
                                  s1 = peg$c59;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseVarAssignFunctionName();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseQuotedFunctionArg();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parse_();
                                      if (s4 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c482(s2, s3);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVarAssignFunctionName() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c483) {
      s0 = peg$c483;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c484); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c485) {
        s0 = peg$c485;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c486); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c487) {
          s0 = peg$c487;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c488); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c489) {
            s0 = peg$c489;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c490); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseVarAssignmentTarget() {
    var s0, s1, s2;

    s0 = peg$parseDelimitedNodeList();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFunctionArg();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c491(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c492.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c493); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c492.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c493); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c494(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseVarLookup() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c495) {
      s1 = peg$c495;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c496); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c497(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c498) {
        s1 = peg$c498;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c499); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNumber();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c35;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c497(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseVarIdentifier();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c500(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsePlainVarLookup() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVarIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c501(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVarIdentifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c450;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c451); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c502(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c503) {
        s1 = peg$c503;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c504); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c35;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c502(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAlternation() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNodeList();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 124) {
          s3 = peg$c505;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c506); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAltList();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c507(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c203;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNodeList();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 124) {
            s3 = peg$c505;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c506); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAltList();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c208;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c209); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c507(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAltList() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNodeList();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c505;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c506); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAltList();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c508(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNodeList();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c509(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCappedIdentifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (peg$c510.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c511); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c512.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c513); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c512.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c513); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c514.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c515); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c512.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c513); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c512.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c513); }
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c516(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUpperCaseIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c510.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c511); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c517.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c518); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c517.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c518); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c519(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseText() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c520.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c521); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c520.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c521); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c522(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c523.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c524); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c523.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c524); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c525(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFloat() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c523.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c524); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c523.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c524); }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c526;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c527); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c523.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c524); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c523.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c524); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c528(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSignedNumber() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c529;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c530); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$c21;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c531(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c532;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c533); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNumber();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c534(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$c535.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c536); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c512.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c513); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c512.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c513); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c519(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c538.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c539); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c538.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c539); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c537); }
    }

    return s0;
  }

  function peg$parseAdditiveExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c529;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c530); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c532;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c533); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseMultiplicativeExpr();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s5 = peg$c529;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c530); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s5 = peg$c532;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c533); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseMultiplicativeExpr();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c540(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseMultiplicativeExpr();
    }

    return s0;
  }

  function peg$parseMultiplicativeExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePrimaryExpr();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c541;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c542); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c543;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c544); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsePrimaryExpr();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c541;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c542); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c543;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c544); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsePrimaryExpr();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c545(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsePowerExpr();
    }

    return s0;
  }

  function peg$parsePowerExpr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsePrimaryExpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s3 = peg$c546;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c547); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c548) {
            s3 = peg$c548;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c549); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePrimaryExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c550(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 101) {
        s1 = peg$c551;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c552); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c553) {
          s1 = peg$c553;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c554); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 94) {
            s3 = peg$c546;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c547); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c548) {
              s3 = peg$c548;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c549); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePrimaryExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c555(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c553) {
          s1 = peg$c553;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c554); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c556;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c557); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseAdditiveExpr();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c558;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c559); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c555(s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsePrimaryExpr();
        }
      }
    }

    return s0;
  }

  function peg$parsePrimaryExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseFloat();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c560(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c561(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFunctionArg();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c562(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c556;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c557); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseAdditiveExpr();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c558;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c559); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c563(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRegularExpressionLiteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c543;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c544); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegularExpressionBody();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s3 = peg$c543;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c544); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseRegularExpressionFlags();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c564(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c565) {
        s1 = peg$c565;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c566); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRegularExpressionFlags();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c567(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseRegularExpressionBody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRegularExpressionFirstChar();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegularExpressionChars();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c568(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegularExpressionChars() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseRegularExpressionChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseRegularExpressionChar();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c569(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRegularExpressionFirstChar() {
    var s0, s1, s2;

    s0 = peg$parseRegexUnquote();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (peg$c570.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c571); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRegularExpressionNonTerminator();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c572(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseRegularExpressionBackslashSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRegularExpressionClass();
        }
      }
    }

    return s0;
  }

  function peg$parseRegularExpressionChar() {
    var s0, s1, s2;

    s0 = peg$parseRegexUnquote();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (peg$c573.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c574); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRegularExpressionNonTerminator();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c572(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseRegularExpressionBackslashSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRegularExpressionClass();
        }
      }
    }

    return s0;
  }

  function peg$parseRegularExpressionBackslashSequence() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegularExpressionNonTerminator();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c575(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegularExpressionNonTerminator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseLineTerminator();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSourceCharacter();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c572(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegularExpressionClass() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c203;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegularExpressionClassChars();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c208;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c576(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRegularExpressionClassChars() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseRegularExpressionClassChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseRegularExpressionClassChar();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c577(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRegularExpressionClassChar() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (peg$c578.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c579); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRegularExpressionNonTerminator();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c572(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseRegularExpressionBackslashSequence();
    }

    return s0;
  }

  function peg$parseRegularExpressionFlags() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c580.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c581); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c580.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c581); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c582(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLineTerminator() {
    var s0;

    if (peg$c583.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c584); }
    }

    return s0;
  }

  function peg$parseSourceCharacter() {
    var s0;

    if (input.length > peg$currPos) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }


  function extend (dest) {
    dest = dest || {}
    Array.prototype.slice.call (arguments, 1).forEach (function (src) {
      if (src)
        Object.keys(src).forEach (function (key) { dest[key] = src[key] })
    })
    return dest
  }

  function addLocation (node, tag) {
    if (location) {
      var loc = location()
      tag = tag || 'pos'
      node[tag] = [loc.start.offset, loc.end.offset - loc.start.offset]
    }
    return node
  }

  function noLocation (builder) {
    var tmpLocation = location
    location = null
    var node = builder()
    location = tmpLocation
    return node
  }

  function copyLocation (destNode, srcNode, destTag, srcTag) {
    srcTag = srcTag || 'pos'
    destTag = destTag || 'pos'
    destNode[destTag] = srcNode[srcTag]
    return destNode
  }

  function arrayWithPos (node) {
    var result = [node]
    if (node.pos)
      result.pos = node.pos
    return result
  }

  function makeNode (type, props) {
    return addLocation (extend ({ type: type }, props))
  }

  function pseudoFunction (tag, builder) {
    return addLocation (extend ({ functag: tag }, noLocation (builder)))
  }

  function makeRep (unit, min, max) { return makeNode ('rep', { unit: unit, min: min, max: max }) }
  function makeSymbolMethod (name, method, args) { return makeNode ('sym', { name: name.toLowerCase(), method: method, bind: args }) }
  function makeLookup (name) { return makeNode ('lookup', { varname: name }) }
  function makeAssign (name, value, visible) { return makeNode ('assign', { varname: name, value: value, visible: visible }) }
  function makeLocalAssign (name, value, scope) { return makeNode ('assign', { varname: name, value: value, local: scope }) }
  function makeAlternation (opts) { return makeNode ('alt', { opts: opts }) }
  function makeConditional (testArg, trueArg, falseArg) { return makeNode ('cond', { test: testArg, t: trueArg, f: falseArg }) }
  function makeFunction (name, args, useArgPos) {
    var node = makeNode ('func', { funcname: funcAlias[name] || name, args: args })
    if (useArgPos && args.pos)
      node.pos = args.pos
    return node
  }

  var funcAlias = { q: 'quotify' }

  function wrapNodes (args) { return (args.length === 1 && typeof(args[0]) !== 'string') ? args[0] : makeRoot (args) }
  function makeRoot (args) {
    var node = makeNode ('root', { rhs: args })
    if (args.pos)
      node.pos = args.pos
    return node
  }

  function makeValue (args) { return makeFunction ('value', args) }

  function makeQuote (args) { return makeFunction ('quote', args) }
  function makeStrictQuote (args) { return makeFunction ('strictquote', args) }

  // pseudoQuote is makeQuote but called non-locally, so it needs to get its location from the arguments
  function pseudoQuote (args) { return makeFunction ('quote', args, true) }
  function pseudoStrictQuote (args) { return makeFunction ('strictquote', args, true) }

  function makeListFunction (func, listvar, list, inner) { return makeFunction (func, [makeLocalAssign (listvar, list, inner)]) }
  function makeReduceFunction (varname, list, result, init, func) { return makeListFunction ('reduce', varname, list, [makeLocalAssign (result, init, func)]) }
  function makeRegexFunction (func, pattern, text, expr) { return makeFunction (func, [wrapNodes(pattern.body), wrapNodes(pattern.flags), wrapNodes(text)].concat (expr || [])) }

  function makeModify (name, func, val) { return makeAssign (name, [makeFunction (func, [makeLookup (name), wrapNodes (val)])]) }
  function makeModifyConcat (name, suffix) { return makeAssign (name, [makeLookup (name)].concat (suffix)) }

  function makeArgList (args) {
    return args && args.length ? [makeFunction ('list', args.map (wrapNodes))] : undefined
  }

  function makeAltAssignRhs (opts) {
    return opts.length === 1 ? opts[0] : arrayWithPos (pseudoAlternation (opts))
  }

  function pseudoAlternation (opts) {
    var alt = makeAlternation (opts)
    if (opts.pos)
      alt.pos = opts.pos
    return alt
  }

  function makeSymbol (name, args) { return makeSymbolMethod (name, 'expand', args) }
  function makeGetSymbol (name) { return makeSymbolMethod (name, 'get') }
  function makeSetSymbol (name, args) { return makeSymbolMethod (name, 'set', args) }

  function makeLinkShortcut (text) {
    var symName = text.toLowerCase()
        .replace(/^[^a-z0-9_]*/,'')
        .replace(/[^a-z0-9_]*$/,'')
        .replace(/'/g,'')
        .replace(/[^a-z0-9_]+/g,'_');
    var loc = addLocation({})
    return (symName.length
  	  ? makeFunction ('link',
                            [makeRoot ([text]),
                             makeQuote ([copyLocation (makeTraceryExpr (symName, []),
                                                       { pos: [loc.pos[0]+2, loc.pos[1]-4] })])])
  	  : ('[[' + text + ']]'))
  }

  var defaultListVarName = '_'
  var defaultJoinText = ' '
  var defaultSplitPattern = '[ \\t\\r\\n]+'
  function makeGroupVarName (n) { return '$' + n }

  function concatNodes (head, tail) {
    return typeof(head) === 'string' && tail.length && typeof(tail[0]) === 'string'
      ? [head + tail[0]].concat(tail.slice(1))
      : [head].concat(tail)
  }

  function concatReduce (list) {
    return list.reduce (function (result, item) {
      return typeof(item) === 'string' && result.length && typeof(result[result.length-1]) === 'string'
        ? result.slice(0,result.length-1).concat ([result[result.length-1] + item])
        : result.concat([item])
    }, [])
  }

  function makeLocalAssignChain (assigns, scope) {
    var list = assigns.slice(0).reverse().reduce (function (chain, assign) {
      return [copyLocation (makeLocalAssign (assign.varname, assign.value, chain), assign, 'pos_assign')]
    }, scope)
    return list[0]
  }

  function makeCapped (args) { return makeFunction ('cap', args) }
  function makeUpperCase (args) { return makeFunction ('uc', args) }

  function sugarize (makeNode, name, args) {
    var node = makeNode (name, args)
    if (name.match(/^[0-9_]*[A-Z].*[a-z]/))
      return makeCapped ([node])
    else if (name.match(/[A-Z]/) && !name.match(/[a-z]/))
      return makeUpperCase ([node])
    return node
  }

  function makeSugaredSymbol (name, args) {
    return sugarize (makeSymbol, name, args)
  }

  function makeSugaredLookup (name) {
    return sugarize (makeLookup, name)
  }

  function makeTraceryExpr (sym, mods) {
    return mods.reduce (function (expr, mod) {
      return makeFunction (mod, [expr])
    }, makeConditional ([makeLookup(sym)], [makeFunction('eval',[makeLookup(sym)])], [makeSymbol(sym)]))
  }

  function makeProbExpr (probArg, trueArg, falseArg) {
    return pseudoFunction
    ('prob',
     function() {
       return makeConditional ([makeFunction ('lt',
  					    [makeFunction ('random', ['1']),
  					     wrapNodes (probArg)])],
  			     trueArg,
  			     falseArg)
     })
  }

  function validRange (min, max) {
    return min <= max
  }

  function makeDefineFunction (args, inner) {
    return pseudoFunction
    ('function',
     function() { return makeQuote ([makeLocalAssignChain (args.map (function (arg, n) { return makeAssign (arg, [makeLookup (makeGroupVarName (n + 1))]) }), inner)]) })
  }

  function makeMeter (icon, expr, status) {
    return pseudoFunction
    ('meter',
     function() { return makeFunction ('push', [makeStrictQuote ([makeLookup ('meters')]),
  					      wrapNodes (makeArgList ([makeArgList ([icon,
  										     [makeStrictQuote ([makeFunction ('math', [expr])])]]
  										    .concat (status ? [status] : []))]))]) })
  }

  function makeRotate (arg) {
    return pseudoFunction
    ('rotate',
     function() { return makeFunction ('append', [makeFunction ('notfirst', arg),
  						makeFunction ('first', arg)]) })
  }

  function makeCycle (v, list, bump) {
    var vLookup = v[0].args, varname = v[0].args[0].varname
    return pseudoFunction
    (bump ? 'bump' : 'cycle',
     function() { return makeFunction ('eval',
  				     [makeFunction ('first', [makeAssign (varname,
  									  [makeConditional (v[0].args,
  											    [bump
  											     ? makeFunction ('bump',
  													     wrapNodes ([vLookup]))
  											     : makeRotate (vLookup)],
  											    bump
  											    ? [makeFunction ('shuffle',
  													     list)]
  											    : list)],
  									  true)])]) })
  }

  function makeQueue (v, list) {
    var vLookup = v[0].args, varname = v[0].args[0].varname
    return pseudoFunction
    ('queue',
     function() { return makeFunction ('eval',
  				     [makeConditional ([makeFunction ('islist',
  								      wrapNodes ([vLookup]))],
  						       [],
  						       [makeAssign (varname, list)]),
  				      makeFunction ('shift', v)]) })
  }

  function makeImportanceSampler (num, expr, template) {
    return pseudoFunction
    ('imp',
     function() { return makeLocalAssignChain
  		([{ varname: 'samples',
  		    value: [] },
  		  { varname: 'weights',
  		    value: [makeListFunction
  			    ('map',
  			     defaultListVarName,
  			     [makeFunction ('iota', [num.toString()])],
  			     [makeStrictQuote ([makeFunction ('push', [makeStrictQuote ([makeLookup ('samples')]),
  								       makeFunction ('eval', template)]),
  						makeFunction ('eval', [makeStrictQuote ([makeFunction ('math', [expr])])])])])] }],
  		 [makeFunction ('nth',
  				[makeFunction ('sample', [makeLookup ('weights')]),
  				 makeLookup ('samples')])]) })
  }

  function makePreserve (arg) {
    return pseudoFunction
    ('preserve',
     function() { return makeQuote ([makeFunction ('unquote', ['$'].concat (arg)),
  				   '=',
  				   makeFunction ('unquote', [makeFunction ('quotify', [makeFunction ('eval', ['$'].concat (arg))])])]) })
  }

  var rhymeTries = 10, rhymeWeight = 100
  function makeRhyme (a, b, tries) {
    return pseudoFunction
    ('rhyme',
     function() { return makeLocalAssignChain
  		([{ varname: 'a', value: [] },
  		  { varname: 'b', value: [] }],
  		 [makeImportanceSampler (tries || rhymeTries,
  					 makeFunction ('pow',
  						       [rhymeWeight.toString(),
  							makeFunction ('assonance',
  								      [makeLookup('a'),
  								       makeLookup('b')])]),
  					 [makeStrictQuote ([makeAssign ('a', a, true),
  							    makeAssign ('b', b, true)])])]) })
  }

  function makeLayout (coord, args) {
    return makeLayoutNoQuote (coord, pseudoQuote (args))
  }

  function makeLayoutNoQuote (coord, arg) {
    return makeFunction ('layout', [coord, arg])
  }

  function makePlaceholder (args, coord) {
    return makeFunction ('placeholder', [pseudoQuote (args), coord])
  }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

},{}],5:[function(require,module,exports){
window.bracery = require('./bracery');

},{"./bracery":1}],6:[function(require,module,exports){
var ParseTree = require('./parsetree')
var extend = ParseTree.extend

var defaultMaxReplies = 100

function makeTagArray (text) {
  return text.replace (/^\s*(.*?)\s*$/, function (_m, g) { return g })
    .split(/\s+/)
    .map (function (tag) { return tag.toLowerCase() })
}

function makeTagString (text, prefix, suffix) {
  prefix = prefix || ''
  suffix = suffix || ''
  return (text
          ? (' ' + makeTagArray(text).map(function(tag){return prefix+tag+suffix}).join(' ') + ' ')
	  : '')
}

function parseTemplateDefs (text) {
  var templates = [], allTemplates = []
  var initCommandParam = { 'PREV': '',
			   'TAGS': '',
			   'TITLE': '',
			   'WEIGHT': '',
			   'AUTHOR': '',
                           'PREFIX': '',
                           'SUFFIX': '' },
      commandParam = extend ({}, initCommandParam)
  try {
    var newTemplateDefReg = /^([\d\.]*)(@.*?|)(>+)\s*(.*?)\s*(#\s*(.*?)\s*(#\s*(.*?)\s*|)|)$/;
    var commandReg = /^ *## +(\S+)\s?(.*?)\s*$/;
    var commentReg = /^ *#([^#]*|[^#]* .*)$/;
    var localSymbolReg = /~[~\*]([A-Za-z0-9_]+)/g;
    var localTagReg = /\*(\S+)/g;
    var localTagInBodyReg = /#[#\*](\S+)/g;
    function expandLocalTag (_m, tag) { return commandParam['PREFIX'] + tag + commandParam['SUFFIX'] }
    function expandLocalSymbol (_m, sym) {
      var newSym = commandParam['PREFIX'] + sym + commandParam['SUFFIX']
      if (sym.toUpperCase() === sym)
        newSym = newSym.toUpperCase()
      else if (sym[0].toUpperCase() === sym[0])
        newSym = newSym[0].toUpperCase() + newSym.substr(1).toLowerCase()
      else
        newSym = newSym.toLowerCase()
      return "~" + newSym
    }
    var replyChain = [], currentTemplates = [], newTemplateDefMatch, commandMatch
    text.split(/\n/).forEach (function (line) {
      if (line.length) {
        line = line.replace (localSymbolReg, function (_m, sym) { return "~" + commandParam['PREFIX'] + sym + commandParam['SUFFIX'] })
        if (commandMatch = commandReg.exec (line)) {
	  var param = commandMatch[1], value = commandMatch[2]
	  if (param === 'RESET') {
	    if (value)  // RESET XXX resets the param setting for XXX
	      commandParam[value] = initCommandParam[value]
	    else  // RESET without an argument resets all params
	      commandParam = extend ({}, initCommandParam)
	  } else
	    commandParam[param] = value
        } else if (commentReg.exec (line)) {
          /* comment, do nothing */
        } else if (currentTemplates.length) {
          line = line.replace (localTagInBodyReg, expandLocalTag)
          var parsedLine = ParseTree.parseRhs (line)
          currentTemplates.forEach (function (currentTemplate) {
            currentTemplate.opts.push (parsedLine)
          })
        } else if (newTemplateDefMatch = newTemplateDefReg.exec (line)) {
          var weight = newTemplateDefMatch[1] || commandParam['WEIGHT'],
              author = newTemplateDefMatch[2] || commandParam['AUTHOR'],
              depth = newTemplateDefMatch[3].length - 1,
	      title = commandParam['TITLE'] + (newTemplateDefMatch[4] || ''),
	      prevTags = (makeTagString ((newTemplateDefMatch[6] || '') + ' ' + commandParam['PREV'])
                          .replace (localTagReg, expandLocalTag)),
	      tags = (makeTagString ((newTemplateDefMatch[8] || '') + ' ' + commandParam['TAGS'])
                      .replace (localTagReg, expandLocalTag))
          var isRoot = depth === 0 && (!prevTags.match(/\S/) || (prevTags.search(' root ') >= 0))
          var authorNames = author ? author.substr(1).split(',') : [null]
          currentTemplates = authorNames.map (function (authorName) {
            var currentTemplate = { title: title,
                                    author: authorName,
			            previousTags: prevTags,
			            tags: tags,
                                    isRoot: isRoot,
                                    weight: weight.length ? parseInt(weight) : undefined,
			            opts: [],
                                    replies: [] }
            if (depth > replyChain.length)
              throw new Error ("Missing replies in chain")
            replyChain = replyChain.slice (0, depth)
            if (depth > 0)
              replyChain[depth-1].replies.push (currentTemplate)
            else
              templates.push (currentTemplate)
            replyChain.push (currentTemplate)
            allTemplates.push (currentTemplate)
            return currentTemplate
          })
        } else
          console.warn ("Can't parse template definition line: " + line)
      } else {
        // line is empty
        currentTemplates = []
      }
    })
  } catch(e) { console.log(e) }
  allTemplates.forEach (function (template) {
    template.content = ParseTree.addFooter (template.opts.length
			                    ? (template.opts.length > 1
			                       ? [ { type: 'alt', opts: template.opts } ]
			                       : template.opts[0])
			                    : [])
    delete template.opts
  })
  return templates
}

function flattenTemplates (templates, parent) {
  return templates.reduce (function (allTemplates, template) {
    template.parent = parent
    return allTemplates.concat (flattenTemplates (template.replies, template))
  }, templates)
}

function sampleTemplate (templates, rng) {
  rng = rng || Math.random
  //  console.warn ("Templates: " + templates.map((t)=>t.title).join(","))
  var totalWeight = templates.reduce (function (total, template) { return total + (template.weight || 1) }, 0)
  var w = totalWeight * rng()
  for (var i = 0; i < templates.length; ++i)
    if ((w -= (templates[i].weight || 1)) <= 0)
      return templates[i]
  return undefined
}

function randomRootTemplate (templates, rng) {
  return sampleTemplate (allRootTemplates (templates), rng)
}

function randomReplyTemplate (templates, tags, prevTemplate, rng) {
  return sampleTemplate (allReplyTemplates (templates, tags, prevTemplate), rng)
}

function allRootTemplates (templates) {
  return templates.filter (function (template) { return template.isRoot })
}

function allReplyTemplates (templates, tags, prevTemplate) {
  var tagArray = typeof(tags) === 'string' ? makeTagArray(tags) : tags
  return templates.filter (function (template) {
    if (prevTemplate && prevTemplate.replies.indexOf (template) >= 0)
      return true
    var prevTags = makeTagArray (template.previousTags)
    var allowedTags = prevTags.filter (function (tag) { return tag[0] !== '!' && tag[0] !== '-' && tag[0] !== '+' })
    var excludedTags = prevTags.filter (function (tag) { return tag[0] === '!' || tag[0] === '-' }).map (function (xtag) { return xtag.substr(1) })
    var requiredTags = prevTags.filter (function (tag) { return tag[0] === '+' }).map (function (xtag) { return xtag.substr(1) })
    return requiredTags.reduce (function (match, xtag) {
      return match && tagArray.indexOf(xtag) >= 0
    }, excludedTags.reduce (function (match, xtag) {
      return match && tagArray.indexOf(xtag) < 0
    }, (allowedTags.length === 0 ||
        allowedTags.reduce (function (match, tag) {
          return match || tagArray.indexOf(tag) >= 0
        }, false))))
  })
}

function promiseMessageList (config) {
  var bracery = config.bracery, templates = config.templates
  var maxReplies = typeof(config.maxReplies) === 'undefined' ? defaultMaxReplies : config.maxReplies
  var accept = config.accept || function (_expansion, _thread, callback) { callback(true) }
  var prevMessage = config.previousMessage
  var generateTemplate = (prevMessage
                          ? randomReplyTemplate.bind (null, templates, prevMessage.tags, prevMessage.template)
                          : randomRootTemplate.bind (null, templates))
  var allTemplates = (prevMessage
                      ? allReplyTemplates.bind (null, templates, prevMessage.tags, prevMessage.template)
                      : allRootTemplates.bind (null, templates))
  function generateMessage (template) {
    var message
    var template = template || generateTemplate (config.rng)
    if (template) {
      var initVars = extend ({},
                             config.vars || {},
                             { tags: template.tags || '',
                               accept: '',
                               reject: '' })
      var vars = extend ({}, initVars)
      message = { template: template,
                  vars: extend ({}, vars),
                  expansion: bracery._expandRhs (extend ({},
                                                         config,
                                                         { rhs: ParseTree.sampleParseTree (ParseTree.addFooter (template.content),
                                                                                           { rng: bracery.rng }),
                                                           vars: vars })) }
      message.title = vars.title || template.title
      message.vars = extend ({}, initVars)
      message.nextVars = extend ({}, vars)
      message.tags = message.nextVars.tags   // this will be overwritten by a future call to extractTags, but is useful for debugging to get a preview of the tags
    }
    return message
  }
  function extractTags (message) {
    message.tags = message.nextVars.prevtags = message.nextVars.tags
    delete message.nextVars.tags
    delete message.nextVars.accept
    delete message.nextVars.reject
    return message
  }
  
  function hasReject (message) {
    return message && message.nextVars && message.nextVars.reject
  }

  function isChoice (message) {
    return message && message.nextVars && (message.nextVars.accept || message.nextVars.reject)
  }
  
  function appendChoiceFooter (message, choice) {
    if (message) {
      var footer = ParseTree.makeFooter (choice)
      if (!message.footerVars) {
        message.footerVars = extend ({}, message.nextVars)
        delete message.nextVars
      }
      var vars = extend ({}, message.footerVars)
      var footerExpansion = bracery._expandRhs (extend ({},
                                                        config,
                                                        { rhs: ParseTree.sampleParseTree (footer,
                                                                                          { rng: bracery.rng }),
                                                          vars: vars }))
      message.expansion.text = message.expansion.text + footerExpansion.text
      message.expansion.tree.push (footerExpansion.tree)
      message.nextVars = extend ({}, vars)
    }
    return extractTags (message)
  }

  function promiseMessage (template) {
    var proposedMessage = generateMessage (template)
    return new Promise (function (resolve, reject) {
      if (!proposedMessage)
        resolve (true)
      else
        accept (proposedMessage, config.thread, resolve, allTemplates)
    }).then (function (accepted) {
      var result = (typeof(accepted) === 'object'
                    ? promiseMessage (extractTags (accepted))
                    : (accepted
                       ? (isChoice(proposedMessage) ? appendChoiceFooter(proposedMessage,'accept') : proposedMessage)
                       : (hasReject(proposedMessage) ? appendChoiceFooter(proposedMessage,'reject') : promiseMessage())))
      return result
    })
  }
  return promiseMessage()
    .then (function (message) {
      return (message
              ? ((maxReplies > 0 || typeof(maxReplies) === 'undefined' || maxReplies === null)
                 ? (promiseMessageList (extend ({},
                                                config,
                                                { previousMessage: message,
                                                  vars: message.nextVars,
                                                  thread: (config.thread || []).concat (message),
                                                  maxReplies: (maxReplies ? maxReplies - 1 : maxReplies) }))
                    .then (function (replies) {
                      return [message].concat (replies)
                    }))
                 : [message])
              : [])
    })
}

module.exports = { parseTemplateDefs: parseTemplateDefs,
                   flattenTemplates: flattenTemplates,
                   sampleTemplate: sampleTemplate,
                   allRootTemplates: allRootTemplates,
                   allReplyTemplates: allReplyTemplates,
                   randomRootTemplate: randomRootTemplate,
                   randomReplyTemplate: randomReplyTemplate,
                   promiseMessageList: promiseMessageList,
                   makeTagArray: makeTagArray,
                   makeTagString: makeTagString }

},{"./parsetree":3}]},{},[5]);
